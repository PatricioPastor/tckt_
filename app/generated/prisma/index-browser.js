
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  username: 'username',
  dni: 'dni',
  birthDate: 'birthDate',
  role: 'role',
  image_base64: 'image_base64'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventId: 'eventId',
  status: 'status',
  amount: 'amount',
  currency: 'currency',
  provider: 'provider',
  externalReference: 'externalReference',
  mpPreferenceId: 'mpPreferenceId',
  mpPaymentId: 'mpPaymentId',
  payerEmail: 'payerEmail',
  payerName: 'payerName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  name: 'name',
  date: 'date',
  location: 'location',
  description: 'description',
  bannerUrl: 'bannerUrl',
  status: 'status',
  producerId: 'producerId',
  capacityTotal: 'capacityTotal',
  isRsvpAllowed: 'isRsvpAllowed',
  isSoldOut: 'isSoldOut',
  eventGenre: 'eventGenre',
  showRemainingTickets: 'showRemainingTickets',
  createdAt: 'createdAt'
};

exports.Prisma.ArtistScalarFieldEnum = {
  id: 'id',
  name: 'name',
  bio: 'bio',
  imageUrl: 'imageUrl',
  socialLinks: 'socialLinks'
};

exports.Prisma.EventArtistScalarFieldEnum = {
  eventId: 'eventId',
  artistId: 'artistId',
  order: 'order',
  slotTime: 'slotTime',
  isHeadliner: 'isHeadliner'
};

exports.Prisma.TicketTypeScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  code: 'code',
  label: 'label',
  price: 'price',
  stockMax: 'stockMax',
  stockCurrent: 'stockCurrent',
  userMaxPerType: 'userMaxPerType',
  scanExpiration: 'scanExpiration',
  isVisible: 'isVisible',
  isDisabled: 'isDisabled'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  ownerId: 'ownerId',
  typeId: 'typeId',
  paymentId: 'paymentId',
  qrCode: 'qrCode',
  code: 'code',
  status: 'status',
  transferredFromId: 'transferredFromId',
  createdAt: 'createdAt'
};

exports.Prisma.RrppAssignmentScalarFieldEnum = {
  rrppUserId: 'rrppUserId',
  eventId: 'eventId',
  commissionRate: 'commissionRate',
  freesGranted: 'freesGranted'
};

exports.Prisma.ParticipantScalarFieldEnum = {
  userId: 'userId',
  eventId: 'eventId',
  viaRsvp: 'viaRsvp',
  qrCode: 'qrCode'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  timestamp: 'timestamp',
  details: 'details'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  message: 'message',
  timestamp: 'timestamp',
  readStatus: 'readStatus'
};

exports.Prisma.GuestListScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  fullName: 'fullName',
  normalizedName: 'normalizedName',
  email: 'email',
  age: 'age',
  invitedBy: 'invitedBy',
  gender: 'gender',
  status: 'status',
  qrCode: 'qrCode',
  checkedInAt: 'checkedInAt',
  checkedInBy: 'checkedInBy',
  importedAt: 'importedAt',
  importedBy: 'importedBy',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  superadmin: 'superadmin',
  head_producer: 'head_producer',
  rrpp: 'rrpp',
  qr_scanner: 'qr_scanner',
  user: 'user'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
  cancelled: 'cancelled',
  refunded: 'refunded',
  in_process: 'in_process'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  draft: 'draft',
  published: 'published',
  finished: 'finished'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  pending: 'pending',
  paid: 'paid',
  used: 'used',
  transferred: 'transferred',
  refunded: 'refunded'
};

exports.GuestStatus = exports.$Enums.GuestStatus = {
  invited: 'invited',
  checked_in: 'checked_in',
  no_show: 'no_show'
};

exports.Prisma.ModelName = {
  account: 'account',
  session: 'session',
  user: 'user',
  verification: 'verification',
  payment: 'payment',
  event: 'event',
  artist: 'artist',
  eventArtist: 'eventArtist',
  ticketType: 'ticketType',
  ticket: 'ticket',
  rrppAssignment: 'rrppAssignment',
  participant: 'participant',
  log: 'log',
  message: 'message',
  guestList: 'guestList'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
