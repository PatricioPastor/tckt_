
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model account
 * 
 */
export type account = $Result.DefaultSelection<Prisma.$accountPayload>
/**
 * Model session
 * 
 */
export type session = $Result.DefaultSelection<Prisma.$sessionPayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model verification
 * 
 */
export type verification = $Result.DefaultSelection<Prisma.$verificationPayload>
/**
 * Model payment
 * 
 */
export type payment = $Result.DefaultSelection<Prisma.$paymentPayload>
/**
 * Model event
 * 
 */
export type event = $Result.DefaultSelection<Prisma.$eventPayload>
/**
 * Model artist
 * 
 */
export type artist = $Result.DefaultSelection<Prisma.$artistPayload>
/**
 * Model eventArtist
 * 
 */
export type eventArtist = $Result.DefaultSelection<Prisma.$eventArtistPayload>
/**
 * Model ticketType
 * 
 */
export type ticketType = $Result.DefaultSelection<Prisma.$ticketTypePayload>
/**
 * Model ticket
 * 
 */
export type ticket = $Result.DefaultSelection<Prisma.$ticketPayload>
/**
 * Model rrppAssignment
 * 
 */
export type rrppAssignment = $Result.DefaultSelection<Prisma.$rrppAssignmentPayload>
/**
 * Model participant
 * 
 */
export type participant = $Result.DefaultSelection<Prisma.$participantPayload>
/**
 * Model log
 * 
 */
export type log = $Result.DefaultSelection<Prisma.$logPayload>
/**
 * Model message
 * 
 */
export type message = $Result.DefaultSelection<Prisma.$messagePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  superadmin: 'superadmin',
  head_producer: 'head_producer',
  rrpp: 'rrpp',
  qr_scanner: 'qr_scanner',
  user: 'user'
};

export type Role = (typeof Role)[keyof typeof Role]


export const EventStatus: {
  draft: 'draft',
  published: 'published',
  finished: 'finished'
};

export type EventStatus = (typeof EventStatus)[keyof typeof EventStatus]


export const TicketStatus: {
  pending: 'pending',
  paid: 'paid',
  used: 'used',
  transferred: 'transferred',
  refunded: 'refunded'
};

export type TicketStatus = (typeof TicketStatus)[keyof typeof TicketStatus]


export const PaymentStatus: {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
  cancelled: 'cancelled',
  refunded: 'refunded',
  in_process: 'in_process'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type EventStatus = $Enums.EventStatus

export const EventStatus: typeof $Enums.EventStatus

export type TicketStatus = $Enums.TicketStatus

export const TicketStatus: typeof $Enums.TicketStatus

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.account`: Exposes CRUD operations for the **account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.accountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.sessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.verificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.paymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.eventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.artist`: Exposes CRUD operations for the **artist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Artists
    * const artists = await prisma.artist.findMany()
    * ```
    */
  get artist(): Prisma.artistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventArtist`: Exposes CRUD operations for the **eventArtist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventArtists
    * const eventArtists = await prisma.eventArtist.findMany()
    * ```
    */
  get eventArtist(): Prisma.eventArtistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ticketType`: Exposes CRUD operations for the **ticketType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TicketTypes
    * const ticketTypes = await prisma.ticketType.findMany()
    * ```
    */
  get ticketType(): Prisma.ticketTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ticket`: Exposes CRUD operations for the **ticket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.ticket.findMany()
    * ```
    */
  get ticket(): Prisma.ticketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rrppAssignment`: Exposes CRUD operations for the **rrppAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RrppAssignments
    * const rrppAssignments = await prisma.rrppAssignment.findMany()
    * ```
    */
  get rrppAssignment(): Prisma.rrppAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.participant`: Exposes CRUD operations for the **participant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Participants
    * const participants = await prisma.participant.findMany()
    * ```
    */
  get participant(): Prisma.participantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.log`: Exposes CRUD operations for the **log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.log.findMany()
    * ```
    */
  get log(): Prisma.logDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.messageDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.3
   * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    account: 'account',
    session: 'session',
    user: 'user',
    verification: 'verification',
    payment: 'payment',
    event: 'event',
    artist: 'artist',
    eventArtist: 'eventArtist',
    ticketType: 'ticketType',
    ticket: 'ticket',
    rrppAssignment: 'rrppAssignment',
    participant: 'participant',
    log: 'log',
    message: 'message'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "account" | "session" | "user" | "verification" | "payment" | "event" | "artist" | "eventArtist" | "ticketType" | "ticket" | "rrppAssignment" | "participant" | "log" | "message"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      account: {
        payload: Prisma.$accountPayload<ExtArgs>
        fields: Prisma.accountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.accountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.accountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accountPayload>
          }
          findFirst: {
            args: Prisma.accountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.accountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accountPayload>
          }
          findMany: {
            args: Prisma.accountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accountPayload>[]
          }
          create: {
            args: Prisma.accountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accountPayload>
          }
          createMany: {
            args: Prisma.accountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.accountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accountPayload>[]
          }
          delete: {
            args: Prisma.accountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accountPayload>
          }
          update: {
            args: Prisma.accountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accountPayload>
          }
          deleteMany: {
            args: Prisma.accountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.accountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.accountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accountPayload>[]
          }
          upsert: {
            args: Prisma.accountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.accountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.accountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      session: {
        payload: Prisma.$sessionPayload<ExtArgs>
        fields: Prisma.sessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sessionPayload>
          }
          findFirst: {
            args: Prisma.sessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sessionPayload>
          }
          findMany: {
            args: Prisma.sessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sessionPayload>[]
          }
          create: {
            args: Prisma.sessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sessionPayload>
          }
          createMany: {
            args: Prisma.sessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.sessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sessionPayload>[]
          }
          delete: {
            args: Prisma.sessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sessionPayload>
          }
          update: {
            args: Prisma.sessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sessionPayload>
          }
          deleteMany: {
            args: Prisma.sessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.sessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.sessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sessionPayload>[]
          }
          upsert: {
            args: Prisma.sessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.sessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.sessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.userCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.userUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      verification: {
        payload: Prisma.$verificationPayload<ExtArgs>
        fields: Prisma.verificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.verificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.verificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verificationPayload>
          }
          findFirst: {
            args: Prisma.verificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.verificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verificationPayload>
          }
          findMany: {
            args: Prisma.verificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verificationPayload>[]
          }
          create: {
            args: Prisma.verificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verificationPayload>
          }
          createMany: {
            args: Prisma.verificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.verificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verificationPayload>[]
          }
          delete: {
            args: Prisma.verificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verificationPayload>
          }
          update: {
            args: Prisma.verificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verificationPayload>
          }
          deleteMany: {
            args: Prisma.verificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.verificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.verificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verificationPayload>[]
          }
          upsert: {
            args: Prisma.verificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verificationPayload>
          }
          aggregate: {
            args: Prisma.VerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerification>
          }
          groupBy: {
            args: Prisma.verificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.verificationCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationCountAggregateOutputType> | number
          }
        }
      }
      payment: {
        payload: Prisma.$paymentPayload<ExtArgs>
        fields: Prisma.paymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.paymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.paymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          findFirst: {
            args: Prisma.paymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.paymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          findMany: {
            args: Prisma.paymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>[]
          }
          create: {
            args: Prisma.paymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          createMany: {
            args: Prisma.paymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.paymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>[]
          }
          delete: {
            args: Prisma.paymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          update: {
            args: Prisma.paymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          deleteMany: {
            args: Prisma.paymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.paymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.paymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>[]
          }
          upsert: {
            args: Prisma.paymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.paymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.paymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      event: {
        payload: Prisma.$eventPayload<ExtArgs>
        fields: Prisma.eventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.eventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.eventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventPayload>
          }
          findFirst: {
            args: Prisma.eventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.eventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventPayload>
          }
          findMany: {
            args: Prisma.eventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventPayload>[]
          }
          create: {
            args: Prisma.eventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventPayload>
          }
          createMany: {
            args: Prisma.eventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.eventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventPayload>[]
          }
          delete: {
            args: Prisma.eventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventPayload>
          }
          update: {
            args: Prisma.eventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventPayload>
          }
          deleteMany: {
            args: Prisma.eventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.eventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.eventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventPayload>[]
          }
          upsert: {
            args: Prisma.eventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.eventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.eventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      artist: {
        payload: Prisma.$artistPayload<ExtArgs>
        fields: Prisma.artistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.artistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.artistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistPayload>
          }
          findFirst: {
            args: Prisma.artistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.artistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistPayload>
          }
          findMany: {
            args: Prisma.artistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistPayload>[]
          }
          create: {
            args: Prisma.artistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistPayload>
          }
          createMany: {
            args: Prisma.artistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.artistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistPayload>[]
          }
          delete: {
            args: Prisma.artistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistPayload>
          }
          update: {
            args: Prisma.artistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistPayload>
          }
          deleteMany: {
            args: Prisma.artistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.artistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.artistUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistPayload>[]
          }
          upsert: {
            args: Prisma.artistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistPayload>
          }
          aggregate: {
            args: Prisma.ArtistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArtist>
          }
          groupBy: {
            args: Prisma.artistGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArtistGroupByOutputType>[]
          }
          count: {
            args: Prisma.artistCountArgs<ExtArgs>
            result: $Utils.Optional<ArtistCountAggregateOutputType> | number
          }
        }
      }
      eventArtist: {
        payload: Prisma.$eventArtistPayload<ExtArgs>
        fields: Prisma.eventArtistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.eventArtistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventArtistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.eventArtistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventArtistPayload>
          }
          findFirst: {
            args: Prisma.eventArtistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventArtistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.eventArtistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventArtistPayload>
          }
          findMany: {
            args: Prisma.eventArtistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventArtistPayload>[]
          }
          create: {
            args: Prisma.eventArtistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventArtistPayload>
          }
          createMany: {
            args: Prisma.eventArtistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.eventArtistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventArtistPayload>[]
          }
          delete: {
            args: Prisma.eventArtistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventArtistPayload>
          }
          update: {
            args: Prisma.eventArtistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventArtistPayload>
          }
          deleteMany: {
            args: Prisma.eventArtistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.eventArtistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.eventArtistUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventArtistPayload>[]
          }
          upsert: {
            args: Prisma.eventArtistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$eventArtistPayload>
          }
          aggregate: {
            args: Prisma.EventArtistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventArtist>
          }
          groupBy: {
            args: Prisma.eventArtistGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventArtistGroupByOutputType>[]
          }
          count: {
            args: Prisma.eventArtistCountArgs<ExtArgs>
            result: $Utils.Optional<EventArtistCountAggregateOutputType> | number
          }
        }
      }
      ticketType: {
        payload: Prisma.$ticketTypePayload<ExtArgs>
        fields: Prisma.ticketTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ticketTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ticketTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketTypePayload>
          }
          findFirst: {
            args: Prisma.ticketTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ticketTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketTypePayload>
          }
          findMany: {
            args: Prisma.ticketTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketTypePayload>[]
          }
          create: {
            args: Prisma.ticketTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketTypePayload>
          }
          createMany: {
            args: Prisma.ticketTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ticketTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketTypePayload>[]
          }
          delete: {
            args: Prisma.ticketTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketTypePayload>
          }
          update: {
            args: Prisma.ticketTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketTypePayload>
          }
          deleteMany: {
            args: Prisma.ticketTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ticketTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ticketTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketTypePayload>[]
          }
          upsert: {
            args: Prisma.ticketTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketTypePayload>
          }
          aggregate: {
            args: Prisma.TicketTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicketType>
          }
          groupBy: {
            args: Prisma.ticketTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ticketTypeCountArgs<ExtArgs>
            result: $Utils.Optional<TicketTypeCountAggregateOutputType> | number
          }
        }
      }
      ticket: {
        payload: Prisma.$ticketPayload<ExtArgs>
        fields: Prisma.ticketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ticketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ticketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>
          }
          findFirst: {
            args: Prisma.ticketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ticketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>
          }
          findMany: {
            args: Prisma.ticketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>[]
          }
          create: {
            args: Prisma.ticketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>
          }
          createMany: {
            args: Prisma.ticketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ticketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>[]
          }
          delete: {
            args: Prisma.ticketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>
          }
          update: {
            args: Prisma.ticketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>
          }
          deleteMany: {
            args: Prisma.ticketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ticketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ticketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>[]
          }
          upsert: {
            args: Prisma.ticketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>
          }
          aggregate: {
            args: Prisma.TicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket>
          }
          groupBy: {
            args: Prisma.ticketGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.ticketCountArgs<ExtArgs>
            result: $Utils.Optional<TicketCountAggregateOutputType> | number
          }
        }
      }
      rrppAssignment: {
        payload: Prisma.$rrppAssignmentPayload<ExtArgs>
        fields: Prisma.rrppAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.rrppAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rrppAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.rrppAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rrppAssignmentPayload>
          }
          findFirst: {
            args: Prisma.rrppAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rrppAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.rrppAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rrppAssignmentPayload>
          }
          findMany: {
            args: Prisma.rrppAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rrppAssignmentPayload>[]
          }
          create: {
            args: Prisma.rrppAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rrppAssignmentPayload>
          }
          createMany: {
            args: Prisma.rrppAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.rrppAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rrppAssignmentPayload>[]
          }
          delete: {
            args: Prisma.rrppAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rrppAssignmentPayload>
          }
          update: {
            args: Prisma.rrppAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rrppAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.rrppAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.rrppAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.rrppAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rrppAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.rrppAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rrppAssignmentPayload>
          }
          aggregate: {
            args: Prisma.RrppAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRrppAssignment>
          }
          groupBy: {
            args: Prisma.rrppAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<RrppAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.rrppAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<RrppAssignmentCountAggregateOutputType> | number
          }
        }
      }
      participant: {
        payload: Prisma.$participantPayload<ExtArgs>
        fields: Prisma.participantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.participantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$participantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.participantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$participantPayload>
          }
          findFirst: {
            args: Prisma.participantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$participantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.participantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$participantPayload>
          }
          findMany: {
            args: Prisma.participantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$participantPayload>[]
          }
          create: {
            args: Prisma.participantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$participantPayload>
          }
          createMany: {
            args: Prisma.participantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.participantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$participantPayload>[]
          }
          delete: {
            args: Prisma.participantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$participantPayload>
          }
          update: {
            args: Prisma.participantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$participantPayload>
          }
          deleteMany: {
            args: Prisma.participantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.participantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.participantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$participantPayload>[]
          }
          upsert: {
            args: Prisma.participantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$participantPayload>
          }
          aggregate: {
            args: Prisma.ParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParticipant>
          }
          groupBy: {
            args: Prisma.participantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.participantCountArgs<ExtArgs>
            result: $Utils.Optional<ParticipantCountAggregateOutputType> | number
          }
        }
      }
      log: {
        payload: Prisma.$logPayload<ExtArgs>
        fields: Prisma.logFieldRefs
        operations: {
          findUnique: {
            args: Prisma.logFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.logFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logPayload>
          }
          findFirst: {
            args: Prisma.logFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.logFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logPayload>
          }
          findMany: {
            args: Prisma.logFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logPayload>[]
          }
          create: {
            args: Prisma.logCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logPayload>
          }
          createMany: {
            args: Prisma.logCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.logCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logPayload>[]
          }
          delete: {
            args: Prisma.logDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logPayload>
          }
          update: {
            args: Prisma.logUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logPayload>
          }
          deleteMany: {
            args: Prisma.logDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.logUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.logUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logPayload>[]
          }
          upsert: {
            args: Prisma.logUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logPayload>
          }
          aggregate: {
            args: Prisma.LogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLog>
          }
          groupBy: {
            args: Prisma.logGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogGroupByOutputType>[]
          }
          count: {
            args: Prisma.logCountArgs<ExtArgs>
            result: $Utils.Optional<LogCountAggregateOutputType> | number
          }
        }
      }
      message: {
        payload: Prisma.$messagePayload<ExtArgs>
        fields: Prisma.messageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.messageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.messageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          findFirst: {
            args: Prisma.messageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.messageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          findMany: {
            args: Prisma.messageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>[]
          }
          create: {
            args: Prisma.messageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          createMany: {
            args: Prisma.messageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.messageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>[]
          }
          delete: {
            args: Prisma.messageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          update: {
            args: Prisma.messageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          deleteMany: {
            args: Prisma.messageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.messageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.messageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>[]
          }
          upsert: {
            args: Prisma.messageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.messageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.messageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    account?: accountOmit
    session?: sessionOmit
    user?: userOmit
    verification?: verificationOmit
    payment?: paymentOmit
    event?: eventOmit
    artist?: artistOmit
    eventArtist?: eventArtistOmit
    ticketType?: ticketTypeOmit
    ticket?: ticketOmit
    rrppAssignment?: rrppAssignmentOmit
    participant?: participantOmit
    log?: logOmit
    message?: messageOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    tickets: number
    transferredTickets: number
    participants: number
    rrppAssignments: number
    account: number
    session: number
    logs: number
    sentMessages: number
    receivedMessages: number
    payments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | UserCountOutputTypeCountTicketsArgs
    transferredTickets?: boolean | UserCountOutputTypeCountTransferredTicketsArgs
    participants?: boolean | UserCountOutputTypeCountParticipantsArgs
    rrppAssignments?: boolean | UserCountOutputTypeCountRrppAssignmentsArgs
    account?: boolean | UserCountOutputTypeCountAccountArgs
    session?: boolean | UserCountOutputTypeCountSessionArgs
    logs?: boolean | UserCountOutputTypeCountLogsArgs
    sentMessages?: boolean | UserCountOutputTypeCountSentMessagesArgs
    receivedMessages?: boolean | UserCountOutputTypeCountReceivedMessagesArgs
    payments?: boolean | UserCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransferredTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: participantWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRrppAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rrppAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: accountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: logWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: messageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: messageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentWhereInput
  }


  /**
   * Count Type PaymentCountOutputType
   */

  export type PaymentCountOutputType = {
    tickets: number
  }

  export type PaymentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | PaymentCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentCountOutputType
     */
    select?: PaymentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    ticketTypes: number
    eventArtists: number
    tickets: number
    participants: number
    rrppAssignments: number
    payments: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticketTypes?: boolean | EventCountOutputTypeCountTicketTypesArgs
    eventArtists?: boolean | EventCountOutputTypeCountEventArtistsArgs
    tickets?: boolean | EventCountOutputTypeCountTicketsArgs
    participants?: boolean | EventCountOutputTypeCountParticipantsArgs
    rrppAssignments?: boolean | EventCountOutputTypeCountRrppAssignmentsArgs
    payments?: boolean | EventCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountTicketTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketTypeWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountEventArtistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: eventArtistWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: participantWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountRrppAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rrppAssignmentWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentWhereInput
  }


  /**
   * Count Type ArtistCountOutputType
   */

  export type ArtistCountOutputType = {
    eventArtists: number
  }

  export type ArtistCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eventArtists?: boolean | ArtistCountOutputTypeCountEventArtistsArgs
  }

  // Custom InputTypes
  /**
   * ArtistCountOutputType without action
   */
  export type ArtistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtistCountOutputType
     */
    select?: ArtistCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArtistCountOutputType without action
   */
  export type ArtistCountOutputTypeCountEventArtistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: eventArtistWhereInput
  }


  /**
   * Count Type TicketTypeCountOutputType
   */

  export type TicketTypeCountOutputType = {
    tickets: number
  }

  export type TicketTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | TicketTypeCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * TicketTypeCountOutputType without action
   */
  export type TicketTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketTypeCountOutputType
     */
    select?: TicketTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TicketTypeCountOutputType without action
   */
  export type TicketTypeCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketWhereInput
  }


  /**
   * Models
   */

  /**
   * Model account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    accountId: number
    providerId: number
    userId: number
    accessToken: number
    refreshToken: number
    idToken: number
    accessTokenExpiresAt: number
    refreshTokenExpiresAt: number
    scope: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which account to aggregate.
     */
    where?: accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accounts to fetch.
     */
    orderBy?: accountOrderByWithRelationInput | accountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type accountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: accountWhereInput
    orderBy?: accountOrderByWithAggregationInput | accountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: accountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends accountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type accountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type accountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type accountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type accountSelectScalar = {
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type accountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "accountId" | "providerId" | "userId" | "accessToken" | "refreshToken" | "idToken" | "accessTokenExpiresAt" | "refreshTokenExpiresAt" | "scope" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type accountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }
  export type accountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }
  export type accountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $accountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "account"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountId: string
      providerId: string
      userId: string
      accessToken: string | null
      refreshToken: string | null
      idToken: string | null
      accessTokenExpiresAt: Date | null
      refreshTokenExpiresAt: Date | null
      scope: string | null
      password: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type accountGetPayload<S extends boolean | null | undefined | accountDefaultArgs> = $Result.GetResult<Prisma.$accountPayload, S>

  type accountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<accountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface accountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['account'], meta: { name: 'account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {accountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends accountFindUniqueArgs>(args: SelectSubset<T, accountFindUniqueArgs<ExtArgs>>): Prisma__accountClient<$Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {accountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends accountFindUniqueOrThrowArgs>(args: SelectSubset<T, accountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__accountClient<$Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends accountFindFirstArgs>(args?: SelectSubset<T, accountFindFirstArgs<ExtArgs>>): Prisma__accountClient<$Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends accountFindFirstOrThrowArgs>(args?: SelectSubset<T, accountFindFirstOrThrowArgs<ExtArgs>>): Prisma__accountClient<$Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends accountFindManyArgs>(args?: SelectSubset<T, accountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {accountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends accountCreateArgs>(args: SelectSubset<T, accountCreateArgs<ExtArgs>>): Prisma__accountClient<$Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {accountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends accountCreateManyArgs>(args?: SelectSubset<T, accountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {accountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends accountCreateManyAndReturnArgs>(args?: SelectSubset<T, accountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {accountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends accountDeleteArgs>(args: SelectSubset<T, accountDeleteArgs<ExtArgs>>): Prisma__accountClient<$Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {accountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends accountUpdateArgs>(args: SelectSubset<T, accountUpdateArgs<ExtArgs>>): Prisma__accountClient<$Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {accountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends accountDeleteManyArgs>(args?: SelectSubset<T, accountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends accountUpdateManyArgs>(args: SelectSubset<T, accountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {accountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends accountUpdateManyAndReturnArgs>(args: SelectSubset<T, accountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {accountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends accountUpsertArgs>(args: SelectSubset<T, accountUpsertArgs<ExtArgs>>): Prisma__accountClient<$Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends accountCountArgs>(
      args?: Subset<T, accountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends accountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: accountGroupByArgs['orderBy'] }
        : { orderBy?: accountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, accountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the account model
   */
  readonly fields: accountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__accountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the account model
   */
  interface accountFieldRefs {
    readonly id: FieldRef<"account", 'String'>
    readonly accountId: FieldRef<"account", 'String'>
    readonly providerId: FieldRef<"account", 'String'>
    readonly userId: FieldRef<"account", 'String'>
    readonly accessToken: FieldRef<"account", 'String'>
    readonly refreshToken: FieldRef<"account", 'String'>
    readonly idToken: FieldRef<"account", 'String'>
    readonly accessTokenExpiresAt: FieldRef<"account", 'DateTime'>
    readonly refreshTokenExpiresAt: FieldRef<"account", 'DateTime'>
    readonly scope: FieldRef<"account", 'String'>
    readonly password: FieldRef<"account", 'String'>
    readonly createdAt: FieldRef<"account", 'DateTime'>
    readonly updatedAt: FieldRef<"account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * account findUnique
   */
  export type accountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the account
     */
    omit?: accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * Filter, which account to fetch.
     */
    where: accountWhereUniqueInput
  }

  /**
   * account findUniqueOrThrow
   */
  export type accountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the account
     */
    omit?: accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * Filter, which account to fetch.
     */
    where: accountWhereUniqueInput
  }

  /**
   * account findFirst
   */
  export type accountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the account
     */
    omit?: accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * Filter, which account to fetch.
     */
    where?: accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accounts to fetch.
     */
    orderBy?: accountOrderByWithRelationInput | accountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for accounts.
     */
    cursor?: accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * account findFirstOrThrow
   */
  export type accountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the account
     */
    omit?: accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * Filter, which account to fetch.
     */
    where?: accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accounts to fetch.
     */
    orderBy?: accountOrderByWithRelationInput | accountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for accounts.
     */
    cursor?: accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * account findMany
   */
  export type accountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the account
     */
    omit?: accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * Filter, which accounts to fetch.
     */
    where?: accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accounts to fetch.
     */
    orderBy?: accountOrderByWithRelationInput | accountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing accounts.
     */
    cursor?: accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * account create
   */
  export type accountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the account
     */
    omit?: accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * The data needed to create a account.
     */
    data: XOR<accountCreateInput, accountUncheckedCreateInput>
  }

  /**
   * account createMany
   */
  export type accountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many accounts.
     */
    data: accountCreateManyInput | accountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * account createManyAndReturn
   */
  export type accountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the account
     */
    omit?: accountOmit<ExtArgs> | null
    /**
     * The data used to create many accounts.
     */
    data: accountCreateManyInput | accountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * account update
   */
  export type accountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the account
     */
    omit?: accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * The data needed to update a account.
     */
    data: XOR<accountUpdateInput, accountUncheckedUpdateInput>
    /**
     * Choose, which account to update.
     */
    where: accountWhereUniqueInput
  }

  /**
   * account updateMany
   */
  export type accountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update accounts.
     */
    data: XOR<accountUpdateManyMutationInput, accountUncheckedUpdateManyInput>
    /**
     * Filter which accounts to update
     */
    where?: accountWhereInput
    /**
     * Limit how many accounts to update.
     */
    limit?: number
  }

  /**
   * account updateManyAndReturn
   */
  export type accountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the account
     */
    omit?: accountOmit<ExtArgs> | null
    /**
     * The data used to update accounts.
     */
    data: XOR<accountUpdateManyMutationInput, accountUncheckedUpdateManyInput>
    /**
     * Filter which accounts to update
     */
    where?: accountWhereInput
    /**
     * Limit how many accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * account upsert
   */
  export type accountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the account
     */
    omit?: accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * The filter to search for the account to update in case it exists.
     */
    where: accountWhereUniqueInput
    /**
     * In case the account found by the `where` argument doesn't exist, create a new account with this data.
     */
    create: XOR<accountCreateInput, accountUncheckedCreateInput>
    /**
     * In case the account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<accountUpdateInput, accountUncheckedUpdateInput>
  }

  /**
   * account delete
   */
  export type accountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the account
     */
    omit?: accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * Filter which account to delete.
     */
    where: accountWhereUniqueInput
  }

  /**
   * account deleteMany
   */
  export type accountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which accounts to delete
     */
    where?: accountWhereInput
    /**
     * Limit how many accounts to delete.
     */
    limit?: number
  }

  /**
   * account without action
   */
  export type accountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the account
     */
    omit?: accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accountInclude<ExtArgs> | null
  }


  /**
   * Model session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    expiresAt: number
    token: number
    createdAt: number
    updatedAt: number
    ipAddress: number
    userAgent: number
    userId: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which session to aggregate.
     */
    where?: sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: sessionOrderByWithRelationInput | sessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type sessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sessionWhereInput
    orderBy?: sessionOrderByWithAggregationInput | sessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: sessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    expiresAt: Date
    token: string
    createdAt: Date
    updatedAt: Date
    ipAddress: string | null
    userAgent: string | null
    userId: string
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends sessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type sessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type sessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type sessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type sessionSelectScalar = {
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
  }

  export type sessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expiresAt" | "token" | "createdAt" | "updatedAt" | "ipAddress" | "userAgent" | "userId", ExtArgs["result"]["session"]>
  export type sessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }
  export type sessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }
  export type sessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $sessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "session"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      expiresAt: Date
      token: string
      createdAt: Date
      updatedAt: Date
      ipAddress: string | null
      userAgent: string | null
      userId: string
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type sessionGetPayload<S extends boolean | null | undefined | sessionDefaultArgs> = $Result.GetResult<Prisma.$sessionPayload, S>

  type sessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<sessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface sessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['session'], meta: { name: 'session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {sessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends sessionFindUniqueArgs>(args: SelectSubset<T, sessionFindUniqueArgs<ExtArgs>>): Prisma__sessionClient<$Result.GetResult<Prisma.$sessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {sessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends sessionFindUniqueOrThrowArgs>(args: SelectSubset<T, sessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__sessionClient<$Result.GetResult<Prisma.$sessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends sessionFindFirstArgs>(args?: SelectSubset<T, sessionFindFirstArgs<ExtArgs>>): Prisma__sessionClient<$Result.GetResult<Prisma.$sessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends sessionFindFirstOrThrowArgs>(args?: SelectSubset<T, sessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__sessionClient<$Result.GetResult<Prisma.$sessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends sessionFindManyArgs>(args?: SelectSubset<T, sessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {sessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends sessionCreateArgs>(args: SelectSubset<T, sessionCreateArgs<ExtArgs>>): Prisma__sessionClient<$Result.GetResult<Prisma.$sessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {sessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends sessionCreateManyArgs>(args?: SelectSubset<T, sessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {sessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends sessionCreateManyAndReturnArgs>(args?: SelectSubset<T, sessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {sessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends sessionDeleteArgs>(args: SelectSubset<T, sessionDeleteArgs<ExtArgs>>): Prisma__sessionClient<$Result.GetResult<Prisma.$sessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {sessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends sessionUpdateArgs>(args: SelectSubset<T, sessionUpdateArgs<ExtArgs>>): Prisma__sessionClient<$Result.GetResult<Prisma.$sessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {sessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends sessionDeleteManyArgs>(args?: SelectSubset<T, sessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends sessionUpdateManyArgs>(args: SelectSubset<T, sessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {sessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends sessionUpdateManyAndReturnArgs>(args: SelectSubset<T, sessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {sessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends sessionUpsertArgs>(args: SelectSubset<T, sessionUpsertArgs<ExtArgs>>): Prisma__sessionClient<$Result.GetResult<Prisma.$sessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends sessionCountArgs>(
      args?: Subset<T, sessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sessionGroupByArgs['orderBy'] }
        : { orderBy?: sessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the session model
   */
  readonly fields: sessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the session model
   */
  interface sessionFieldRefs {
    readonly id: FieldRef<"session", 'String'>
    readonly expiresAt: FieldRef<"session", 'DateTime'>
    readonly token: FieldRef<"session", 'String'>
    readonly createdAt: FieldRef<"session", 'DateTime'>
    readonly updatedAt: FieldRef<"session", 'DateTime'>
    readonly ipAddress: FieldRef<"session", 'String'>
    readonly userAgent: FieldRef<"session", 'String'>
    readonly userId: FieldRef<"session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * session findUnique
   */
  export type sessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the session
     */
    omit?: sessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sessionInclude<ExtArgs> | null
    /**
     * Filter, which session to fetch.
     */
    where: sessionWhereUniqueInput
  }

  /**
   * session findUniqueOrThrow
   */
  export type sessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the session
     */
    omit?: sessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sessionInclude<ExtArgs> | null
    /**
     * Filter, which session to fetch.
     */
    where: sessionWhereUniqueInput
  }

  /**
   * session findFirst
   */
  export type sessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the session
     */
    omit?: sessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sessionInclude<ExtArgs> | null
    /**
     * Filter, which session to fetch.
     */
    where?: sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: sessionOrderByWithRelationInput | sessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sessions.
     */
    cursor?: sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * session findFirstOrThrow
   */
  export type sessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the session
     */
    omit?: sessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sessionInclude<ExtArgs> | null
    /**
     * Filter, which session to fetch.
     */
    where?: sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: sessionOrderByWithRelationInput | sessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sessions.
     */
    cursor?: sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * session findMany
   */
  export type sessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the session
     */
    omit?: sessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sessionInclude<ExtArgs> | null
    /**
     * Filter, which sessions to fetch.
     */
    where?: sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: sessionOrderByWithRelationInput | sessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sessions.
     */
    cursor?: sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * session create
   */
  export type sessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the session
     */
    omit?: sessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sessionInclude<ExtArgs> | null
    /**
     * The data needed to create a session.
     */
    data: XOR<sessionCreateInput, sessionUncheckedCreateInput>
  }

  /**
   * session createMany
   */
  export type sessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sessions.
     */
    data: sessionCreateManyInput | sessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * session createManyAndReturn
   */
  export type sessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the session
     */
    omit?: sessionOmit<ExtArgs> | null
    /**
     * The data used to create many sessions.
     */
    data: sessionCreateManyInput | sessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * session update
   */
  export type sessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the session
     */
    omit?: sessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sessionInclude<ExtArgs> | null
    /**
     * The data needed to update a session.
     */
    data: XOR<sessionUpdateInput, sessionUncheckedUpdateInput>
    /**
     * Choose, which session to update.
     */
    where: sessionWhereUniqueInput
  }

  /**
   * session updateMany
   */
  export type sessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sessions.
     */
    data: XOR<sessionUpdateManyMutationInput, sessionUncheckedUpdateManyInput>
    /**
     * Filter which sessions to update
     */
    where?: sessionWhereInput
    /**
     * Limit how many sessions to update.
     */
    limit?: number
  }

  /**
   * session updateManyAndReturn
   */
  export type sessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the session
     */
    omit?: sessionOmit<ExtArgs> | null
    /**
     * The data used to update sessions.
     */
    data: XOR<sessionUpdateManyMutationInput, sessionUncheckedUpdateManyInput>
    /**
     * Filter which sessions to update
     */
    where?: sessionWhereInput
    /**
     * Limit how many sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * session upsert
   */
  export type sessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the session
     */
    omit?: sessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sessionInclude<ExtArgs> | null
    /**
     * The filter to search for the session to update in case it exists.
     */
    where: sessionWhereUniqueInput
    /**
     * In case the session found by the `where` argument doesn't exist, create a new session with this data.
     */
    create: XOR<sessionCreateInput, sessionUncheckedCreateInput>
    /**
     * In case the session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sessionUpdateInput, sessionUncheckedUpdateInput>
  }

  /**
   * session delete
   */
  export type sessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the session
     */
    omit?: sessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sessionInclude<ExtArgs> | null
    /**
     * Filter which session to delete.
     */
    where: sessionWhereUniqueInput
  }

  /**
   * session deleteMany
   */
  export type sessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sessions to delete
     */
    where?: sessionWhereInput
    /**
     * Limit how many sessions to delete.
     */
    limit?: number
  }

  /**
   * session without action
   */
  export type sessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the session
     */
    omit?: sessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sessionInclude<ExtArgs> | null
  }


  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    username: string | null
    dni: string | null
    birthDate: Date | null
    role: $Enums.Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    username: string | null
    dni: string | null
    birthDate: Date | null
    role: $Enums.Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    createdAt: number
    updatedAt: number
    username: number
    dni: number
    birthDate: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    username?: true
    dni?: true
    birthDate?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    username?: true
    dni?: true
    birthDate?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    username?: true
    dni?: true
    birthDate?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image: string | null
    createdAt: Date
    updatedAt: Date
    username: string | null
    dni: string | null
    birthDate: Date | null
    role: $Enums.Role
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    username?: boolean
    dni?: boolean
    birthDate?: boolean
    role?: boolean
    tickets?: boolean | user$ticketsArgs<ExtArgs>
    transferredTickets?: boolean | user$transferredTicketsArgs<ExtArgs>
    participants?: boolean | user$participantsArgs<ExtArgs>
    rrppAssignments?: boolean | user$rrppAssignmentsArgs<ExtArgs>
    account?: boolean | user$accountArgs<ExtArgs>
    session?: boolean | user$sessionArgs<ExtArgs>
    logs?: boolean | user$logsArgs<ExtArgs>
    sentMessages?: boolean | user$sentMessagesArgs<ExtArgs>
    receivedMessages?: boolean | user$receivedMessagesArgs<ExtArgs>
    payments?: boolean | user$paymentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    username?: boolean
    dni?: boolean
    birthDate?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type userSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    username?: boolean
    dni?: boolean
    birthDate?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    username?: boolean
    dni?: boolean
    birthDate?: boolean
    role?: boolean
  }

  export type userOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "createdAt" | "updatedAt" | "username" | "dni" | "birthDate" | "role", ExtArgs["result"]["user"]>
  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | user$ticketsArgs<ExtArgs>
    transferredTickets?: boolean | user$transferredTicketsArgs<ExtArgs>
    participants?: boolean | user$participantsArgs<ExtArgs>
    rrppAssignments?: boolean | user$rrppAssignmentsArgs<ExtArgs>
    account?: boolean | user$accountArgs<ExtArgs>
    session?: boolean | user$sessionArgs<ExtArgs>
    logs?: boolean | user$logsArgs<ExtArgs>
    sentMessages?: boolean | user$sentMessagesArgs<ExtArgs>
    receivedMessages?: boolean | user$receivedMessagesArgs<ExtArgs>
    payments?: boolean | user$paymentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type userIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type userIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      tickets: Prisma.$ticketPayload<ExtArgs>[]
      transferredTickets: Prisma.$ticketPayload<ExtArgs>[]
      participants: Prisma.$participantPayload<ExtArgs>[]
      rrppAssignments: Prisma.$rrppAssignmentPayload<ExtArgs>[]
      account: Prisma.$accountPayload<ExtArgs>[]
      session: Prisma.$sessionPayload<ExtArgs>[]
      logs: Prisma.$logPayload<ExtArgs>[]
      sentMessages: Prisma.$messagePayload<ExtArgs>[]
      receivedMessages: Prisma.$messagePayload<ExtArgs>[]
      payments: Prisma.$paymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      emailVerified: boolean
      image: string | null
      createdAt: Date
      updatedAt: Date
      username: string | null
      dni: string | null
      birthDate: Date | null
      role: $Enums.Role
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {userCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends userCreateManyAndReturnArgs>(args?: SelectSubset<T, userCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {userUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends userUpdateManyAndReturnArgs>(args: SelectSubset<T, userUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends user$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, user$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transferredTickets<T extends user$transferredTicketsArgs<ExtArgs> = {}>(args?: Subset<T, user$transferredTicketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    participants<T extends user$participantsArgs<ExtArgs> = {}>(args?: Subset<T, user$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$participantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rrppAssignments<T extends user$rrppAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, user$rrppAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rrppAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    account<T extends user$accountArgs<ExtArgs> = {}>(args?: Subset<T, user$accountArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    session<T extends user$sessionArgs<ExtArgs> = {}>(args?: Subset<T, user$sessionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends user$logsArgs<ExtArgs> = {}>(args?: Subset<T, user$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sentMessages<T extends user$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, user$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedMessages<T extends user$receivedMessagesArgs<ExtArgs> = {}>(args?: Subset<T, user$receivedMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends user$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, user$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'String'>
    readonly name: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly emailVerified: FieldRef<"user", 'Boolean'>
    readonly image: FieldRef<"user", 'String'>
    readonly createdAt: FieldRef<"user", 'DateTime'>
    readonly updatedAt: FieldRef<"user", 'DateTime'>
    readonly username: FieldRef<"user", 'String'>
    readonly dni: FieldRef<"user", 'String'>
    readonly birthDate: FieldRef<"user", 'DateTime'>
    readonly role: FieldRef<"user", 'Role'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user createManyAndReturn
   */
  export type userCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * user updateManyAndReturn
   */
  export type userUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * user.tickets
   */
  export type user$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    where?: ticketWhereInput
    orderBy?: ticketOrderByWithRelationInput | ticketOrderByWithRelationInput[]
    cursor?: ticketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * user.transferredTickets
   */
  export type user$transferredTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    where?: ticketWhereInput
    orderBy?: ticketOrderByWithRelationInput | ticketOrderByWithRelationInput[]
    cursor?: ticketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * user.participants
   */
  export type user$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participant
     */
    select?: participantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the participant
     */
    omit?: participantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: participantInclude<ExtArgs> | null
    where?: participantWhereInput
    orderBy?: participantOrderByWithRelationInput | participantOrderByWithRelationInput[]
    cursor?: participantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParticipantScalarFieldEnum | ParticipantScalarFieldEnum[]
  }

  /**
   * user.rrppAssignments
   */
  export type user$rrppAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rrppAssignment
     */
    select?: rrppAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rrppAssignment
     */
    omit?: rrppAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rrppAssignmentInclude<ExtArgs> | null
    where?: rrppAssignmentWhereInput
    orderBy?: rrppAssignmentOrderByWithRelationInput | rrppAssignmentOrderByWithRelationInput[]
    cursor?: rrppAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RrppAssignmentScalarFieldEnum | RrppAssignmentScalarFieldEnum[]
  }

  /**
   * user.account
   */
  export type user$accountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the account
     */
    omit?: accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accountInclude<ExtArgs> | null
    where?: accountWhereInput
    orderBy?: accountOrderByWithRelationInput | accountOrderByWithRelationInput[]
    cursor?: accountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * user.session
   */
  export type user$sessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the session
     */
    omit?: sessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sessionInclude<ExtArgs> | null
    where?: sessionWhereInput
    orderBy?: sessionOrderByWithRelationInput | sessionOrderByWithRelationInput[]
    cursor?: sessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * user.logs
   */
  export type user$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the log
     */
    select?: logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the log
     */
    omit?: logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logInclude<ExtArgs> | null
    where?: logWhereInput
    orderBy?: logOrderByWithRelationInput | logOrderByWithRelationInput[]
    cursor?: logWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * user.sentMessages
   */
  export type user$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    where?: messageWhereInput
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    cursor?: messageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * user.receivedMessages
   */
  export type user$receivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    where?: messageWhereInput
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    cursor?: messageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * user.payments
   */
  export type user$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    where?: paymentWhereInput
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    cursor?: paymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model verification
   */

  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationMinAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationMaxAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationCountAggregateOutputType = {
    id: number
    identifier: number
    value: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VerificationMinAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationMaxAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationCountAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which verification to aggregate.
     */
    where?: verificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verifications to fetch.
     */
    orderBy?: verificationOrderByWithRelationInput | verificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: verificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type verificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: verificationWhereInput
    orderBy?: verificationOrderByWithAggregationInput | verificationOrderByWithAggregationInput[]
    by: VerificationScalarFieldEnum[] | VerificationScalarFieldEnum
    having?: verificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }

  export type VerificationGroupByOutputType = {
    id: string
    identifier: string
    value: string
    expiresAt: Date
    createdAt: Date | null
    updatedAt: Date | null
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends verificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type verificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type verificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type verificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type verificationSelectScalar = {
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type verificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "identifier" | "value" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["verification"]>

  export type $verificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "verification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      identifier: string
      value: string
      expiresAt: Date
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["verification"]>
    composites: {}
  }

  type verificationGetPayload<S extends boolean | null | undefined | verificationDefaultArgs> = $Result.GetResult<Prisma.$verificationPayload, S>

  type verificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<verificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationCountAggregateInputType | true
    }

  export interface verificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['verification'], meta: { name: 'verification' } }
    /**
     * Find zero or one Verification that matches the filter.
     * @param {verificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends verificationFindUniqueArgs>(args: SelectSubset<T, verificationFindUniqueArgs<ExtArgs>>): Prisma__verificationClient<$Result.GetResult<Prisma.$verificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Verification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {verificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends verificationFindUniqueOrThrowArgs>(args: SelectSubset<T, verificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__verificationClient<$Result.GetResult<Prisma.$verificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends verificationFindFirstArgs>(args?: SelectSubset<T, verificationFindFirstArgs<ExtArgs>>): Prisma__verificationClient<$Result.GetResult<Prisma.$verificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verificationFindFirstOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends verificationFindFirstOrThrowArgs>(args?: SelectSubset<T, verificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__verificationClient<$Result.GetResult<Prisma.$verificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationWithIdOnly = await prisma.verification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends verificationFindManyArgs>(args?: SelectSubset<T, verificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$verificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Verification.
     * @param {verificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
     */
    create<T extends verificationCreateArgs>(args: SelectSubset<T, verificationCreateArgs<ExtArgs>>): Prisma__verificationClient<$Result.GetResult<Prisma.$verificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Verifications.
     * @param {verificationCreateManyArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends verificationCreateManyArgs>(args?: SelectSubset<T, verificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Verifications and returns the data saved in the database.
     * @param {verificationCreateManyAndReturnArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends verificationCreateManyAndReturnArgs>(args?: SelectSubset<T, verificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$verificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Verification.
     * @param {verificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
     */
    delete<T extends verificationDeleteArgs>(args: SelectSubset<T, verificationDeleteArgs<ExtArgs>>): Prisma__verificationClient<$Result.GetResult<Prisma.$verificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Verification.
     * @param {verificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends verificationUpdateArgs>(args: SelectSubset<T, verificationUpdateArgs<ExtArgs>>): Prisma__verificationClient<$Result.GetResult<Prisma.$verificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Verifications.
     * @param {verificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends verificationDeleteManyArgs>(args?: SelectSubset<T, verificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends verificationUpdateManyArgs>(args: SelectSubset<T, verificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications and returns the data updated in the database.
     * @param {verificationUpdateManyAndReturnArgs} args - Arguments to update many Verifications.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends verificationUpdateManyAndReturnArgs>(args: SelectSubset<T, verificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$verificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Verification.
     * @param {verificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
     */
    upsert<T extends verificationUpsertArgs>(args: SelectSubset<T, verificationUpsertArgs<ExtArgs>>): Prisma__verificationClient<$Result.GetResult<Prisma.$verificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends verificationCountArgs>(
      args?: Subset<T, verificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends verificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: verificationGroupByArgs['orderBy'] }
        : { orderBy?: verificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, verificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the verification model
   */
  readonly fields: verificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__verificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the verification model
   */
  interface verificationFieldRefs {
    readonly id: FieldRef<"verification", 'String'>
    readonly identifier: FieldRef<"verification", 'String'>
    readonly value: FieldRef<"verification", 'String'>
    readonly expiresAt: FieldRef<"verification", 'DateTime'>
    readonly createdAt: FieldRef<"verification", 'DateTime'>
    readonly updatedAt: FieldRef<"verification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * verification findUnique
   */
  export type verificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification
     */
    select?: verificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification
     */
    omit?: verificationOmit<ExtArgs> | null
    /**
     * Filter, which verification to fetch.
     */
    where: verificationWhereUniqueInput
  }

  /**
   * verification findUniqueOrThrow
   */
  export type verificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification
     */
    select?: verificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification
     */
    omit?: verificationOmit<ExtArgs> | null
    /**
     * Filter, which verification to fetch.
     */
    where: verificationWhereUniqueInput
  }

  /**
   * verification findFirst
   */
  export type verificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification
     */
    select?: verificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification
     */
    omit?: verificationOmit<ExtArgs> | null
    /**
     * Filter, which verification to fetch.
     */
    where?: verificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verifications to fetch.
     */
    orderBy?: verificationOrderByWithRelationInput | verificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for verifications.
     */
    cursor?: verificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * verification findFirstOrThrow
   */
  export type verificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification
     */
    select?: verificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification
     */
    omit?: verificationOmit<ExtArgs> | null
    /**
     * Filter, which verification to fetch.
     */
    where?: verificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verifications to fetch.
     */
    orderBy?: verificationOrderByWithRelationInput | verificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for verifications.
     */
    cursor?: verificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * verification findMany
   */
  export type verificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification
     */
    select?: verificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification
     */
    omit?: verificationOmit<ExtArgs> | null
    /**
     * Filter, which verifications to fetch.
     */
    where?: verificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verifications to fetch.
     */
    orderBy?: verificationOrderByWithRelationInput | verificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing verifications.
     */
    cursor?: verificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verifications.
     */
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * verification create
   */
  export type verificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification
     */
    select?: verificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification
     */
    omit?: verificationOmit<ExtArgs> | null
    /**
     * The data needed to create a verification.
     */
    data: XOR<verificationCreateInput, verificationUncheckedCreateInput>
  }

  /**
   * verification createMany
   */
  export type verificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many verifications.
     */
    data: verificationCreateManyInput | verificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * verification createManyAndReturn
   */
  export type verificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification
     */
    select?: verificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the verification
     */
    omit?: verificationOmit<ExtArgs> | null
    /**
     * The data used to create many verifications.
     */
    data: verificationCreateManyInput | verificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * verification update
   */
  export type verificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification
     */
    select?: verificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification
     */
    omit?: verificationOmit<ExtArgs> | null
    /**
     * The data needed to update a verification.
     */
    data: XOR<verificationUpdateInput, verificationUncheckedUpdateInput>
    /**
     * Choose, which verification to update.
     */
    where: verificationWhereUniqueInput
  }

  /**
   * verification updateMany
   */
  export type verificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update verifications.
     */
    data: XOR<verificationUpdateManyMutationInput, verificationUncheckedUpdateManyInput>
    /**
     * Filter which verifications to update
     */
    where?: verificationWhereInput
    /**
     * Limit how many verifications to update.
     */
    limit?: number
  }

  /**
   * verification updateManyAndReturn
   */
  export type verificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification
     */
    select?: verificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the verification
     */
    omit?: verificationOmit<ExtArgs> | null
    /**
     * The data used to update verifications.
     */
    data: XOR<verificationUpdateManyMutationInput, verificationUncheckedUpdateManyInput>
    /**
     * Filter which verifications to update
     */
    where?: verificationWhereInput
    /**
     * Limit how many verifications to update.
     */
    limit?: number
  }

  /**
   * verification upsert
   */
  export type verificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification
     */
    select?: verificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification
     */
    omit?: verificationOmit<ExtArgs> | null
    /**
     * The filter to search for the verification to update in case it exists.
     */
    where: verificationWhereUniqueInput
    /**
     * In case the verification found by the `where` argument doesn't exist, create a new verification with this data.
     */
    create: XOR<verificationCreateInput, verificationUncheckedCreateInput>
    /**
     * In case the verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<verificationUpdateInput, verificationUncheckedUpdateInput>
  }

  /**
   * verification delete
   */
  export type verificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification
     */
    select?: verificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification
     */
    omit?: verificationOmit<ExtArgs> | null
    /**
     * Filter which verification to delete.
     */
    where: verificationWhereUniqueInput
  }

  /**
   * verification deleteMany
   */
  export type verificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which verifications to delete
     */
    where?: verificationWhereInput
    /**
     * Limit how many verifications to delete.
     */
    limit?: number
  }

  /**
   * verification without action
   */
  export type verificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification
     */
    select?: verificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification
     */
    omit?: verificationOmit<ExtArgs> | null
  }


  /**
   * Model payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    eventId: number | null
    amount: Decimal | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    eventId: number | null
    amount: Decimal | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    userId: string | null
    eventId: number | null
    status: $Enums.PaymentStatus | null
    amount: Decimal | null
    currency: string | null
    provider: string | null
    externalReference: string | null
    mpPreferenceId: string | null
    mpPaymentId: string | null
    payerEmail: string | null
    payerName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    eventId: number | null
    status: $Enums.PaymentStatus | null
    amount: Decimal | null
    currency: string | null
    provider: string | null
    externalReference: string | null
    mpPreferenceId: string | null
    mpPaymentId: string | null
    payerEmail: string | null
    payerName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    userId: number
    eventId: number
    status: number
    amount: number
    currency: number
    provider: number
    externalReference: number
    mpPreferenceId: number
    mpPaymentId: number
    payerEmail: number
    payerName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    eventId?: true
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    eventId?: true
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    status?: true
    amount?: true
    currency?: true
    provider?: true
    externalReference?: true
    mpPreferenceId?: true
    mpPaymentId?: true
    payerEmail?: true
    payerName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    status?: true
    amount?: true
    currency?: true
    provider?: true
    externalReference?: true
    mpPreferenceId?: true
    mpPaymentId?: true
    payerEmail?: true
    payerName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    status?: true
    amount?: true
    currency?: true
    provider?: true
    externalReference?: true
    mpPreferenceId?: true
    mpPaymentId?: true
    payerEmail?: true
    payerName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment to aggregate.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type paymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentWhereInput
    orderBy?: paymentOrderByWithAggregationInput | paymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: paymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: number
    userId: string
    eventId: number
    status: $Enums.PaymentStatus
    amount: Decimal
    currency: string
    provider: string
    externalReference: string
    mpPreferenceId: string | null
    mpPaymentId: string | null
    payerEmail: string | null
    payerName: string | null
    createdAt: Date
    updatedAt: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends paymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type paymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    status?: boolean
    amount?: boolean
    currency?: boolean
    provider?: boolean
    externalReference?: boolean
    mpPreferenceId?: boolean
    mpPaymentId?: boolean
    payerEmail?: boolean
    payerName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
    tickets?: boolean | payment$ticketsArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type paymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    status?: boolean
    amount?: boolean
    currency?: boolean
    provider?: boolean
    externalReference?: boolean
    mpPreferenceId?: boolean
    mpPaymentId?: boolean
    payerEmail?: boolean
    payerName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type paymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    status?: boolean
    amount?: boolean
    currency?: boolean
    provider?: boolean
    externalReference?: boolean
    mpPreferenceId?: boolean
    mpPaymentId?: boolean
    payerEmail?: boolean
    payerName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type paymentSelectScalar = {
    id?: boolean
    userId?: boolean
    eventId?: boolean
    status?: boolean
    amount?: boolean
    currency?: boolean
    provider?: boolean
    externalReference?: boolean
    mpPreferenceId?: boolean
    mpPaymentId?: boolean
    payerEmail?: boolean
    payerName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type paymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "eventId" | "status" | "amount" | "currency" | "provider" | "externalReference" | "mpPreferenceId" | "mpPaymentId" | "payerEmail" | "payerName" | "createdAt" | "updatedAt", ExtArgs["result"]["payment"]>
  export type paymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
    tickets?: boolean | payment$ticketsArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type paymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }
  export type paymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }

  export type $paymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payment"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      event: Prisma.$eventPayload<ExtArgs>
      tickets: Prisma.$ticketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      eventId: number
      status: $Enums.PaymentStatus
      amount: Prisma.Decimal
      currency: string
      provider: string
      externalReference: string
      mpPreferenceId: string | null
      mpPaymentId: string | null
      payerEmail: string | null
      payerName: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type paymentGetPayload<S extends boolean | null | undefined | paymentDefaultArgs> = $Result.GetResult<Prisma.$paymentPayload, S>

  type paymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<paymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface paymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payment'], meta: { name: 'payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {paymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends paymentFindUniqueArgs>(args: SelectSubset<T, paymentFindUniqueArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {paymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends paymentFindUniqueOrThrowArgs>(args: SelectSubset<T, paymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends paymentFindFirstArgs>(args?: SelectSubset<T, paymentFindFirstArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends paymentFindFirstOrThrowArgs>(args?: SelectSubset<T, paymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends paymentFindManyArgs>(args?: SelectSubset<T, paymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {paymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends paymentCreateArgs>(args: SelectSubset<T, paymentCreateArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {paymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends paymentCreateManyArgs>(args?: SelectSubset<T, paymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {paymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends paymentCreateManyAndReturnArgs>(args?: SelectSubset<T, paymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {paymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends paymentDeleteArgs>(args: SelectSubset<T, paymentDeleteArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {paymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends paymentUpdateArgs>(args: SelectSubset<T, paymentUpdateArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {paymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends paymentDeleteManyArgs>(args?: SelectSubset<T, paymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends paymentUpdateManyArgs>(args: SelectSubset<T, paymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {paymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends paymentUpdateManyAndReturnArgs>(args: SelectSubset<T, paymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {paymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends paymentUpsertArgs>(args: SelectSubset<T, paymentUpsertArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends paymentCountArgs>(
      args?: Subset<T, paymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends paymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: paymentGroupByArgs['orderBy'] }
        : { orderBy?: paymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, paymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payment model
   */
  readonly fields: paymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__paymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends eventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, eventDefaultArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tickets<T extends payment$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, payment$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the payment model
   */
  interface paymentFieldRefs {
    readonly id: FieldRef<"payment", 'Int'>
    readonly userId: FieldRef<"payment", 'String'>
    readonly eventId: FieldRef<"payment", 'Int'>
    readonly status: FieldRef<"payment", 'PaymentStatus'>
    readonly amount: FieldRef<"payment", 'Decimal'>
    readonly currency: FieldRef<"payment", 'String'>
    readonly provider: FieldRef<"payment", 'String'>
    readonly externalReference: FieldRef<"payment", 'String'>
    readonly mpPreferenceId: FieldRef<"payment", 'String'>
    readonly mpPaymentId: FieldRef<"payment", 'String'>
    readonly payerEmail: FieldRef<"payment", 'String'>
    readonly payerName: FieldRef<"payment", 'String'>
    readonly createdAt: FieldRef<"payment", 'DateTime'>
    readonly updatedAt: FieldRef<"payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * payment findUnique
   */
  export type paymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment findUniqueOrThrow
   */
  export type paymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment findFirst
   */
  export type paymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment findFirstOrThrow
   */
  export type paymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment findMany
   */
  export type paymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment create
   */
  export type paymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * The data needed to create a payment.
     */
    data: XOR<paymentCreateInput, paymentUncheckedCreateInput>
  }

  /**
   * payment createMany
   */
  export type paymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payments.
     */
    data: paymentCreateManyInput | paymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payment createManyAndReturn
   */
  export type paymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * The data used to create many payments.
     */
    data: paymentCreateManyInput | paymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * payment update
   */
  export type paymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * The data needed to update a payment.
     */
    data: XOR<paymentUpdateInput, paymentUncheckedUpdateInput>
    /**
     * Choose, which payment to update.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment updateMany
   */
  export type paymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payments.
     */
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyInput>
    /**
     * Filter which payments to update
     */
    where?: paymentWhereInput
    /**
     * Limit how many payments to update.
     */
    limit?: number
  }

  /**
   * payment updateManyAndReturn
   */
  export type paymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * The data used to update payments.
     */
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyInput>
    /**
     * Filter which payments to update
     */
    where?: paymentWhereInput
    /**
     * Limit how many payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * payment upsert
   */
  export type paymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * The filter to search for the payment to update in case it exists.
     */
    where: paymentWhereUniqueInput
    /**
     * In case the payment found by the `where` argument doesn't exist, create a new payment with this data.
     */
    create: XOR<paymentCreateInput, paymentUncheckedCreateInput>
    /**
     * In case the payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<paymentUpdateInput, paymentUncheckedUpdateInput>
  }

  /**
   * payment delete
   */
  export type paymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter which payment to delete.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment deleteMany
   */
  export type paymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payments to delete
     */
    where?: paymentWhereInput
    /**
     * Limit how many payments to delete.
     */
    limit?: number
  }

  /**
   * payment.tickets
   */
  export type payment$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    where?: ticketWhereInput
    orderBy?: ticketOrderByWithRelationInput | ticketOrderByWithRelationInput[]
    cursor?: ticketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * payment without action
   */
  export type paymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
  }


  /**
   * Model event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    id: number | null
    producerId: number | null
    capacityTotal: number | null
  }

  export type EventSumAggregateOutputType = {
    id: number | null
    producerId: number | null
    capacityTotal: number | null
  }

  export type EventMinAggregateOutputType = {
    id: number | null
    name: string | null
    date: Date | null
    location: string | null
    description: string | null
    bannerUrl: string | null
    status: $Enums.EventStatus | null
    producerId: number | null
    capacityTotal: number | null
    isRsvpAllowed: boolean | null
    eventGenre: string | null
    showRemainingTickets: boolean | null
    createdAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: number | null
    name: string | null
    date: Date | null
    location: string | null
    description: string | null
    bannerUrl: string | null
    status: $Enums.EventStatus | null
    producerId: number | null
    capacityTotal: number | null
    isRsvpAllowed: boolean | null
    eventGenre: string | null
    showRemainingTickets: boolean | null
    createdAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    name: number
    date: number
    location: number
    description: number
    bannerUrl: number
    status: number
    producerId: number
    capacityTotal: number
    isRsvpAllowed: number
    eventGenre: number
    showRemainingTickets: number
    createdAt: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    id?: true
    producerId?: true
    capacityTotal?: true
  }

  export type EventSumAggregateInputType = {
    id?: true
    producerId?: true
    capacityTotal?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    name?: true
    date?: true
    location?: true
    description?: true
    bannerUrl?: true
    status?: true
    producerId?: true
    capacityTotal?: true
    isRsvpAllowed?: true
    eventGenre?: true
    showRemainingTickets?: true
    createdAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    name?: true
    date?: true
    location?: true
    description?: true
    bannerUrl?: true
    status?: true
    producerId?: true
    capacityTotal?: true
    isRsvpAllowed?: true
    eventGenre?: true
    showRemainingTickets?: true
    createdAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    name?: true
    date?: true
    location?: true
    description?: true
    bannerUrl?: true
    status?: true
    producerId?: true
    capacityTotal?: true
    isRsvpAllowed?: true
    eventGenre?: true
    showRemainingTickets?: true
    createdAt?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which event to aggregate.
     */
    where?: eventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of events to fetch.
     */
    orderBy?: eventOrderByWithRelationInput | eventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: eventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type eventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: eventWhereInput
    orderBy?: eventOrderByWithAggregationInput | eventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: eventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: number
    name: string
    date: Date
    location: string
    description: string | null
    bannerUrl: string | null
    status: $Enums.EventStatus
    producerId: number
    capacityTotal: number | null
    isRsvpAllowed: boolean
    eventGenre: string | null
    showRemainingTickets: boolean
    createdAt: Date
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends eventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type eventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    location?: boolean
    description?: boolean
    bannerUrl?: boolean
    status?: boolean
    producerId?: boolean
    capacityTotal?: boolean
    isRsvpAllowed?: boolean
    eventGenre?: boolean
    showRemainingTickets?: boolean
    createdAt?: boolean
    ticketTypes?: boolean | event$ticketTypesArgs<ExtArgs>
    eventArtists?: boolean | event$eventArtistsArgs<ExtArgs>
    tickets?: boolean | event$ticketsArgs<ExtArgs>
    participants?: boolean | event$participantsArgs<ExtArgs>
    rrppAssignments?: boolean | event$rrppAssignmentsArgs<ExtArgs>
    payments?: boolean | event$paymentsArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type eventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    location?: boolean
    description?: boolean
    bannerUrl?: boolean
    status?: boolean
    producerId?: boolean
    capacityTotal?: boolean
    isRsvpAllowed?: boolean
    eventGenre?: boolean
    showRemainingTickets?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["event"]>

  export type eventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    location?: boolean
    description?: boolean
    bannerUrl?: boolean
    status?: boolean
    producerId?: boolean
    capacityTotal?: boolean
    isRsvpAllowed?: boolean
    eventGenre?: boolean
    showRemainingTickets?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["event"]>

  export type eventSelectScalar = {
    id?: boolean
    name?: boolean
    date?: boolean
    location?: boolean
    description?: boolean
    bannerUrl?: boolean
    status?: boolean
    producerId?: boolean
    capacityTotal?: boolean
    isRsvpAllowed?: boolean
    eventGenre?: boolean
    showRemainingTickets?: boolean
    createdAt?: boolean
  }

  export type eventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "date" | "location" | "description" | "bannerUrl" | "status" | "producerId" | "capacityTotal" | "isRsvpAllowed" | "eventGenre" | "showRemainingTickets" | "createdAt", ExtArgs["result"]["event"]>
  export type eventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticketTypes?: boolean | event$ticketTypesArgs<ExtArgs>
    eventArtists?: boolean | event$eventArtistsArgs<ExtArgs>
    tickets?: boolean | event$ticketsArgs<ExtArgs>
    participants?: boolean | event$participantsArgs<ExtArgs>
    rrppAssignments?: boolean | event$rrppAssignmentsArgs<ExtArgs>
    payments?: boolean | event$paymentsArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type eventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type eventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $eventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "event"
    objects: {
      ticketTypes: Prisma.$ticketTypePayload<ExtArgs>[]
      eventArtists: Prisma.$eventArtistPayload<ExtArgs>[]
      tickets: Prisma.$ticketPayload<ExtArgs>[]
      participants: Prisma.$participantPayload<ExtArgs>[]
      rrppAssignments: Prisma.$rrppAssignmentPayload<ExtArgs>[]
      payments: Prisma.$paymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      date: Date
      location: string
      description: string | null
      bannerUrl: string | null
      status: $Enums.EventStatus
      producerId: number
      capacityTotal: number | null
      isRsvpAllowed: boolean
      eventGenre: string | null
      showRemainingTickets: boolean
      createdAt: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type eventGetPayload<S extends boolean | null | undefined | eventDefaultArgs> = $Result.GetResult<Prisma.$eventPayload, S>

  type eventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<eventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface eventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['event'], meta: { name: 'event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {eventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends eventFindUniqueArgs>(args: SelectSubset<T, eventFindUniqueArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {eventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends eventFindUniqueOrThrowArgs>(args: SelectSubset<T, eventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends eventFindFirstArgs>(args?: SelectSubset<T, eventFindFirstArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends eventFindFirstOrThrowArgs>(args?: SelectSubset<T, eventFindFirstOrThrowArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends eventFindManyArgs>(args?: SelectSubset<T, eventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event.
     * @param {eventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends eventCreateArgs>(args: SelectSubset<T, eventCreateArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Events.
     * @param {eventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends eventCreateManyArgs>(args?: SelectSubset<T, eventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {eventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends eventCreateManyAndReturnArgs>(args?: SelectSubset<T, eventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Event.
     * @param {eventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends eventDeleteArgs>(args: SelectSubset<T, eventDeleteArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event.
     * @param {eventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends eventUpdateArgs>(args: SelectSubset<T, eventUpdateArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Events.
     * @param {eventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends eventDeleteManyArgs>(args?: SelectSubset<T, eventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends eventUpdateManyArgs>(args: SelectSubset<T, eventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events and returns the data updated in the database.
     * @param {eventUpdateManyAndReturnArgs} args - Arguments to update many Events.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends eventUpdateManyAndReturnArgs>(args: SelectSubset<T, eventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Event.
     * @param {eventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends eventUpsertArgs>(args: SelectSubset<T, eventUpsertArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends eventCountArgs>(
      args?: Subset<T, eventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends eventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: eventGroupByArgs['orderBy'] }
        : { orderBy?: eventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, eventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the event model
   */
  readonly fields: eventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__eventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticketTypes<T extends event$ticketTypesArgs<ExtArgs> = {}>(args?: Subset<T, event$ticketTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    eventArtists<T extends event$eventArtistsArgs<ExtArgs> = {}>(args?: Subset<T, event$eventArtistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$eventArtistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tickets<T extends event$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, event$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    participants<T extends event$participantsArgs<ExtArgs> = {}>(args?: Subset<T, event$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$participantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rrppAssignments<T extends event$rrppAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, event$rrppAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rrppAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends event$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, event$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the event model
   */
  interface eventFieldRefs {
    readonly id: FieldRef<"event", 'Int'>
    readonly name: FieldRef<"event", 'String'>
    readonly date: FieldRef<"event", 'DateTime'>
    readonly location: FieldRef<"event", 'String'>
    readonly description: FieldRef<"event", 'String'>
    readonly bannerUrl: FieldRef<"event", 'String'>
    readonly status: FieldRef<"event", 'EventStatus'>
    readonly producerId: FieldRef<"event", 'Int'>
    readonly capacityTotal: FieldRef<"event", 'Int'>
    readonly isRsvpAllowed: FieldRef<"event", 'Boolean'>
    readonly eventGenre: FieldRef<"event", 'String'>
    readonly showRemainingTickets: FieldRef<"event", 'Boolean'>
    readonly createdAt: FieldRef<"event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * event findUnique
   */
  export type eventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event
     */
    omit?: eventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * Filter, which event to fetch.
     */
    where: eventWhereUniqueInput
  }

  /**
   * event findUniqueOrThrow
   */
  export type eventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event
     */
    omit?: eventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * Filter, which event to fetch.
     */
    where: eventWhereUniqueInput
  }

  /**
   * event findFirst
   */
  export type eventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event
     */
    omit?: eventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * Filter, which event to fetch.
     */
    where?: eventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of events to fetch.
     */
    orderBy?: eventOrderByWithRelationInput | eventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for events.
     */
    cursor?: eventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * event findFirstOrThrow
   */
  export type eventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event
     */
    omit?: eventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * Filter, which event to fetch.
     */
    where?: eventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of events to fetch.
     */
    orderBy?: eventOrderByWithRelationInput | eventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for events.
     */
    cursor?: eventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * event findMany
   */
  export type eventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event
     */
    omit?: eventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * Filter, which events to fetch.
     */
    where?: eventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of events to fetch.
     */
    orderBy?: eventOrderByWithRelationInput | eventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing events.
     */
    cursor?: eventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * event create
   */
  export type eventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event
     */
    omit?: eventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * The data needed to create a event.
     */
    data: XOR<eventCreateInput, eventUncheckedCreateInput>
  }

  /**
   * event createMany
   */
  export type eventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many events.
     */
    data: eventCreateManyInput | eventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * event createManyAndReturn
   */
  export type eventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the event
     */
    omit?: eventOmit<ExtArgs> | null
    /**
     * The data used to create many events.
     */
    data: eventCreateManyInput | eventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * event update
   */
  export type eventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event
     */
    omit?: eventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * The data needed to update a event.
     */
    data: XOR<eventUpdateInput, eventUncheckedUpdateInput>
    /**
     * Choose, which event to update.
     */
    where: eventWhereUniqueInput
  }

  /**
   * event updateMany
   */
  export type eventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update events.
     */
    data: XOR<eventUpdateManyMutationInput, eventUncheckedUpdateManyInput>
    /**
     * Filter which events to update
     */
    where?: eventWhereInput
    /**
     * Limit how many events to update.
     */
    limit?: number
  }

  /**
   * event updateManyAndReturn
   */
  export type eventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the event
     */
    omit?: eventOmit<ExtArgs> | null
    /**
     * The data used to update events.
     */
    data: XOR<eventUpdateManyMutationInput, eventUncheckedUpdateManyInput>
    /**
     * Filter which events to update
     */
    where?: eventWhereInput
    /**
     * Limit how many events to update.
     */
    limit?: number
  }

  /**
   * event upsert
   */
  export type eventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event
     */
    omit?: eventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * The filter to search for the event to update in case it exists.
     */
    where: eventWhereUniqueInput
    /**
     * In case the event found by the `where` argument doesn't exist, create a new event with this data.
     */
    create: XOR<eventCreateInput, eventUncheckedCreateInput>
    /**
     * In case the event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<eventUpdateInput, eventUncheckedUpdateInput>
  }

  /**
   * event delete
   */
  export type eventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event
     */
    omit?: eventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * Filter which event to delete.
     */
    where: eventWhereUniqueInput
  }

  /**
   * event deleteMany
   */
  export type eventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which events to delete
     */
    where?: eventWhereInput
    /**
     * Limit how many events to delete.
     */
    limit?: number
  }

  /**
   * event.ticketTypes
   */
  export type event$ticketTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticketType
     */
    select?: ticketTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticketType
     */
    omit?: ticketTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketTypeInclude<ExtArgs> | null
    where?: ticketTypeWhereInput
    orderBy?: ticketTypeOrderByWithRelationInput | ticketTypeOrderByWithRelationInput[]
    cursor?: ticketTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketTypeScalarFieldEnum | TicketTypeScalarFieldEnum[]
  }

  /**
   * event.eventArtists
   */
  export type event$eventArtistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the eventArtist
     */
    select?: eventArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the eventArtist
     */
    omit?: eventArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventArtistInclude<ExtArgs> | null
    where?: eventArtistWhereInput
    orderBy?: eventArtistOrderByWithRelationInput | eventArtistOrderByWithRelationInput[]
    cursor?: eventArtistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventArtistScalarFieldEnum | EventArtistScalarFieldEnum[]
  }

  /**
   * event.tickets
   */
  export type event$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    where?: ticketWhereInput
    orderBy?: ticketOrderByWithRelationInput | ticketOrderByWithRelationInput[]
    cursor?: ticketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * event.participants
   */
  export type event$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participant
     */
    select?: participantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the participant
     */
    omit?: participantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: participantInclude<ExtArgs> | null
    where?: participantWhereInput
    orderBy?: participantOrderByWithRelationInput | participantOrderByWithRelationInput[]
    cursor?: participantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParticipantScalarFieldEnum | ParticipantScalarFieldEnum[]
  }

  /**
   * event.rrppAssignments
   */
  export type event$rrppAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rrppAssignment
     */
    select?: rrppAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rrppAssignment
     */
    omit?: rrppAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rrppAssignmentInclude<ExtArgs> | null
    where?: rrppAssignmentWhereInput
    orderBy?: rrppAssignmentOrderByWithRelationInput | rrppAssignmentOrderByWithRelationInput[]
    cursor?: rrppAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RrppAssignmentScalarFieldEnum | RrppAssignmentScalarFieldEnum[]
  }

  /**
   * event.payments
   */
  export type event$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    where?: paymentWhereInput
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    cursor?: paymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * event without action
   */
  export type eventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event
     */
    omit?: eventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventInclude<ExtArgs> | null
  }


  /**
   * Model artist
   */

  export type AggregateArtist = {
    _count: ArtistCountAggregateOutputType | null
    _avg: ArtistAvgAggregateOutputType | null
    _sum: ArtistSumAggregateOutputType | null
    _min: ArtistMinAggregateOutputType | null
    _max: ArtistMaxAggregateOutputType | null
  }

  export type ArtistAvgAggregateOutputType = {
    id: number | null
  }

  export type ArtistSumAggregateOutputType = {
    id: number | null
  }

  export type ArtistMinAggregateOutputType = {
    id: number | null
    name: string | null
    bio: string | null
    imageUrl: string | null
  }

  export type ArtistMaxAggregateOutputType = {
    id: number | null
    name: string | null
    bio: string | null
    imageUrl: string | null
  }

  export type ArtistCountAggregateOutputType = {
    id: number
    name: number
    bio: number
    imageUrl: number
    socialLinks: number
    _all: number
  }


  export type ArtistAvgAggregateInputType = {
    id?: true
  }

  export type ArtistSumAggregateInputType = {
    id?: true
  }

  export type ArtistMinAggregateInputType = {
    id?: true
    name?: true
    bio?: true
    imageUrl?: true
  }

  export type ArtistMaxAggregateInputType = {
    id?: true
    name?: true
    bio?: true
    imageUrl?: true
  }

  export type ArtistCountAggregateInputType = {
    id?: true
    name?: true
    bio?: true
    imageUrl?: true
    socialLinks?: true
    _all?: true
  }

  export type ArtistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which artist to aggregate.
     */
    where?: artistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artists to fetch.
     */
    orderBy?: artistOrderByWithRelationInput | artistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: artistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned artists
    **/
    _count?: true | ArtistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtistMaxAggregateInputType
  }

  export type GetArtistAggregateType<T extends ArtistAggregateArgs> = {
        [P in keyof T & keyof AggregateArtist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtist[P]>
      : GetScalarType<T[P], AggregateArtist[P]>
  }




  export type artistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: artistWhereInput
    orderBy?: artistOrderByWithAggregationInput | artistOrderByWithAggregationInput[]
    by: ArtistScalarFieldEnum[] | ArtistScalarFieldEnum
    having?: artistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtistCountAggregateInputType | true
    _avg?: ArtistAvgAggregateInputType
    _sum?: ArtistSumAggregateInputType
    _min?: ArtistMinAggregateInputType
    _max?: ArtistMaxAggregateInputType
  }

  export type ArtistGroupByOutputType = {
    id: number
    name: string
    bio: string | null
    imageUrl: string | null
    socialLinks: JsonValue | null
    _count: ArtistCountAggregateOutputType | null
    _avg: ArtistAvgAggregateOutputType | null
    _sum: ArtistSumAggregateOutputType | null
    _min: ArtistMinAggregateOutputType | null
    _max: ArtistMaxAggregateOutputType | null
  }

  type GetArtistGroupByPayload<T extends artistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtistGroupByOutputType[P]>
            : GetScalarType<T[P], ArtistGroupByOutputType[P]>
        }
      >
    >


  export type artistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    bio?: boolean
    imageUrl?: boolean
    socialLinks?: boolean
    eventArtists?: boolean | artist$eventArtistsArgs<ExtArgs>
    _count?: boolean | ArtistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artist"]>

  export type artistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    bio?: boolean
    imageUrl?: boolean
    socialLinks?: boolean
  }, ExtArgs["result"]["artist"]>

  export type artistSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    bio?: boolean
    imageUrl?: boolean
    socialLinks?: boolean
  }, ExtArgs["result"]["artist"]>

  export type artistSelectScalar = {
    id?: boolean
    name?: boolean
    bio?: boolean
    imageUrl?: boolean
    socialLinks?: boolean
  }

  export type artistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "bio" | "imageUrl" | "socialLinks", ExtArgs["result"]["artist"]>
  export type artistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eventArtists?: boolean | artist$eventArtistsArgs<ExtArgs>
    _count?: boolean | ArtistCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type artistIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type artistIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $artistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "artist"
    objects: {
      eventArtists: Prisma.$eventArtistPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      bio: string | null
      imageUrl: string | null
      socialLinks: Prisma.JsonValue | null
    }, ExtArgs["result"]["artist"]>
    composites: {}
  }

  type artistGetPayload<S extends boolean | null | undefined | artistDefaultArgs> = $Result.GetResult<Prisma.$artistPayload, S>

  type artistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<artistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArtistCountAggregateInputType | true
    }

  export interface artistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['artist'], meta: { name: 'artist' } }
    /**
     * Find zero or one Artist that matches the filter.
     * @param {artistFindUniqueArgs} args - Arguments to find a Artist
     * @example
     * // Get one Artist
     * const artist = await prisma.artist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends artistFindUniqueArgs>(args: SelectSubset<T, artistFindUniqueArgs<ExtArgs>>): Prisma__artistClient<$Result.GetResult<Prisma.$artistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Artist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {artistFindUniqueOrThrowArgs} args - Arguments to find a Artist
     * @example
     * // Get one Artist
     * const artist = await prisma.artist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends artistFindUniqueOrThrowArgs>(args: SelectSubset<T, artistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__artistClient<$Result.GetResult<Prisma.$artistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Artist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artistFindFirstArgs} args - Arguments to find a Artist
     * @example
     * // Get one Artist
     * const artist = await prisma.artist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends artistFindFirstArgs>(args?: SelectSubset<T, artistFindFirstArgs<ExtArgs>>): Prisma__artistClient<$Result.GetResult<Prisma.$artistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Artist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artistFindFirstOrThrowArgs} args - Arguments to find a Artist
     * @example
     * // Get one Artist
     * const artist = await prisma.artist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends artistFindFirstOrThrowArgs>(args?: SelectSubset<T, artistFindFirstOrThrowArgs<ExtArgs>>): Prisma__artistClient<$Result.GetResult<Prisma.$artistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Artists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Artists
     * const artists = await prisma.artist.findMany()
     * 
     * // Get first 10 Artists
     * const artists = await prisma.artist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artistWithIdOnly = await prisma.artist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends artistFindManyArgs>(args?: SelectSubset<T, artistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$artistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Artist.
     * @param {artistCreateArgs} args - Arguments to create a Artist.
     * @example
     * // Create one Artist
     * const Artist = await prisma.artist.create({
     *   data: {
     *     // ... data to create a Artist
     *   }
     * })
     * 
     */
    create<T extends artistCreateArgs>(args: SelectSubset<T, artistCreateArgs<ExtArgs>>): Prisma__artistClient<$Result.GetResult<Prisma.$artistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Artists.
     * @param {artistCreateManyArgs} args - Arguments to create many Artists.
     * @example
     * // Create many Artists
     * const artist = await prisma.artist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends artistCreateManyArgs>(args?: SelectSubset<T, artistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Artists and returns the data saved in the database.
     * @param {artistCreateManyAndReturnArgs} args - Arguments to create many Artists.
     * @example
     * // Create many Artists
     * const artist = await prisma.artist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Artists and only return the `id`
     * const artistWithIdOnly = await prisma.artist.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends artistCreateManyAndReturnArgs>(args?: SelectSubset<T, artistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$artistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Artist.
     * @param {artistDeleteArgs} args - Arguments to delete one Artist.
     * @example
     * // Delete one Artist
     * const Artist = await prisma.artist.delete({
     *   where: {
     *     // ... filter to delete one Artist
     *   }
     * })
     * 
     */
    delete<T extends artistDeleteArgs>(args: SelectSubset<T, artistDeleteArgs<ExtArgs>>): Prisma__artistClient<$Result.GetResult<Prisma.$artistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Artist.
     * @param {artistUpdateArgs} args - Arguments to update one Artist.
     * @example
     * // Update one Artist
     * const artist = await prisma.artist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends artistUpdateArgs>(args: SelectSubset<T, artistUpdateArgs<ExtArgs>>): Prisma__artistClient<$Result.GetResult<Prisma.$artistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Artists.
     * @param {artistDeleteManyArgs} args - Arguments to filter Artists to delete.
     * @example
     * // Delete a few Artists
     * const { count } = await prisma.artist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends artistDeleteManyArgs>(args?: SelectSubset<T, artistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Artists
     * const artist = await prisma.artist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends artistUpdateManyArgs>(args: SelectSubset<T, artistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artists and returns the data updated in the database.
     * @param {artistUpdateManyAndReturnArgs} args - Arguments to update many Artists.
     * @example
     * // Update many Artists
     * const artist = await prisma.artist.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Artists and only return the `id`
     * const artistWithIdOnly = await prisma.artist.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends artistUpdateManyAndReturnArgs>(args: SelectSubset<T, artistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$artistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Artist.
     * @param {artistUpsertArgs} args - Arguments to update or create a Artist.
     * @example
     * // Update or create a Artist
     * const artist = await prisma.artist.upsert({
     *   create: {
     *     // ... data to create a Artist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Artist we want to update
     *   }
     * })
     */
    upsert<T extends artistUpsertArgs>(args: SelectSubset<T, artistUpsertArgs<ExtArgs>>): Prisma__artistClient<$Result.GetResult<Prisma.$artistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Artists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artistCountArgs} args - Arguments to filter Artists to count.
     * @example
     * // Count the number of Artists
     * const count = await prisma.artist.count({
     *   where: {
     *     // ... the filter for the Artists we want to count
     *   }
     * })
    **/
    count<T extends artistCountArgs>(
      args?: Subset<T, artistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Artist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtistAggregateArgs>(args: Subset<T, ArtistAggregateArgs>): Prisma.PrismaPromise<GetArtistAggregateType<T>>

    /**
     * Group by Artist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends artistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: artistGroupByArgs['orderBy'] }
        : { orderBy?: artistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, artistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the artist model
   */
  readonly fields: artistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for artist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__artistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    eventArtists<T extends artist$eventArtistsArgs<ExtArgs> = {}>(args?: Subset<T, artist$eventArtistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$eventArtistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the artist model
   */
  interface artistFieldRefs {
    readonly id: FieldRef<"artist", 'Int'>
    readonly name: FieldRef<"artist", 'String'>
    readonly bio: FieldRef<"artist", 'String'>
    readonly imageUrl: FieldRef<"artist", 'String'>
    readonly socialLinks: FieldRef<"artist", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * artist findUnique
   */
  export type artistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artist
     */
    select?: artistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artist
     */
    omit?: artistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistInclude<ExtArgs> | null
    /**
     * Filter, which artist to fetch.
     */
    where: artistWhereUniqueInput
  }

  /**
   * artist findUniqueOrThrow
   */
  export type artistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artist
     */
    select?: artistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artist
     */
    omit?: artistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistInclude<ExtArgs> | null
    /**
     * Filter, which artist to fetch.
     */
    where: artistWhereUniqueInput
  }

  /**
   * artist findFirst
   */
  export type artistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artist
     */
    select?: artistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artist
     */
    omit?: artistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistInclude<ExtArgs> | null
    /**
     * Filter, which artist to fetch.
     */
    where?: artistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artists to fetch.
     */
    orderBy?: artistOrderByWithRelationInput | artistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artists.
     */
    cursor?: artistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artists.
     */
    distinct?: ArtistScalarFieldEnum | ArtistScalarFieldEnum[]
  }

  /**
   * artist findFirstOrThrow
   */
  export type artistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artist
     */
    select?: artistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artist
     */
    omit?: artistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistInclude<ExtArgs> | null
    /**
     * Filter, which artist to fetch.
     */
    where?: artistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artists to fetch.
     */
    orderBy?: artistOrderByWithRelationInput | artistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artists.
     */
    cursor?: artistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artists.
     */
    distinct?: ArtistScalarFieldEnum | ArtistScalarFieldEnum[]
  }

  /**
   * artist findMany
   */
  export type artistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artist
     */
    select?: artistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artist
     */
    omit?: artistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistInclude<ExtArgs> | null
    /**
     * Filter, which artists to fetch.
     */
    where?: artistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artists to fetch.
     */
    orderBy?: artistOrderByWithRelationInput | artistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing artists.
     */
    cursor?: artistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artists.
     */
    skip?: number
    distinct?: ArtistScalarFieldEnum | ArtistScalarFieldEnum[]
  }

  /**
   * artist create
   */
  export type artistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artist
     */
    select?: artistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artist
     */
    omit?: artistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistInclude<ExtArgs> | null
    /**
     * The data needed to create a artist.
     */
    data: XOR<artistCreateInput, artistUncheckedCreateInput>
  }

  /**
   * artist createMany
   */
  export type artistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many artists.
     */
    data: artistCreateManyInput | artistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * artist createManyAndReturn
   */
  export type artistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artist
     */
    select?: artistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the artist
     */
    omit?: artistOmit<ExtArgs> | null
    /**
     * The data used to create many artists.
     */
    data: artistCreateManyInput | artistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * artist update
   */
  export type artistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artist
     */
    select?: artistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artist
     */
    omit?: artistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistInclude<ExtArgs> | null
    /**
     * The data needed to update a artist.
     */
    data: XOR<artistUpdateInput, artistUncheckedUpdateInput>
    /**
     * Choose, which artist to update.
     */
    where: artistWhereUniqueInput
  }

  /**
   * artist updateMany
   */
  export type artistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update artists.
     */
    data: XOR<artistUpdateManyMutationInput, artistUncheckedUpdateManyInput>
    /**
     * Filter which artists to update
     */
    where?: artistWhereInput
    /**
     * Limit how many artists to update.
     */
    limit?: number
  }

  /**
   * artist updateManyAndReturn
   */
  export type artistUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artist
     */
    select?: artistSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the artist
     */
    omit?: artistOmit<ExtArgs> | null
    /**
     * The data used to update artists.
     */
    data: XOR<artistUpdateManyMutationInput, artistUncheckedUpdateManyInput>
    /**
     * Filter which artists to update
     */
    where?: artistWhereInput
    /**
     * Limit how many artists to update.
     */
    limit?: number
  }

  /**
   * artist upsert
   */
  export type artistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artist
     */
    select?: artistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artist
     */
    omit?: artistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistInclude<ExtArgs> | null
    /**
     * The filter to search for the artist to update in case it exists.
     */
    where: artistWhereUniqueInput
    /**
     * In case the artist found by the `where` argument doesn't exist, create a new artist with this data.
     */
    create: XOR<artistCreateInput, artistUncheckedCreateInput>
    /**
     * In case the artist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<artistUpdateInput, artistUncheckedUpdateInput>
  }

  /**
   * artist delete
   */
  export type artistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artist
     */
    select?: artistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artist
     */
    omit?: artistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistInclude<ExtArgs> | null
    /**
     * Filter which artist to delete.
     */
    where: artistWhereUniqueInput
  }

  /**
   * artist deleteMany
   */
  export type artistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which artists to delete
     */
    where?: artistWhereInput
    /**
     * Limit how many artists to delete.
     */
    limit?: number
  }

  /**
   * artist.eventArtists
   */
  export type artist$eventArtistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the eventArtist
     */
    select?: eventArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the eventArtist
     */
    omit?: eventArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventArtistInclude<ExtArgs> | null
    where?: eventArtistWhereInput
    orderBy?: eventArtistOrderByWithRelationInput | eventArtistOrderByWithRelationInput[]
    cursor?: eventArtistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventArtistScalarFieldEnum | EventArtistScalarFieldEnum[]
  }

  /**
   * artist without action
   */
  export type artistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artist
     */
    select?: artistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artist
     */
    omit?: artistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistInclude<ExtArgs> | null
  }


  /**
   * Model eventArtist
   */

  export type AggregateEventArtist = {
    _count: EventArtistCountAggregateOutputType | null
    _avg: EventArtistAvgAggregateOutputType | null
    _sum: EventArtistSumAggregateOutputType | null
    _min: EventArtistMinAggregateOutputType | null
    _max: EventArtistMaxAggregateOutputType | null
  }

  export type EventArtistAvgAggregateOutputType = {
    eventId: number | null
    artistId: number | null
    order: number | null
  }

  export type EventArtistSumAggregateOutputType = {
    eventId: number | null
    artistId: number | null
    order: number | null
  }

  export type EventArtistMinAggregateOutputType = {
    eventId: number | null
    artistId: number | null
    order: number | null
    slotTime: string | null
    isHeadliner: boolean | null
  }

  export type EventArtistMaxAggregateOutputType = {
    eventId: number | null
    artistId: number | null
    order: number | null
    slotTime: string | null
    isHeadliner: boolean | null
  }

  export type EventArtistCountAggregateOutputType = {
    eventId: number
    artistId: number
    order: number
    slotTime: number
    isHeadliner: number
    _all: number
  }


  export type EventArtistAvgAggregateInputType = {
    eventId?: true
    artistId?: true
    order?: true
  }

  export type EventArtistSumAggregateInputType = {
    eventId?: true
    artistId?: true
    order?: true
  }

  export type EventArtistMinAggregateInputType = {
    eventId?: true
    artistId?: true
    order?: true
    slotTime?: true
    isHeadliner?: true
  }

  export type EventArtistMaxAggregateInputType = {
    eventId?: true
    artistId?: true
    order?: true
    slotTime?: true
    isHeadliner?: true
  }

  export type EventArtistCountAggregateInputType = {
    eventId?: true
    artistId?: true
    order?: true
    slotTime?: true
    isHeadliner?: true
    _all?: true
  }

  export type EventArtistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which eventArtist to aggregate.
     */
    where?: eventArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of eventArtists to fetch.
     */
    orderBy?: eventArtistOrderByWithRelationInput | eventArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: eventArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` eventArtists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` eventArtists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned eventArtists
    **/
    _count?: true | EventArtistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventArtistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventArtistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventArtistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventArtistMaxAggregateInputType
  }

  export type GetEventArtistAggregateType<T extends EventArtistAggregateArgs> = {
        [P in keyof T & keyof AggregateEventArtist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventArtist[P]>
      : GetScalarType<T[P], AggregateEventArtist[P]>
  }




  export type eventArtistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: eventArtistWhereInput
    orderBy?: eventArtistOrderByWithAggregationInput | eventArtistOrderByWithAggregationInput[]
    by: EventArtistScalarFieldEnum[] | EventArtistScalarFieldEnum
    having?: eventArtistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventArtistCountAggregateInputType | true
    _avg?: EventArtistAvgAggregateInputType
    _sum?: EventArtistSumAggregateInputType
    _min?: EventArtistMinAggregateInputType
    _max?: EventArtistMaxAggregateInputType
  }

  export type EventArtistGroupByOutputType = {
    eventId: number
    artistId: number
    order: number | null
    slotTime: string | null
    isHeadliner: boolean
    _count: EventArtistCountAggregateOutputType | null
    _avg: EventArtistAvgAggregateOutputType | null
    _sum: EventArtistSumAggregateOutputType | null
    _min: EventArtistMinAggregateOutputType | null
    _max: EventArtistMaxAggregateOutputType | null
  }

  type GetEventArtistGroupByPayload<T extends eventArtistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventArtistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventArtistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventArtistGroupByOutputType[P]>
            : GetScalarType<T[P], EventArtistGroupByOutputType[P]>
        }
      >
    >


  export type eventArtistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    eventId?: boolean
    artistId?: boolean
    order?: boolean
    slotTime?: boolean
    isHeadliner?: boolean
    artist?: boolean | artistDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventArtist"]>

  export type eventArtistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    eventId?: boolean
    artistId?: boolean
    order?: boolean
    slotTime?: boolean
    isHeadliner?: boolean
    artist?: boolean | artistDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventArtist"]>

  export type eventArtistSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    eventId?: boolean
    artistId?: boolean
    order?: boolean
    slotTime?: boolean
    isHeadliner?: boolean
    artist?: boolean | artistDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventArtist"]>

  export type eventArtistSelectScalar = {
    eventId?: boolean
    artistId?: boolean
    order?: boolean
    slotTime?: boolean
    isHeadliner?: boolean
  }

  export type eventArtistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"eventId" | "artistId" | "order" | "slotTime" | "isHeadliner", ExtArgs["result"]["eventArtist"]>
  export type eventArtistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artist?: boolean | artistDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }
  export type eventArtistIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artist?: boolean | artistDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }
  export type eventArtistIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artist?: boolean | artistDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }

  export type $eventArtistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "eventArtist"
    objects: {
      artist: Prisma.$artistPayload<ExtArgs>
      event: Prisma.$eventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      eventId: number
      artistId: number
      order: number | null
      slotTime: string | null
      isHeadliner: boolean
    }, ExtArgs["result"]["eventArtist"]>
    composites: {}
  }

  type eventArtistGetPayload<S extends boolean | null | undefined | eventArtistDefaultArgs> = $Result.GetResult<Prisma.$eventArtistPayload, S>

  type eventArtistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<eventArtistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventArtistCountAggregateInputType | true
    }

  export interface eventArtistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['eventArtist'], meta: { name: 'eventArtist' } }
    /**
     * Find zero or one EventArtist that matches the filter.
     * @param {eventArtistFindUniqueArgs} args - Arguments to find a EventArtist
     * @example
     * // Get one EventArtist
     * const eventArtist = await prisma.eventArtist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends eventArtistFindUniqueArgs>(args: SelectSubset<T, eventArtistFindUniqueArgs<ExtArgs>>): Prisma__eventArtistClient<$Result.GetResult<Prisma.$eventArtistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EventArtist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {eventArtistFindUniqueOrThrowArgs} args - Arguments to find a EventArtist
     * @example
     * // Get one EventArtist
     * const eventArtist = await prisma.eventArtist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends eventArtistFindUniqueOrThrowArgs>(args: SelectSubset<T, eventArtistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__eventArtistClient<$Result.GetResult<Prisma.$eventArtistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventArtist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventArtistFindFirstArgs} args - Arguments to find a EventArtist
     * @example
     * // Get one EventArtist
     * const eventArtist = await prisma.eventArtist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends eventArtistFindFirstArgs>(args?: SelectSubset<T, eventArtistFindFirstArgs<ExtArgs>>): Prisma__eventArtistClient<$Result.GetResult<Prisma.$eventArtistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventArtist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventArtistFindFirstOrThrowArgs} args - Arguments to find a EventArtist
     * @example
     * // Get one EventArtist
     * const eventArtist = await prisma.eventArtist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends eventArtistFindFirstOrThrowArgs>(args?: SelectSubset<T, eventArtistFindFirstOrThrowArgs<ExtArgs>>): Prisma__eventArtistClient<$Result.GetResult<Prisma.$eventArtistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EventArtists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventArtistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventArtists
     * const eventArtists = await prisma.eventArtist.findMany()
     * 
     * // Get first 10 EventArtists
     * const eventArtists = await prisma.eventArtist.findMany({ take: 10 })
     * 
     * // Only select the `eventId`
     * const eventArtistWithEventIdOnly = await prisma.eventArtist.findMany({ select: { eventId: true } })
     * 
     */
    findMany<T extends eventArtistFindManyArgs>(args?: SelectSubset<T, eventArtistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$eventArtistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EventArtist.
     * @param {eventArtistCreateArgs} args - Arguments to create a EventArtist.
     * @example
     * // Create one EventArtist
     * const EventArtist = await prisma.eventArtist.create({
     *   data: {
     *     // ... data to create a EventArtist
     *   }
     * })
     * 
     */
    create<T extends eventArtistCreateArgs>(args: SelectSubset<T, eventArtistCreateArgs<ExtArgs>>): Prisma__eventArtistClient<$Result.GetResult<Prisma.$eventArtistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EventArtists.
     * @param {eventArtistCreateManyArgs} args - Arguments to create many EventArtists.
     * @example
     * // Create many EventArtists
     * const eventArtist = await prisma.eventArtist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends eventArtistCreateManyArgs>(args?: SelectSubset<T, eventArtistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventArtists and returns the data saved in the database.
     * @param {eventArtistCreateManyAndReturnArgs} args - Arguments to create many EventArtists.
     * @example
     * // Create many EventArtists
     * const eventArtist = await prisma.eventArtist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventArtists and only return the `eventId`
     * const eventArtistWithEventIdOnly = await prisma.eventArtist.createManyAndReturn({
     *   select: { eventId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends eventArtistCreateManyAndReturnArgs>(args?: SelectSubset<T, eventArtistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$eventArtistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EventArtist.
     * @param {eventArtistDeleteArgs} args - Arguments to delete one EventArtist.
     * @example
     * // Delete one EventArtist
     * const EventArtist = await prisma.eventArtist.delete({
     *   where: {
     *     // ... filter to delete one EventArtist
     *   }
     * })
     * 
     */
    delete<T extends eventArtistDeleteArgs>(args: SelectSubset<T, eventArtistDeleteArgs<ExtArgs>>): Prisma__eventArtistClient<$Result.GetResult<Prisma.$eventArtistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EventArtist.
     * @param {eventArtistUpdateArgs} args - Arguments to update one EventArtist.
     * @example
     * // Update one EventArtist
     * const eventArtist = await prisma.eventArtist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends eventArtistUpdateArgs>(args: SelectSubset<T, eventArtistUpdateArgs<ExtArgs>>): Prisma__eventArtistClient<$Result.GetResult<Prisma.$eventArtistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EventArtists.
     * @param {eventArtistDeleteManyArgs} args - Arguments to filter EventArtists to delete.
     * @example
     * // Delete a few EventArtists
     * const { count } = await prisma.eventArtist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends eventArtistDeleteManyArgs>(args?: SelectSubset<T, eventArtistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventArtists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventArtistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventArtists
     * const eventArtist = await prisma.eventArtist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends eventArtistUpdateManyArgs>(args: SelectSubset<T, eventArtistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventArtists and returns the data updated in the database.
     * @param {eventArtistUpdateManyAndReturnArgs} args - Arguments to update many EventArtists.
     * @example
     * // Update many EventArtists
     * const eventArtist = await prisma.eventArtist.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventArtists and only return the `eventId`
     * const eventArtistWithEventIdOnly = await prisma.eventArtist.updateManyAndReturn({
     *   select: { eventId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends eventArtistUpdateManyAndReturnArgs>(args: SelectSubset<T, eventArtistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$eventArtistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EventArtist.
     * @param {eventArtistUpsertArgs} args - Arguments to update or create a EventArtist.
     * @example
     * // Update or create a EventArtist
     * const eventArtist = await prisma.eventArtist.upsert({
     *   create: {
     *     // ... data to create a EventArtist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventArtist we want to update
     *   }
     * })
     */
    upsert<T extends eventArtistUpsertArgs>(args: SelectSubset<T, eventArtistUpsertArgs<ExtArgs>>): Prisma__eventArtistClient<$Result.GetResult<Prisma.$eventArtistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EventArtists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventArtistCountArgs} args - Arguments to filter EventArtists to count.
     * @example
     * // Count the number of EventArtists
     * const count = await prisma.eventArtist.count({
     *   where: {
     *     // ... the filter for the EventArtists we want to count
     *   }
     * })
    **/
    count<T extends eventArtistCountArgs>(
      args?: Subset<T, eventArtistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventArtistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventArtist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventArtistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventArtistAggregateArgs>(args: Subset<T, EventArtistAggregateArgs>): Prisma.PrismaPromise<GetEventArtistAggregateType<T>>

    /**
     * Group by EventArtist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventArtistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends eventArtistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: eventArtistGroupByArgs['orderBy'] }
        : { orderBy?: eventArtistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, eventArtistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventArtistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the eventArtist model
   */
  readonly fields: eventArtistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for eventArtist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__eventArtistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    artist<T extends artistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, artistDefaultArgs<ExtArgs>>): Prisma__artistClient<$Result.GetResult<Prisma.$artistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends eventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, eventDefaultArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the eventArtist model
   */
  interface eventArtistFieldRefs {
    readonly eventId: FieldRef<"eventArtist", 'Int'>
    readonly artistId: FieldRef<"eventArtist", 'Int'>
    readonly order: FieldRef<"eventArtist", 'Int'>
    readonly slotTime: FieldRef<"eventArtist", 'String'>
    readonly isHeadliner: FieldRef<"eventArtist", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * eventArtist findUnique
   */
  export type eventArtistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the eventArtist
     */
    select?: eventArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the eventArtist
     */
    omit?: eventArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventArtistInclude<ExtArgs> | null
    /**
     * Filter, which eventArtist to fetch.
     */
    where: eventArtistWhereUniqueInput
  }

  /**
   * eventArtist findUniqueOrThrow
   */
  export type eventArtistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the eventArtist
     */
    select?: eventArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the eventArtist
     */
    omit?: eventArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventArtistInclude<ExtArgs> | null
    /**
     * Filter, which eventArtist to fetch.
     */
    where: eventArtistWhereUniqueInput
  }

  /**
   * eventArtist findFirst
   */
  export type eventArtistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the eventArtist
     */
    select?: eventArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the eventArtist
     */
    omit?: eventArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventArtistInclude<ExtArgs> | null
    /**
     * Filter, which eventArtist to fetch.
     */
    where?: eventArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of eventArtists to fetch.
     */
    orderBy?: eventArtistOrderByWithRelationInput | eventArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for eventArtists.
     */
    cursor?: eventArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` eventArtists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` eventArtists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of eventArtists.
     */
    distinct?: EventArtistScalarFieldEnum | EventArtistScalarFieldEnum[]
  }

  /**
   * eventArtist findFirstOrThrow
   */
  export type eventArtistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the eventArtist
     */
    select?: eventArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the eventArtist
     */
    omit?: eventArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventArtistInclude<ExtArgs> | null
    /**
     * Filter, which eventArtist to fetch.
     */
    where?: eventArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of eventArtists to fetch.
     */
    orderBy?: eventArtistOrderByWithRelationInput | eventArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for eventArtists.
     */
    cursor?: eventArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` eventArtists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` eventArtists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of eventArtists.
     */
    distinct?: EventArtistScalarFieldEnum | EventArtistScalarFieldEnum[]
  }

  /**
   * eventArtist findMany
   */
  export type eventArtistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the eventArtist
     */
    select?: eventArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the eventArtist
     */
    omit?: eventArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventArtistInclude<ExtArgs> | null
    /**
     * Filter, which eventArtists to fetch.
     */
    where?: eventArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of eventArtists to fetch.
     */
    orderBy?: eventArtistOrderByWithRelationInput | eventArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing eventArtists.
     */
    cursor?: eventArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` eventArtists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` eventArtists.
     */
    skip?: number
    distinct?: EventArtistScalarFieldEnum | EventArtistScalarFieldEnum[]
  }

  /**
   * eventArtist create
   */
  export type eventArtistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the eventArtist
     */
    select?: eventArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the eventArtist
     */
    omit?: eventArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventArtistInclude<ExtArgs> | null
    /**
     * The data needed to create a eventArtist.
     */
    data: XOR<eventArtistCreateInput, eventArtistUncheckedCreateInput>
  }

  /**
   * eventArtist createMany
   */
  export type eventArtistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many eventArtists.
     */
    data: eventArtistCreateManyInput | eventArtistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * eventArtist createManyAndReturn
   */
  export type eventArtistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the eventArtist
     */
    select?: eventArtistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the eventArtist
     */
    omit?: eventArtistOmit<ExtArgs> | null
    /**
     * The data used to create many eventArtists.
     */
    data: eventArtistCreateManyInput | eventArtistCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventArtistIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * eventArtist update
   */
  export type eventArtistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the eventArtist
     */
    select?: eventArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the eventArtist
     */
    omit?: eventArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventArtistInclude<ExtArgs> | null
    /**
     * The data needed to update a eventArtist.
     */
    data: XOR<eventArtistUpdateInput, eventArtistUncheckedUpdateInput>
    /**
     * Choose, which eventArtist to update.
     */
    where: eventArtistWhereUniqueInput
  }

  /**
   * eventArtist updateMany
   */
  export type eventArtistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update eventArtists.
     */
    data: XOR<eventArtistUpdateManyMutationInput, eventArtistUncheckedUpdateManyInput>
    /**
     * Filter which eventArtists to update
     */
    where?: eventArtistWhereInput
    /**
     * Limit how many eventArtists to update.
     */
    limit?: number
  }

  /**
   * eventArtist updateManyAndReturn
   */
  export type eventArtistUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the eventArtist
     */
    select?: eventArtistSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the eventArtist
     */
    omit?: eventArtistOmit<ExtArgs> | null
    /**
     * The data used to update eventArtists.
     */
    data: XOR<eventArtistUpdateManyMutationInput, eventArtistUncheckedUpdateManyInput>
    /**
     * Filter which eventArtists to update
     */
    where?: eventArtistWhereInput
    /**
     * Limit how many eventArtists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventArtistIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * eventArtist upsert
   */
  export type eventArtistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the eventArtist
     */
    select?: eventArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the eventArtist
     */
    omit?: eventArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventArtistInclude<ExtArgs> | null
    /**
     * The filter to search for the eventArtist to update in case it exists.
     */
    where: eventArtistWhereUniqueInput
    /**
     * In case the eventArtist found by the `where` argument doesn't exist, create a new eventArtist with this data.
     */
    create: XOR<eventArtistCreateInput, eventArtistUncheckedCreateInput>
    /**
     * In case the eventArtist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<eventArtistUpdateInput, eventArtistUncheckedUpdateInput>
  }

  /**
   * eventArtist delete
   */
  export type eventArtistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the eventArtist
     */
    select?: eventArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the eventArtist
     */
    omit?: eventArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventArtistInclude<ExtArgs> | null
    /**
     * Filter which eventArtist to delete.
     */
    where: eventArtistWhereUniqueInput
  }

  /**
   * eventArtist deleteMany
   */
  export type eventArtistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which eventArtists to delete
     */
    where?: eventArtistWhereInput
    /**
     * Limit how many eventArtists to delete.
     */
    limit?: number
  }

  /**
   * eventArtist without action
   */
  export type eventArtistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the eventArtist
     */
    select?: eventArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the eventArtist
     */
    omit?: eventArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: eventArtistInclude<ExtArgs> | null
  }


  /**
   * Model ticketType
   */

  export type AggregateTicketType = {
    _count: TicketTypeCountAggregateOutputType | null
    _avg: TicketTypeAvgAggregateOutputType | null
    _sum: TicketTypeSumAggregateOutputType | null
    _min: TicketTypeMinAggregateOutputType | null
    _max: TicketTypeMaxAggregateOutputType | null
  }

  export type TicketTypeAvgAggregateOutputType = {
    id: number | null
    eventId: number | null
    price: Decimal | null
    stockMax: number | null
    stockCurrent: number | null
    userMaxPerType: number | null
  }

  export type TicketTypeSumAggregateOutputType = {
    id: number | null
    eventId: number | null
    price: Decimal | null
    stockMax: number | null
    stockCurrent: number | null
    userMaxPerType: number | null
  }

  export type TicketTypeMinAggregateOutputType = {
    id: number | null
    eventId: number | null
    code: string | null
    label: string | null
    price: Decimal | null
    stockMax: number | null
    stockCurrent: number | null
    userMaxPerType: number | null
    scanExpiration: Date | null
    isVisible: boolean | null
    isDisabled: boolean | null
  }

  export type TicketTypeMaxAggregateOutputType = {
    id: number | null
    eventId: number | null
    code: string | null
    label: string | null
    price: Decimal | null
    stockMax: number | null
    stockCurrent: number | null
    userMaxPerType: number | null
    scanExpiration: Date | null
    isVisible: boolean | null
    isDisabled: boolean | null
  }

  export type TicketTypeCountAggregateOutputType = {
    id: number
    eventId: number
    code: number
    label: number
    price: number
    stockMax: number
    stockCurrent: number
    userMaxPerType: number
    scanExpiration: number
    isVisible: number
    isDisabled: number
    _all: number
  }


  export type TicketTypeAvgAggregateInputType = {
    id?: true
    eventId?: true
    price?: true
    stockMax?: true
    stockCurrent?: true
    userMaxPerType?: true
  }

  export type TicketTypeSumAggregateInputType = {
    id?: true
    eventId?: true
    price?: true
    stockMax?: true
    stockCurrent?: true
    userMaxPerType?: true
  }

  export type TicketTypeMinAggregateInputType = {
    id?: true
    eventId?: true
    code?: true
    label?: true
    price?: true
    stockMax?: true
    stockCurrent?: true
    userMaxPerType?: true
    scanExpiration?: true
    isVisible?: true
    isDisabled?: true
  }

  export type TicketTypeMaxAggregateInputType = {
    id?: true
    eventId?: true
    code?: true
    label?: true
    price?: true
    stockMax?: true
    stockCurrent?: true
    userMaxPerType?: true
    scanExpiration?: true
    isVisible?: true
    isDisabled?: true
  }

  export type TicketTypeCountAggregateInputType = {
    id?: true
    eventId?: true
    code?: true
    label?: true
    price?: true
    stockMax?: true
    stockCurrent?: true
    userMaxPerType?: true
    scanExpiration?: true
    isVisible?: true
    isDisabled?: true
    _all?: true
  }

  export type TicketTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticketType to aggregate.
     */
    where?: ticketTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticketTypes to fetch.
     */
    orderBy?: ticketTypeOrderByWithRelationInput | ticketTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ticketTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticketTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticketTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ticketTypes
    **/
    _count?: true | TicketTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketTypeMaxAggregateInputType
  }

  export type GetTicketTypeAggregateType<T extends TicketTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateTicketType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicketType[P]>
      : GetScalarType<T[P], AggregateTicketType[P]>
  }




  export type ticketTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketTypeWhereInput
    orderBy?: ticketTypeOrderByWithAggregationInput | ticketTypeOrderByWithAggregationInput[]
    by: TicketTypeScalarFieldEnum[] | TicketTypeScalarFieldEnum
    having?: ticketTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketTypeCountAggregateInputType | true
    _avg?: TicketTypeAvgAggregateInputType
    _sum?: TicketTypeSumAggregateInputType
    _min?: TicketTypeMinAggregateInputType
    _max?: TicketTypeMaxAggregateInputType
  }

  export type TicketTypeGroupByOutputType = {
    id: number
    eventId: number
    code: string
    label: string
    price: Decimal
    stockMax: number
    stockCurrent: number
    userMaxPerType: number
    scanExpiration: Date | null
    isVisible: boolean
    isDisabled: boolean
    _count: TicketTypeCountAggregateOutputType | null
    _avg: TicketTypeAvgAggregateOutputType | null
    _sum: TicketTypeSumAggregateOutputType | null
    _min: TicketTypeMinAggregateOutputType | null
    _max: TicketTypeMaxAggregateOutputType | null
  }

  type GetTicketTypeGroupByPayload<T extends ticketTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketTypeGroupByOutputType[P]>
            : GetScalarType<T[P], TicketTypeGroupByOutputType[P]>
        }
      >
    >


  export type ticketTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    code?: boolean
    label?: boolean
    price?: boolean
    stockMax?: boolean
    stockCurrent?: boolean
    userMaxPerType?: boolean
    scanExpiration?: boolean
    isVisible?: boolean
    isDisabled?: boolean
    event?: boolean | eventDefaultArgs<ExtArgs>
    tickets?: boolean | ticketType$ticketsArgs<ExtArgs>
    _count?: boolean | TicketTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticketType"]>

  export type ticketTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    code?: boolean
    label?: boolean
    price?: boolean
    stockMax?: boolean
    stockCurrent?: boolean
    userMaxPerType?: boolean
    scanExpiration?: boolean
    isVisible?: boolean
    isDisabled?: boolean
    event?: boolean | eventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticketType"]>

  export type ticketTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    code?: boolean
    label?: boolean
    price?: boolean
    stockMax?: boolean
    stockCurrent?: boolean
    userMaxPerType?: boolean
    scanExpiration?: boolean
    isVisible?: boolean
    isDisabled?: boolean
    event?: boolean | eventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticketType"]>

  export type ticketTypeSelectScalar = {
    id?: boolean
    eventId?: boolean
    code?: boolean
    label?: boolean
    price?: boolean
    stockMax?: boolean
    stockCurrent?: boolean
    userMaxPerType?: boolean
    scanExpiration?: boolean
    isVisible?: boolean
    isDisabled?: boolean
  }

  export type ticketTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "code" | "label" | "price" | "stockMax" | "stockCurrent" | "userMaxPerType" | "scanExpiration" | "isVisible" | "isDisabled", ExtArgs["result"]["ticketType"]>
  export type ticketTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | eventDefaultArgs<ExtArgs>
    tickets?: boolean | ticketType$ticketsArgs<ExtArgs>
    _count?: boolean | TicketTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ticketTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | eventDefaultArgs<ExtArgs>
  }
  export type ticketTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | eventDefaultArgs<ExtArgs>
  }

  export type $ticketTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ticketType"
    objects: {
      event: Prisma.$eventPayload<ExtArgs>
      tickets: Prisma.$ticketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      eventId: number
      code: string
      label: string
      price: Prisma.Decimal
      stockMax: number
      stockCurrent: number
      userMaxPerType: number
      scanExpiration: Date | null
      isVisible: boolean
      isDisabled: boolean
    }, ExtArgs["result"]["ticketType"]>
    composites: {}
  }

  type ticketTypeGetPayload<S extends boolean | null | undefined | ticketTypeDefaultArgs> = $Result.GetResult<Prisma.$ticketTypePayload, S>

  type ticketTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ticketTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TicketTypeCountAggregateInputType | true
    }

  export interface ticketTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ticketType'], meta: { name: 'ticketType' } }
    /**
     * Find zero or one TicketType that matches the filter.
     * @param {ticketTypeFindUniqueArgs} args - Arguments to find a TicketType
     * @example
     * // Get one TicketType
     * const ticketType = await prisma.ticketType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ticketTypeFindUniqueArgs>(args: SelectSubset<T, ticketTypeFindUniqueArgs<ExtArgs>>): Prisma__ticketTypeClient<$Result.GetResult<Prisma.$ticketTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TicketType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ticketTypeFindUniqueOrThrowArgs} args - Arguments to find a TicketType
     * @example
     * // Get one TicketType
     * const ticketType = await prisma.ticketType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ticketTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, ticketTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ticketTypeClient<$Result.GetResult<Prisma.$ticketTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TicketType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketTypeFindFirstArgs} args - Arguments to find a TicketType
     * @example
     * // Get one TicketType
     * const ticketType = await prisma.ticketType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ticketTypeFindFirstArgs>(args?: SelectSubset<T, ticketTypeFindFirstArgs<ExtArgs>>): Prisma__ticketTypeClient<$Result.GetResult<Prisma.$ticketTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TicketType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketTypeFindFirstOrThrowArgs} args - Arguments to find a TicketType
     * @example
     * // Get one TicketType
     * const ticketType = await prisma.ticketType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ticketTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, ticketTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ticketTypeClient<$Result.GetResult<Prisma.$ticketTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TicketTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TicketTypes
     * const ticketTypes = await prisma.ticketType.findMany()
     * 
     * // Get first 10 TicketTypes
     * const ticketTypes = await prisma.ticketType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketTypeWithIdOnly = await prisma.ticketType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ticketTypeFindManyArgs>(args?: SelectSubset<T, ticketTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TicketType.
     * @param {ticketTypeCreateArgs} args - Arguments to create a TicketType.
     * @example
     * // Create one TicketType
     * const TicketType = await prisma.ticketType.create({
     *   data: {
     *     // ... data to create a TicketType
     *   }
     * })
     * 
     */
    create<T extends ticketTypeCreateArgs>(args: SelectSubset<T, ticketTypeCreateArgs<ExtArgs>>): Prisma__ticketTypeClient<$Result.GetResult<Prisma.$ticketTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TicketTypes.
     * @param {ticketTypeCreateManyArgs} args - Arguments to create many TicketTypes.
     * @example
     * // Create many TicketTypes
     * const ticketType = await prisma.ticketType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ticketTypeCreateManyArgs>(args?: SelectSubset<T, ticketTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TicketTypes and returns the data saved in the database.
     * @param {ticketTypeCreateManyAndReturnArgs} args - Arguments to create many TicketTypes.
     * @example
     * // Create many TicketTypes
     * const ticketType = await prisma.ticketType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TicketTypes and only return the `id`
     * const ticketTypeWithIdOnly = await prisma.ticketType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ticketTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, ticketTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TicketType.
     * @param {ticketTypeDeleteArgs} args - Arguments to delete one TicketType.
     * @example
     * // Delete one TicketType
     * const TicketType = await prisma.ticketType.delete({
     *   where: {
     *     // ... filter to delete one TicketType
     *   }
     * })
     * 
     */
    delete<T extends ticketTypeDeleteArgs>(args: SelectSubset<T, ticketTypeDeleteArgs<ExtArgs>>): Prisma__ticketTypeClient<$Result.GetResult<Prisma.$ticketTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TicketType.
     * @param {ticketTypeUpdateArgs} args - Arguments to update one TicketType.
     * @example
     * // Update one TicketType
     * const ticketType = await prisma.ticketType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ticketTypeUpdateArgs>(args: SelectSubset<T, ticketTypeUpdateArgs<ExtArgs>>): Prisma__ticketTypeClient<$Result.GetResult<Prisma.$ticketTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TicketTypes.
     * @param {ticketTypeDeleteManyArgs} args - Arguments to filter TicketTypes to delete.
     * @example
     * // Delete a few TicketTypes
     * const { count } = await prisma.ticketType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ticketTypeDeleteManyArgs>(args?: SelectSubset<T, ticketTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TicketTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TicketTypes
     * const ticketType = await prisma.ticketType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ticketTypeUpdateManyArgs>(args: SelectSubset<T, ticketTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TicketTypes and returns the data updated in the database.
     * @param {ticketTypeUpdateManyAndReturnArgs} args - Arguments to update many TicketTypes.
     * @example
     * // Update many TicketTypes
     * const ticketType = await prisma.ticketType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TicketTypes and only return the `id`
     * const ticketTypeWithIdOnly = await prisma.ticketType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ticketTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, ticketTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TicketType.
     * @param {ticketTypeUpsertArgs} args - Arguments to update or create a TicketType.
     * @example
     * // Update or create a TicketType
     * const ticketType = await prisma.ticketType.upsert({
     *   create: {
     *     // ... data to create a TicketType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TicketType we want to update
     *   }
     * })
     */
    upsert<T extends ticketTypeUpsertArgs>(args: SelectSubset<T, ticketTypeUpsertArgs<ExtArgs>>): Prisma__ticketTypeClient<$Result.GetResult<Prisma.$ticketTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TicketTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketTypeCountArgs} args - Arguments to filter TicketTypes to count.
     * @example
     * // Count the number of TicketTypes
     * const count = await prisma.ticketType.count({
     *   where: {
     *     // ... the filter for the TicketTypes we want to count
     *   }
     * })
    **/
    count<T extends ticketTypeCountArgs>(
      args?: Subset<T, ticketTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TicketType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketTypeAggregateArgs>(args: Subset<T, TicketTypeAggregateArgs>): Prisma.PrismaPromise<GetTicketTypeAggregateType<T>>

    /**
     * Group by TicketType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ticketTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ticketTypeGroupByArgs['orderBy'] }
        : { orderBy?: ticketTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ticketTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ticketType model
   */
  readonly fields: ticketTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ticketType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ticketTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends eventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, eventDefaultArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tickets<T extends ticketType$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, ticketType$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ticketType model
   */
  interface ticketTypeFieldRefs {
    readonly id: FieldRef<"ticketType", 'Int'>
    readonly eventId: FieldRef<"ticketType", 'Int'>
    readonly code: FieldRef<"ticketType", 'String'>
    readonly label: FieldRef<"ticketType", 'String'>
    readonly price: FieldRef<"ticketType", 'Decimal'>
    readonly stockMax: FieldRef<"ticketType", 'Int'>
    readonly stockCurrent: FieldRef<"ticketType", 'Int'>
    readonly userMaxPerType: FieldRef<"ticketType", 'Int'>
    readonly scanExpiration: FieldRef<"ticketType", 'DateTime'>
    readonly isVisible: FieldRef<"ticketType", 'Boolean'>
    readonly isDisabled: FieldRef<"ticketType", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ticketType findUnique
   */
  export type ticketTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticketType
     */
    select?: ticketTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticketType
     */
    omit?: ticketTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketTypeInclude<ExtArgs> | null
    /**
     * Filter, which ticketType to fetch.
     */
    where: ticketTypeWhereUniqueInput
  }

  /**
   * ticketType findUniqueOrThrow
   */
  export type ticketTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticketType
     */
    select?: ticketTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticketType
     */
    omit?: ticketTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketTypeInclude<ExtArgs> | null
    /**
     * Filter, which ticketType to fetch.
     */
    where: ticketTypeWhereUniqueInput
  }

  /**
   * ticketType findFirst
   */
  export type ticketTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticketType
     */
    select?: ticketTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticketType
     */
    omit?: ticketTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketTypeInclude<ExtArgs> | null
    /**
     * Filter, which ticketType to fetch.
     */
    where?: ticketTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticketTypes to fetch.
     */
    orderBy?: ticketTypeOrderByWithRelationInput | ticketTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ticketTypes.
     */
    cursor?: ticketTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticketTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticketTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ticketTypes.
     */
    distinct?: TicketTypeScalarFieldEnum | TicketTypeScalarFieldEnum[]
  }

  /**
   * ticketType findFirstOrThrow
   */
  export type ticketTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticketType
     */
    select?: ticketTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticketType
     */
    omit?: ticketTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketTypeInclude<ExtArgs> | null
    /**
     * Filter, which ticketType to fetch.
     */
    where?: ticketTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticketTypes to fetch.
     */
    orderBy?: ticketTypeOrderByWithRelationInput | ticketTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ticketTypes.
     */
    cursor?: ticketTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticketTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticketTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ticketTypes.
     */
    distinct?: TicketTypeScalarFieldEnum | TicketTypeScalarFieldEnum[]
  }

  /**
   * ticketType findMany
   */
  export type ticketTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticketType
     */
    select?: ticketTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticketType
     */
    omit?: ticketTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketTypeInclude<ExtArgs> | null
    /**
     * Filter, which ticketTypes to fetch.
     */
    where?: ticketTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticketTypes to fetch.
     */
    orderBy?: ticketTypeOrderByWithRelationInput | ticketTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ticketTypes.
     */
    cursor?: ticketTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticketTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticketTypes.
     */
    skip?: number
    distinct?: TicketTypeScalarFieldEnum | TicketTypeScalarFieldEnum[]
  }

  /**
   * ticketType create
   */
  export type ticketTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticketType
     */
    select?: ticketTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticketType
     */
    omit?: ticketTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ticketType.
     */
    data: XOR<ticketTypeCreateInput, ticketTypeUncheckedCreateInput>
  }

  /**
   * ticketType createMany
   */
  export type ticketTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ticketTypes.
     */
    data: ticketTypeCreateManyInput | ticketTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ticketType createManyAndReturn
   */
  export type ticketTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticketType
     */
    select?: ticketTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ticketType
     */
    omit?: ticketTypeOmit<ExtArgs> | null
    /**
     * The data used to create many ticketTypes.
     */
    data: ticketTypeCreateManyInput | ticketTypeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketTypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ticketType update
   */
  export type ticketTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticketType
     */
    select?: ticketTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticketType
     */
    omit?: ticketTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ticketType.
     */
    data: XOR<ticketTypeUpdateInput, ticketTypeUncheckedUpdateInput>
    /**
     * Choose, which ticketType to update.
     */
    where: ticketTypeWhereUniqueInput
  }

  /**
   * ticketType updateMany
   */
  export type ticketTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ticketTypes.
     */
    data: XOR<ticketTypeUpdateManyMutationInput, ticketTypeUncheckedUpdateManyInput>
    /**
     * Filter which ticketTypes to update
     */
    where?: ticketTypeWhereInput
    /**
     * Limit how many ticketTypes to update.
     */
    limit?: number
  }

  /**
   * ticketType updateManyAndReturn
   */
  export type ticketTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticketType
     */
    select?: ticketTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ticketType
     */
    omit?: ticketTypeOmit<ExtArgs> | null
    /**
     * The data used to update ticketTypes.
     */
    data: XOR<ticketTypeUpdateManyMutationInput, ticketTypeUncheckedUpdateManyInput>
    /**
     * Filter which ticketTypes to update
     */
    where?: ticketTypeWhereInput
    /**
     * Limit how many ticketTypes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketTypeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ticketType upsert
   */
  export type ticketTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticketType
     */
    select?: ticketTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticketType
     */
    omit?: ticketTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ticketType to update in case it exists.
     */
    where: ticketTypeWhereUniqueInput
    /**
     * In case the ticketType found by the `where` argument doesn't exist, create a new ticketType with this data.
     */
    create: XOR<ticketTypeCreateInput, ticketTypeUncheckedCreateInput>
    /**
     * In case the ticketType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ticketTypeUpdateInput, ticketTypeUncheckedUpdateInput>
  }

  /**
   * ticketType delete
   */
  export type ticketTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticketType
     */
    select?: ticketTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticketType
     */
    omit?: ticketTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketTypeInclude<ExtArgs> | null
    /**
     * Filter which ticketType to delete.
     */
    where: ticketTypeWhereUniqueInput
  }

  /**
   * ticketType deleteMany
   */
  export type ticketTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticketTypes to delete
     */
    where?: ticketTypeWhereInput
    /**
     * Limit how many ticketTypes to delete.
     */
    limit?: number
  }

  /**
   * ticketType.tickets
   */
  export type ticketType$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    where?: ticketWhereInput
    orderBy?: ticketOrderByWithRelationInput | ticketOrderByWithRelationInput[]
    cursor?: ticketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * ticketType without action
   */
  export type ticketTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticketType
     */
    select?: ticketTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticketType
     */
    omit?: ticketTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketTypeInclude<ExtArgs> | null
  }


  /**
   * Model ticket
   */

  export type AggregateTicket = {
    _count: TicketCountAggregateOutputType | null
    _avg: TicketAvgAggregateOutputType | null
    _sum: TicketSumAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  export type TicketAvgAggregateOutputType = {
    id: number | null
    eventId: number | null
    typeId: number | null
    paymentId: number | null
  }

  export type TicketSumAggregateOutputType = {
    id: number | null
    eventId: number | null
    typeId: number | null
    paymentId: number | null
  }

  export type TicketMinAggregateOutputType = {
    id: number | null
    eventId: number | null
    ownerId: string | null
    typeId: number | null
    paymentId: number | null
    qrCode: string | null
    code: string | null
    status: $Enums.TicketStatus | null
    transferredFromId: string | null
    createdAt: Date | null
  }

  export type TicketMaxAggregateOutputType = {
    id: number | null
    eventId: number | null
    ownerId: string | null
    typeId: number | null
    paymentId: number | null
    qrCode: string | null
    code: string | null
    status: $Enums.TicketStatus | null
    transferredFromId: string | null
    createdAt: Date | null
  }

  export type TicketCountAggregateOutputType = {
    id: number
    eventId: number
    ownerId: number
    typeId: number
    paymentId: number
    qrCode: number
    code: number
    status: number
    transferredFromId: number
    createdAt: number
    _all: number
  }


  export type TicketAvgAggregateInputType = {
    id?: true
    eventId?: true
    typeId?: true
    paymentId?: true
  }

  export type TicketSumAggregateInputType = {
    id?: true
    eventId?: true
    typeId?: true
    paymentId?: true
  }

  export type TicketMinAggregateInputType = {
    id?: true
    eventId?: true
    ownerId?: true
    typeId?: true
    paymentId?: true
    qrCode?: true
    code?: true
    status?: true
    transferredFromId?: true
    createdAt?: true
  }

  export type TicketMaxAggregateInputType = {
    id?: true
    eventId?: true
    ownerId?: true
    typeId?: true
    paymentId?: true
    qrCode?: true
    code?: true
    status?: true
    transferredFromId?: true
    createdAt?: true
  }

  export type TicketCountAggregateInputType = {
    id?: true
    eventId?: true
    ownerId?: true
    typeId?: true
    paymentId?: true
    qrCode?: true
    code?: true
    status?: true
    transferredFromId?: true
    createdAt?: true
    _all?: true
  }

  export type TicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticket to aggregate.
     */
    where?: ticketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketOrderByWithRelationInput | ticketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ticketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tickets
    **/
    _count?: true | TicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketMaxAggregateInputType
  }

  export type GetTicketAggregateType<T extends TicketAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket[P]>
      : GetScalarType<T[P], AggregateTicket[P]>
  }




  export type ticketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketWhereInput
    orderBy?: ticketOrderByWithAggregationInput | ticketOrderByWithAggregationInput[]
    by: TicketScalarFieldEnum[] | TicketScalarFieldEnum
    having?: ticketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketCountAggregateInputType | true
    _avg?: TicketAvgAggregateInputType
    _sum?: TicketSumAggregateInputType
    _min?: TicketMinAggregateInputType
    _max?: TicketMaxAggregateInputType
  }

  export type TicketGroupByOutputType = {
    id: number
    eventId: number
    ownerId: string
    typeId: number
    paymentId: number | null
    qrCode: string
    code: string | null
    status: $Enums.TicketStatus
    transferredFromId: string | null
    createdAt: Date
    _count: TicketCountAggregateOutputType | null
    _avg: TicketAvgAggregateOutputType | null
    _sum: TicketSumAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  type GetTicketGroupByPayload<T extends ticketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketGroupByOutputType[P]>
            : GetScalarType<T[P], TicketGroupByOutputType[P]>
        }
      >
    >


  export type ticketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    ownerId?: boolean
    typeId?: boolean
    paymentId?: boolean
    qrCode?: boolean
    code?: boolean
    status?: boolean
    transferredFromId?: boolean
    createdAt?: boolean
    event?: boolean | eventDefaultArgs<ExtArgs>
    owner?: boolean | userDefaultArgs<ExtArgs>
    type?: boolean | ticketTypeDefaultArgs<ExtArgs>
    transferredFrom?: boolean | ticket$transferredFromArgs<ExtArgs>
    payment?: boolean | ticket$paymentArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type ticketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    ownerId?: boolean
    typeId?: boolean
    paymentId?: boolean
    qrCode?: boolean
    code?: boolean
    status?: boolean
    transferredFromId?: boolean
    createdAt?: boolean
    event?: boolean | eventDefaultArgs<ExtArgs>
    owner?: boolean | userDefaultArgs<ExtArgs>
    type?: boolean | ticketTypeDefaultArgs<ExtArgs>
    transferredFrom?: boolean | ticket$transferredFromArgs<ExtArgs>
    payment?: boolean | ticket$paymentArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type ticketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    ownerId?: boolean
    typeId?: boolean
    paymentId?: boolean
    qrCode?: boolean
    code?: boolean
    status?: boolean
    transferredFromId?: boolean
    createdAt?: boolean
    event?: boolean | eventDefaultArgs<ExtArgs>
    owner?: boolean | userDefaultArgs<ExtArgs>
    type?: boolean | ticketTypeDefaultArgs<ExtArgs>
    transferredFrom?: boolean | ticket$transferredFromArgs<ExtArgs>
    payment?: boolean | ticket$paymentArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type ticketSelectScalar = {
    id?: boolean
    eventId?: boolean
    ownerId?: boolean
    typeId?: boolean
    paymentId?: boolean
    qrCode?: boolean
    code?: boolean
    status?: boolean
    transferredFromId?: boolean
    createdAt?: boolean
  }

  export type ticketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "ownerId" | "typeId" | "paymentId" | "qrCode" | "code" | "status" | "transferredFromId" | "createdAt", ExtArgs["result"]["ticket"]>
  export type ticketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | eventDefaultArgs<ExtArgs>
    owner?: boolean | userDefaultArgs<ExtArgs>
    type?: boolean | ticketTypeDefaultArgs<ExtArgs>
    transferredFrom?: boolean | ticket$transferredFromArgs<ExtArgs>
    payment?: boolean | ticket$paymentArgs<ExtArgs>
  }
  export type ticketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | eventDefaultArgs<ExtArgs>
    owner?: boolean | userDefaultArgs<ExtArgs>
    type?: boolean | ticketTypeDefaultArgs<ExtArgs>
    transferredFrom?: boolean | ticket$transferredFromArgs<ExtArgs>
    payment?: boolean | ticket$paymentArgs<ExtArgs>
  }
  export type ticketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | eventDefaultArgs<ExtArgs>
    owner?: boolean | userDefaultArgs<ExtArgs>
    type?: boolean | ticketTypeDefaultArgs<ExtArgs>
    transferredFrom?: boolean | ticket$transferredFromArgs<ExtArgs>
    payment?: boolean | ticket$paymentArgs<ExtArgs>
  }

  export type $ticketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ticket"
    objects: {
      event: Prisma.$eventPayload<ExtArgs>
      owner: Prisma.$userPayload<ExtArgs>
      type: Prisma.$ticketTypePayload<ExtArgs>
      transferredFrom: Prisma.$userPayload<ExtArgs> | null
      payment: Prisma.$paymentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      eventId: number
      ownerId: string
      typeId: number
      paymentId: number | null
      qrCode: string
      code: string | null
      status: $Enums.TicketStatus
      transferredFromId: string | null
      createdAt: Date
    }, ExtArgs["result"]["ticket"]>
    composites: {}
  }

  type ticketGetPayload<S extends boolean | null | undefined | ticketDefaultArgs> = $Result.GetResult<Prisma.$ticketPayload, S>

  type ticketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ticketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TicketCountAggregateInputType | true
    }

  export interface ticketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ticket'], meta: { name: 'ticket' } }
    /**
     * Find zero or one Ticket that matches the filter.
     * @param {ticketFindUniqueArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ticketFindUniqueArgs>(args: SelectSubset<T, ticketFindUniqueArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ticket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ticketFindUniqueOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ticketFindUniqueOrThrowArgs>(args: SelectSubset<T, ticketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketFindFirstArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ticketFindFirstArgs>(args?: SelectSubset<T, ticketFindFirstArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketFindFirstOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ticketFindFirstOrThrowArgs>(args?: SelectSubset<T, ticketFindFirstOrThrowArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.ticket.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.ticket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketWithIdOnly = await prisma.ticket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ticketFindManyArgs>(args?: SelectSubset<T, ticketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ticket.
     * @param {ticketCreateArgs} args - Arguments to create a Ticket.
     * @example
     * // Create one Ticket
     * const Ticket = await prisma.ticket.create({
     *   data: {
     *     // ... data to create a Ticket
     *   }
     * })
     * 
     */
    create<T extends ticketCreateArgs>(args: SelectSubset<T, ticketCreateArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tickets.
     * @param {ticketCreateManyArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const ticket = await prisma.ticket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ticketCreateManyArgs>(args?: SelectSubset<T, ticketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tickets and returns the data saved in the database.
     * @param {ticketCreateManyAndReturnArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const ticket = await prisma.ticket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tickets and only return the `id`
     * const ticketWithIdOnly = await prisma.ticket.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ticketCreateManyAndReturnArgs>(args?: SelectSubset<T, ticketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ticket.
     * @param {ticketDeleteArgs} args - Arguments to delete one Ticket.
     * @example
     * // Delete one Ticket
     * const Ticket = await prisma.ticket.delete({
     *   where: {
     *     // ... filter to delete one Ticket
     *   }
     * })
     * 
     */
    delete<T extends ticketDeleteArgs>(args: SelectSubset<T, ticketDeleteArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ticket.
     * @param {ticketUpdateArgs} args - Arguments to update one Ticket.
     * @example
     * // Update one Ticket
     * const ticket = await prisma.ticket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ticketUpdateArgs>(args: SelectSubset<T, ticketUpdateArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tickets.
     * @param {ticketDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.ticket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ticketDeleteManyArgs>(args?: SelectSubset<T, ticketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const ticket = await prisma.ticket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ticketUpdateManyArgs>(args: SelectSubset<T, ticketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets and returns the data updated in the database.
     * @param {ticketUpdateManyAndReturnArgs} args - Arguments to update many Tickets.
     * @example
     * // Update many Tickets
     * const ticket = await prisma.ticket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tickets and only return the `id`
     * const ticketWithIdOnly = await prisma.ticket.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ticketUpdateManyAndReturnArgs>(args: SelectSubset<T, ticketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ticket.
     * @param {ticketUpsertArgs} args - Arguments to update or create a Ticket.
     * @example
     * // Update or create a Ticket
     * const ticket = await prisma.ticket.upsert({
     *   create: {
     *     // ... data to create a Ticket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket we want to update
     *   }
     * })
     */
    upsert<T extends ticketUpsertArgs>(args: SelectSubset<T, ticketUpsertArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.ticket.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends ticketCountArgs>(
      args?: Subset<T, ticketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketAggregateArgs>(args: Subset<T, TicketAggregateArgs>): Prisma.PrismaPromise<GetTicketAggregateType<T>>

    /**
     * Group by Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ticketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ticketGroupByArgs['orderBy'] }
        : { orderBy?: ticketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ticketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ticket model
   */
  readonly fields: ticketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ticket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ticketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends eventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, eventDefaultArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    owner<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    type<T extends ticketTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ticketTypeDefaultArgs<ExtArgs>>): Prisma__ticketTypeClient<$Result.GetResult<Prisma.$ticketTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transferredFrom<T extends ticket$transferredFromArgs<ExtArgs> = {}>(args?: Subset<T, ticket$transferredFromArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    payment<T extends ticket$paymentArgs<ExtArgs> = {}>(args?: Subset<T, ticket$paymentArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ticket model
   */
  interface ticketFieldRefs {
    readonly id: FieldRef<"ticket", 'Int'>
    readonly eventId: FieldRef<"ticket", 'Int'>
    readonly ownerId: FieldRef<"ticket", 'String'>
    readonly typeId: FieldRef<"ticket", 'Int'>
    readonly paymentId: FieldRef<"ticket", 'Int'>
    readonly qrCode: FieldRef<"ticket", 'String'>
    readonly code: FieldRef<"ticket", 'String'>
    readonly status: FieldRef<"ticket", 'TicketStatus'>
    readonly transferredFromId: FieldRef<"ticket", 'String'>
    readonly createdAt: FieldRef<"ticket", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ticket findUnique
   */
  export type ticketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * Filter, which ticket to fetch.
     */
    where: ticketWhereUniqueInput
  }

  /**
   * ticket findUniqueOrThrow
   */
  export type ticketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * Filter, which ticket to fetch.
     */
    where: ticketWhereUniqueInput
  }

  /**
   * ticket findFirst
   */
  export type ticketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * Filter, which ticket to fetch.
     */
    where?: ticketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketOrderByWithRelationInput | ticketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tickets.
     */
    cursor?: ticketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * ticket findFirstOrThrow
   */
  export type ticketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * Filter, which ticket to fetch.
     */
    where?: ticketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketOrderByWithRelationInput | ticketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tickets.
     */
    cursor?: ticketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * ticket findMany
   */
  export type ticketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where?: ticketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketOrderByWithRelationInput | ticketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tickets.
     */
    cursor?: ticketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * ticket create
   */
  export type ticketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * The data needed to create a ticket.
     */
    data: XOR<ticketCreateInput, ticketUncheckedCreateInput>
  }

  /**
   * ticket createMany
   */
  export type ticketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tickets.
     */
    data: ticketCreateManyInput | ticketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ticket createManyAndReturn
   */
  export type ticketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * The data used to create many tickets.
     */
    data: ticketCreateManyInput | ticketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ticket update
   */
  export type ticketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * The data needed to update a ticket.
     */
    data: XOR<ticketUpdateInput, ticketUncheckedUpdateInput>
    /**
     * Choose, which ticket to update.
     */
    where: ticketWhereUniqueInput
  }

  /**
   * ticket updateMany
   */
  export type ticketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tickets.
     */
    data: XOR<ticketUpdateManyMutationInput, ticketUncheckedUpdateManyInput>
    /**
     * Filter which tickets to update
     */
    where?: ticketWhereInput
    /**
     * Limit how many tickets to update.
     */
    limit?: number
  }

  /**
   * ticket updateManyAndReturn
   */
  export type ticketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * The data used to update tickets.
     */
    data: XOR<ticketUpdateManyMutationInput, ticketUncheckedUpdateManyInput>
    /**
     * Filter which tickets to update
     */
    where?: ticketWhereInput
    /**
     * Limit how many tickets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ticket upsert
   */
  export type ticketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * The filter to search for the ticket to update in case it exists.
     */
    where: ticketWhereUniqueInput
    /**
     * In case the ticket found by the `where` argument doesn't exist, create a new ticket with this data.
     */
    create: XOR<ticketCreateInput, ticketUncheckedCreateInput>
    /**
     * In case the ticket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ticketUpdateInput, ticketUncheckedUpdateInput>
  }

  /**
   * ticket delete
   */
  export type ticketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * Filter which ticket to delete.
     */
    where: ticketWhereUniqueInput
  }

  /**
   * ticket deleteMany
   */
  export type ticketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tickets to delete
     */
    where?: ticketWhereInput
    /**
     * Limit how many tickets to delete.
     */
    limit?: number
  }

  /**
   * ticket.transferredFrom
   */
  export type ticket$transferredFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }

  /**
   * ticket.payment
   */
  export type ticket$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    where?: paymentWhereInput
  }

  /**
   * ticket without action
   */
  export type ticketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket
     */
    omit?: ticketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
  }


  /**
   * Model rrppAssignment
   */

  export type AggregateRrppAssignment = {
    _count: RrppAssignmentCountAggregateOutputType | null
    _avg: RrppAssignmentAvgAggregateOutputType | null
    _sum: RrppAssignmentSumAggregateOutputType | null
    _min: RrppAssignmentMinAggregateOutputType | null
    _max: RrppAssignmentMaxAggregateOutputType | null
  }

  export type RrppAssignmentAvgAggregateOutputType = {
    eventId: number | null
    commissionRate: Decimal | null
    freesGranted: number | null
  }

  export type RrppAssignmentSumAggregateOutputType = {
    eventId: number | null
    commissionRate: Decimal | null
    freesGranted: number | null
  }

  export type RrppAssignmentMinAggregateOutputType = {
    rrppUserId: string | null
    eventId: number | null
    commissionRate: Decimal | null
    freesGranted: number | null
  }

  export type RrppAssignmentMaxAggregateOutputType = {
    rrppUserId: string | null
    eventId: number | null
    commissionRate: Decimal | null
    freesGranted: number | null
  }

  export type RrppAssignmentCountAggregateOutputType = {
    rrppUserId: number
    eventId: number
    commissionRate: number
    freesGranted: number
    _all: number
  }


  export type RrppAssignmentAvgAggregateInputType = {
    eventId?: true
    commissionRate?: true
    freesGranted?: true
  }

  export type RrppAssignmentSumAggregateInputType = {
    eventId?: true
    commissionRate?: true
    freesGranted?: true
  }

  export type RrppAssignmentMinAggregateInputType = {
    rrppUserId?: true
    eventId?: true
    commissionRate?: true
    freesGranted?: true
  }

  export type RrppAssignmentMaxAggregateInputType = {
    rrppUserId?: true
    eventId?: true
    commissionRate?: true
    freesGranted?: true
  }

  export type RrppAssignmentCountAggregateInputType = {
    rrppUserId?: true
    eventId?: true
    commissionRate?: true
    freesGranted?: true
    _all?: true
  }

  export type RrppAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rrppAssignment to aggregate.
     */
    where?: rrppAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rrppAssignments to fetch.
     */
    orderBy?: rrppAssignmentOrderByWithRelationInput | rrppAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: rrppAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rrppAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rrppAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned rrppAssignments
    **/
    _count?: true | RrppAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RrppAssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RrppAssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RrppAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RrppAssignmentMaxAggregateInputType
  }

  export type GetRrppAssignmentAggregateType<T extends RrppAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateRrppAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRrppAssignment[P]>
      : GetScalarType<T[P], AggregateRrppAssignment[P]>
  }




  export type rrppAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rrppAssignmentWhereInput
    orderBy?: rrppAssignmentOrderByWithAggregationInput | rrppAssignmentOrderByWithAggregationInput[]
    by: RrppAssignmentScalarFieldEnum[] | RrppAssignmentScalarFieldEnum
    having?: rrppAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RrppAssignmentCountAggregateInputType | true
    _avg?: RrppAssignmentAvgAggregateInputType
    _sum?: RrppAssignmentSumAggregateInputType
    _min?: RrppAssignmentMinAggregateInputType
    _max?: RrppAssignmentMaxAggregateInputType
  }

  export type RrppAssignmentGroupByOutputType = {
    rrppUserId: string
    eventId: number
    commissionRate: Decimal
    freesGranted: number
    _count: RrppAssignmentCountAggregateOutputType | null
    _avg: RrppAssignmentAvgAggregateOutputType | null
    _sum: RrppAssignmentSumAggregateOutputType | null
    _min: RrppAssignmentMinAggregateOutputType | null
    _max: RrppAssignmentMaxAggregateOutputType | null
  }

  type GetRrppAssignmentGroupByPayload<T extends rrppAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RrppAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RrppAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RrppAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], RrppAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type rrppAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    rrppUserId?: boolean
    eventId?: boolean
    commissionRate?: boolean
    freesGranted?: boolean
    rrppUser?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rrppAssignment"]>

  export type rrppAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    rrppUserId?: boolean
    eventId?: boolean
    commissionRate?: boolean
    freesGranted?: boolean
    rrppUser?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rrppAssignment"]>

  export type rrppAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    rrppUserId?: boolean
    eventId?: boolean
    commissionRate?: boolean
    freesGranted?: boolean
    rrppUser?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rrppAssignment"]>

  export type rrppAssignmentSelectScalar = {
    rrppUserId?: boolean
    eventId?: boolean
    commissionRate?: boolean
    freesGranted?: boolean
  }

  export type rrppAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"rrppUserId" | "eventId" | "commissionRate" | "freesGranted", ExtArgs["result"]["rrppAssignment"]>
  export type rrppAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rrppUser?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }
  export type rrppAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rrppUser?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }
  export type rrppAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rrppUser?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }

  export type $rrppAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "rrppAssignment"
    objects: {
      rrppUser: Prisma.$userPayload<ExtArgs>
      event: Prisma.$eventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      rrppUserId: string
      eventId: number
      commissionRate: Prisma.Decimal
      freesGranted: number
    }, ExtArgs["result"]["rrppAssignment"]>
    composites: {}
  }

  type rrppAssignmentGetPayload<S extends boolean | null | undefined | rrppAssignmentDefaultArgs> = $Result.GetResult<Prisma.$rrppAssignmentPayload, S>

  type rrppAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<rrppAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RrppAssignmentCountAggregateInputType | true
    }

  export interface rrppAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['rrppAssignment'], meta: { name: 'rrppAssignment' } }
    /**
     * Find zero or one RrppAssignment that matches the filter.
     * @param {rrppAssignmentFindUniqueArgs} args - Arguments to find a RrppAssignment
     * @example
     * // Get one RrppAssignment
     * const rrppAssignment = await prisma.rrppAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends rrppAssignmentFindUniqueArgs>(args: SelectSubset<T, rrppAssignmentFindUniqueArgs<ExtArgs>>): Prisma__rrppAssignmentClient<$Result.GetResult<Prisma.$rrppAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RrppAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {rrppAssignmentFindUniqueOrThrowArgs} args - Arguments to find a RrppAssignment
     * @example
     * // Get one RrppAssignment
     * const rrppAssignment = await prisma.rrppAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends rrppAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, rrppAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__rrppAssignmentClient<$Result.GetResult<Prisma.$rrppAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RrppAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rrppAssignmentFindFirstArgs} args - Arguments to find a RrppAssignment
     * @example
     * // Get one RrppAssignment
     * const rrppAssignment = await prisma.rrppAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends rrppAssignmentFindFirstArgs>(args?: SelectSubset<T, rrppAssignmentFindFirstArgs<ExtArgs>>): Prisma__rrppAssignmentClient<$Result.GetResult<Prisma.$rrppAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RrppAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rrppAssignmentFindFirstOrThrowArgs} args - Arguments to find a RrppAssignment
     * @example
     * // Get one RrppAssignment
     * const rrppAssignment = await prisma.rrppAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends rrppAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, rrppAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__rrppAssignmentClient<$Result.GetResult<Prisma.$rrppAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RrppAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rrppAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RrppAssignments
     * const rrppAssignments = await prisma.rrppAssignment.findMany()
     * 
     * // Get first 10 RrppAssignments
     * const rrppAssignments = await prisma.rrppAssignment.findMany({ take: 10 })
     * 
     * // Only select the `rrppUserId`
     * const rrppAssignmentWithRrppUserIdOnly = await prisma.rrppAssignment.findMany({ select: { rrppUserId: true } })
     * 
     */
    findMany<T extends rrppAssignmentFindManyArgs>(args?: SelectSubset<T, rrppAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rrppAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RrppAssignment.
     * @param {rrppAssignmentCreateArgs} args - Arguments to create a RrppAssignment.
     * @example
     * // Create one RrppAssignment
     * const RrppAssignment = await prisma.rrppAssignment.create({
     *   data: {
     *     // ... data to create a RrppAssignment
     *   }
     * })
     * 
     */
    create<T extends rrppAssignmentCreateArgs>(args: SelectSubset<T, rrppAssignmentCreateArgs<ExtArgs>>): Prisma__rrppAssignmentClient<$Result.GetResult<Prisma.$rrppAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RrppAssignments.
     * @param {rrppAssignmentCreateManyArgs} args - Arguments to create many RrppAssignments.
     * @example
     * // Create many RrppAssignments
     * const rrppAssignment = await prisma.rrppAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends rrppAssignmentCreateManyArgs>(args?: SelectSubset<T, rrppAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RrppAssignments and returns the data saved in the database.
     * @param {rrppAssignmentCreateManyAndReturnArgs} args - Arguments to create many RrppAssignments.
     * @example
     * // Create many RrppAssignments
     * const rrppAssignment = await prisma.rrppAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RrppAssignments and only return the `rrppUserId`
     * const rrppAssignmentWithRrppUserIdOnly = await prisma.rrppAssignment.createManyAndReturn({
     *   select: { rrppUserId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends rrppAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, rrppAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rrppAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RrppAssignment.
     * @param {rrppAssignmentDeleteArgs} args - Arguments to delete one RrppAssignment.
     * @example
     * // Delete one RrppAssignment
     * const RrppAssignment = await prisma.rrppAssignment.delete({
     *   where: {
     *     // ... filter to delete one RrppAssignment
     *   }
     * })
     * 
     */
    delete<T extends rrppAssignmentDeleteArgs>(args: SelectSubset<T, rrppAssignmentDeleteArgs<ExtArgs>>): Prisma__rrppAssignmentClient<$Result.GetResult<Prisma.$rrppAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RrppAssignment.
     * @param {rrppAssignmentUpdateArgs} args - Arguments to update one RrppAssignment.
     * @example
     * // Update one RrppAssignment
     * const rrppAssignment = await prisma.rrppAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends rrppAssignmentUpdateArgs>(args: SelectSubset<T, rrppAssignmentUpdateArgs<ExtArgs>>): Prisma__rrppAssignmentClient<$Result.GetResult<Prisma.$rrppAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RrppAssignments.
     * @param {rrppAssignmentDeleteManyArgs} args - Arguments to filter RrppAssignments to delete.
     * @example
     * // Delete a few RrppAssignments
     * const { count } = await prisma.rrppAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends rrppAssignmentDeleteManyArgs>(args?: SelectSubset<T, rrppAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RrppAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rrppAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RrppAssignments
     * const rrppAssignment = await prisma.rrppAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends rrppAssignmentUpdateManyArgs>(args: SelectSubset<T, rrppAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RrppAssignments and returns the data updated in the database.
     * @param {rrppAssignmentUpdateManyAndReturnArgs} args - Arguments to update many RrppAssignments.
     * @example
     * // Update many RrppAssignments
     * const rrppAssignment = await prisma.rrppAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RrppAssignments and only return the `rrppUserId`
     * const rrppAssignmentWithRrppUserIdOnly = await prisma.rrppAssignment.updateManyAndReturn({
     *   select: { rrppUserId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends rrppAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, rrppAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rrppAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RrppAssignment.
     * @param {rrppAssignmentUpsertArgs} args - Arguments to update or create a RrppAssignment.
     * @example
     * // Update or create a RrppAssignment
     * const rrppAssignment = await prisma.rrppAssignment.upsert({
     *   create: {
     *     // ... data to create a RrppAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RrppAssignment we want to update
     *   }
     * })
     */
    upsert<T extends rrppAssignmentUpsertArgs>(args: SelectSubset<T, rrppAssignmentUpsertArgs<ExtArgs>>): Prisma__rrppAssignmentClient<$Result.GetResult<Prisma.$rrppAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RrppAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rrppAssignmentCountArgs} args - Arguments to filter RrppAssignments to count.
     * @example
     * // Count the number of RrppAssignments
     * const count = await prisma.rrppAssignment.count({
     *   where: {
     *     // ... the filter for the RrppAssignments we want to count
     *   }
     * })
    **/
    count<T extends rrppAssignmentCountArgs>(
      args?: Subset<T, rrppAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RrppAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RrppAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RrppAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RrppAssignmentAggregateArgs>(args: Subset<T, RrppAssignmentAggregateArgs>): Prisma.PrismaPromise<GetRrppAssignmentAggregateType<T>>

    /**
     * Group by RrppAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rrppAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends rrppAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: rrppAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: rrppAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, rrppAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRrppAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the rrppAssignment model
   */
  readonly fields: rrppAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for rrppAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__rrppAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rrppUser<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends eventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, eventDefaultArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the rrppAssignment model
   */
  interface rrppAssignmentFieldRefs {
    readonly rrppUserId: FieldRef<"rrppAssignment", 'String'>
    readonly eventId: FieldRef<"rrppAssignment", 'Int'>
    readonly commissionRate: FieldRef<"rrppAssignment", 'Decimal'>
    readonly freesGranted: FieldRef<"rrppAssignment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * rrppAssignment findUnique
   */
  export type rrppAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rrppAssignment
     */
    select?: rrppAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rrppAssignment
     */
    omit?: rrppAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rrppAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which rrppAssignment to fetch.
     */
    where: rrppAssignmentWhereUniqueInput
  }

  /**
   * rrppAssignment findUniqueOrThrow
   */
  export type rrppAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rrppAssignment
     */
    select?: rrppAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rrppAssignment
     */
    omit?: rrppAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rrppAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which rrppAssignment to fetch.
     */
    where: rrppAssignmentWhereUniqueInput
  }

  /**
   * rrppAssignment findFirst
   */
  export type rrppAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rrppAssignment
     */
    select?: rrppAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rrppAssignment
     */
    omit?: rrppAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rrppAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which rrppAssignment to fetch.
     */
    where?: rrppAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rrppAssignments to fetch.
     */
    orderBy?: rrppAssignmentOrderByWithRelationInput | rrppAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rrppAssignments.
     */
    cursor?: rrppAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rrppAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rrppAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rrppAssignments.
     */
    distinct?: RrppAssignmentScalarFieldEnum | RrppAssignmentScalarFieldEnum[]
  }

  /**
   * rrppAssignment findFirstOrThrow
   */
  export type rrppAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rrppAssignment
     */
    select?: rrppAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rrppAssignment
     */
    omit?: rrppAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rrppAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which rrppAssignment to fetch.
     */
    where?: rrppAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rrppAssignments to fetch.
     */
    orderBy?: rrppAssignmentOrderByWithRelationInput | rrppAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rrppAssignments.
     */
    cursor?: rrppAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rrppAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rrppAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rrppAssignments.
     */
    distinct?: RrppAssignmentScalarFieldEnum | RrppAssignmentScalarFieldEnum[]
  }

  /**
   * rrppAssignment findMany
   */
  export type rrppAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rrppAssignment
     */
    select?: rrppAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rrppAssignment
     */
    omit?: rrppAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rrppAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which rrppAssignments to fetch.
     */
    where?: rrppAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rrppAssignments to fetch.
     */
    orderBy?: rrppAssignmentOrderByWithRelationInput | rrppAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing rrppAssignments.
     */
    cursor?: rrppAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rrppAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rrppAssignments.
     */
    skip?: number
    distinct?: RrppAssignmentScalarFieldEnum | RrppAssignmentScalarFieldEnum[]
  }

  /**
   * rrppAssignment create
   */
  export type rrppAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rrppAssignment
     */
    select?: rrppAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rrppAssignment
     */
    omit?: rrppAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rrppAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a rrppAssignment.
     */
    data: XOR<rrppAssignmentCreateInput, rrppAssignmentUncheckedCreateInput>
  }

  /**
   * rrppAssignment createMany
   */
  export type rrppAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many rrppAssignments.
     */
    data: rrppAssignmentCreateManyInput | rrppAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * rrppAssignment createManyAndReturn
   */
  export type rrppAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rrppAssignment
     */
    select?: rrppAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the rrppAssignment
     */
    omit?: rrppAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many rrppAssignments.
     */
    data: rrppAssignmentCreateManyInput | rrppAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rrppAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * rrppAssignment update
   */
  export type rrppAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rrppAssignment
     */
    select?: rrppAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rrppAssignment
     */
    omit?: rrppAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rrppAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a rrppAssignment.
     */
    data: XOR<rrppAssignmentUpdateInput, rrppAssignmentUncheckedUpdateInput>
    /**
     * Choose, which rrppAssignment to update.
     */
    where: rrppAssignmentWhereUniqueInput
  }

  /**
   * rrppAssignment updateMany
   */
  export type rrppAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update rrppAssignments.
     */
    data: XOR<rrppAssignmentUpdateManyMutationInput, rrppAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which rrppAssignments to update
     */
    where?: rrppAssignmentWhereInput
    /**
     * Limit how many rrppAssignments to update.
     */
    limit?: number
  }

  /**
   * rrppAssignment updateManyAndReturn
   */
  export type rrppAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rrppAssignment
     */
    select?: rrppAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the rrppAssignment
     */
    omit?: rrppAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update rrppAssignments.
     */
    data: XOR<rrppAssignmentUpdateManyMutationInput, rrppAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which rrppAssignments to update
     */
    where?: rrppAssignmentWhereInput
    /**
     * Limit how many rrppAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rrppAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * rrppAssignment upsert
   */
  export type rrppAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rrppAssignment
     */
    select?: rrppAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rrppAssignment
     */
    omit?: rrppAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rrppAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the rrppAssignment to update in case it exists.
     */
    where: rrppAssignmentWhereUniqueInput
    /**
     * In case the rrppAssignment found by the `where` argument doesn't exist, create a new rrppAssignment with this data.
     */
    create: XOR<rrppAssignmentCreateInput, rrppAssignmentUncheckedCreateInput>
    /**
     * In case the rrppAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<rrppAssignmentUpdateInput, rrppAssignmentUncheckedUpdateInput>
  }

  /**
   * rrppAssignment delete
   */
  export type rrppAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rrppAssignment
     */
    select?: rrppAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rrppAssignment
     */
    omit?: rrppAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rrppAssignmentInclude<ExtArgs> | null
    /**
     * Filter which rrppAssignment to delete.
     */
    where: rrppAssignmentWhereUniqueInput
  }

  /**
   * rrppAssignment deleteMany
   */
  export type rrppAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rrppAssignments to delete
     */
    where?: rrppAssignmentWhereInput
    /**
     * Limit how many rrppAssignments to delete.
     */
    limit?: number
  }

  /**
   * rrppAssignment without action
   */
  export type rrppAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rrppAssignment
     */
    select?: rrppAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rrppAssignment
     */
    omit?: rrppAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rrppAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model participant
   */

  export type AggregateParticipant = {
    _count: ParticipantCountAggregateOutputType | null
    _avg: ParticipantAvgAggregateOutputType | null
    _sum: ParticipantSumAggregateOutputType | null
    _min: ParticipantMinAggregateOutputType | null
    _max: ParticipantMaxAggregateOutputType | null
  }

  export type ParticipantAvgAggregateOutputType = {
    eventId: number | null
  }

  export type ParticipantSumAggregateOutputType = {
    eventId: number | null
  }

  export type ParticipantMinAggregateOutputType = {
    userId: string | null
    eventId: number | null
    viaRsvp: boolean | null
    qrCode: string | null
  }

  export type ParticipantMaxAggregateOutputType = {
    userId: string | null
    eventId: number | null
    viaRsvp: boolean | null
    qrCode: string | null
  }

  export type ParticipantCountAggregateOutputType = {
    userId: number
    eventId: number
    viaRsvp: number
    qrCode: number
    _all: number
  }


  export type ParticipantAvgAggregateInputType = {
    eventId?: true
  }

  export type ParticipantSumAggregateInputType = {
    eventId?: true
  }

  export type ParticipantMinAggregateInputType = {
    userId?: true
    eventId?: true
    viaRsvp?: true
    qrCode?: true
  }

  export type ParticipantMaxAggregateInputType = {
    userId?: true
    eventId?: true
    viaRsvp?: true
    qrCode?: true
  }

  export type ParticipantCountAggregateInputType = {
    userId?: true
    eventId?: true
    viaRsvp?: true
    qrCode?: true
    _all?: true
  }

  export type ParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which participant to aggregate.
     */
    where?: participantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participants to fetch.
     */
    orderBy?: participantOrderByWithRelationInput | participantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: participantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned participants
    **/
    _count?: true | ParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParticipantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParticipantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParticipantMaxAggregateInputType
  }

  export type GetParticipantAggregateType<T extends ParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParticipant[P]>
      : GetScalarType<T[P], AggregateParticipant[P]>
  }




  export type participantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: participantWhereInput
    orderBy?: participantOrderByWithAggregationInput | participantOrderByWithAggregationInput[]
    by: ParticipantScalarFieldEnum[] | ParticipantScalarFieldEnum
    having?: participantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParticipantCountAggregateInputType | true
    _avg?: ParticipantAvgAggregateInputType
    _sum?: ParticipantSumAggregateInputType
    _min?: ParticipantMinAggregateInputType
    _max?: ParticipantMaxAggregateInputType
  }

  export type ParticipantGroupByOutputType = {
    userId: string
    eventId: number
    viaRsvp: boolean
    qrCode: string | null
    _count: ParticipantCountAggregateOutputType | null
    _avg: ParticipantAvgAggregateOutputType | null
    _sum: ParticipantSumAggregateOutputType | null
    _min: ParticipantMinAggregateOutputType | null
    _max: ParticipantMaxAggregateOutputType | null
  }

  type GetParticipantGroupByPayload<T extends participantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], ParticipantGroupByOutputType[P]>
        }
      >
    >


  export type participantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    eventId?: boolean
    viaRsvp?: boolean
    qrCode?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["participant"]>

  export type participantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    eventId?: boolean
    viaRsvp?: boolean
    qrCode?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["participant"]>

  export type participantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    eventId?: boolean
    viaRsvp?: boolean
    qrCode?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["participant"]>

  export type participantSelectScalar = {
    userId?: boolean
    eventId?: boolean
    viaRsvp?: boolean
    qrCode?: boolean
  }

  export type participantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "eventId" | "viaRsvp" | "qrCode", ExtArgs["result"]["participant"]>
  export type participantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }
  export type participantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }
  export type participantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    event?: boolean | eventDefaultArgs<ExtArgs>
  }

  export type $participantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "participant"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      event: Prisma.$eventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      eventId: number
      viaRsvp: boolean
      qrCode: string | null
    }, ExtArgs["result"]["participant"]>
    composites: {}
  }

  type participantGetPayload<S extends boolean | null | undefined | participantDefaultArgs> = $Result.GetResult<Prisma.$participantPayload, S>

  type participantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<participantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ParticipantCountAggregateInputType | true
    }

  export interface participantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['participant'], meta: { name: 'participant' } }
    /**
     * Find zero or one Participant that matches the filter.
     * @param {participantFindUniqueArgs} args - Arguments to find a Participant
     * @example
     * // Get one Participant
     * const participant = await prisma.participant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends participantFindUniqueArgs>(args: SelectSubset<T, participantFindUniqueArgs<ExtArgs>>): Prisma__participantClient<$Result.GetResult<Prisma.$participantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Participant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {participantFindUniqueOrThrowArgs} args - Arguments to find a Participant
     * @example
     * // Get one Participant
     * const participant = await prisma.participant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends participantFindUniqueOrThrowArgs>(args: SelectSubset<T, participantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__participantClient<$Result.GetResult<Prisma.$participantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Participant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participantFindFirstArgs} args - Arguments to find a Participant
     * @example
     * // Get one Participant
     * const participant = await prisma.participant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends participantFindFirstArgs>(args?: SelectSubset<T, participantFindFirstArgs<ExtArgs>>): Prisma__participantClient<$Result.GetResult<Prisma.$participantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Participant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participantFindFirstOrThrowArgs} args - Arguments to find a Participant
     * @example
     * // Get one Participant
     * const participant = await prisma.participant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends participantFindFirstOrThrowArgs>(args?: SelectSubset<T, participantFindFirstOrThrowArgs<ExtArgs>>): Prisma__participantClient<$Result.GetResult<Prisma.$participantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Participants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Participants
     * const participants = await prisma.participant.findMany()
     * 
     * // Get first 10 Participants
     * const participants = await prisma.participant.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const participantWithUserIdOnly = await prisma.participant.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends participantFindManyArgs>(args?: SelectSubset<T, participantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$participantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Participant.
     * @param {participantCreateArgs} args - Arguments to create a Participant.
     * @example
     * // Create one Participant
     * const Participant = await prisma.participant.create({
     *   data: {
     *     // ... data to create a Participant
     *   }
     * })
     * 
     */
    create<T extends participantCreateArgs>(args: SelectSubset<T, participantCreateArgs<ExtArgs>>): Prisma__participantClient<$Result.GetResult<Prisma.$participantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Participants.
     * @param {participantCreateManyArgs} args - Arguments to create many Participants.
     * @example
     * // Create many Participants
     * const participant = await prisma.participant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends participantCreateManyArgs>(args?: SelectSubset<T, participantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Participants and returns the data saved in the database.
     * @param {participantCreateManyAndReturnArgs} args - Arguments to create many Participants.
     * @example
     * // Create many Participants
     * const participant = await prisma.participant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Participants and only return the `userId`
     * const participantWithUserIdOnly = await prisma.participant.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends participantCreateManyAndReturnArgs>(args?: SelectSubset<T, participantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$participantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Participant.
     * @param {participantDeleteArgs} args - Arguments to delete one Participant.
     * @example
     * // Delete one Participant
     * const Participant = await prisma.participant.delete({
     *   where: {
     *     // ... filter to delete one Participant
     *   }
     * })
     * 
     */
    delete<T extends participantDeleteArgs>(args: SelectSubset<T, participantDeleteArgs<ExtArgs>>): Prisma__participantClient<$Result.GetResult<Prisma.$participantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Participant.
     * @param {participantUpdateArgs} args - Arguments to update one Participant.
     * @example
     * // Update one Participant
     * const participant = await prisma.participant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends participantUpdateArgs>(args: SelectSubset<T, participantUpdateArgs<ExtArgs>>): Prisma__participantClient<$Result.GetResult<Prisma.$participantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Participants.
     * @param {participantDeleteManyArgs} args - Arguments to filter Participants to delete.
     * @example
     * // Delete a few Participants
     * const { count } = await prisma.participant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends participantDeleteManyArgs>(args?: SelectSubset<T, participantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Participants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Participants
     * const participant = await prisma.participant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends participantUpdateManyArgs>(args: SelectSubset<T, participantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Participants and returns the data updated in the database.
     * @param {participantUpdateManyAndReturnArgs} args - Arguments to update many Participants.
     * @example
     * // Update many Participants
     * const participant = await prisma.participant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Participants and only return the `userId`
     * const participantWithUserIdOnly = await prisma.participant.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends participantUpdateManyAndReturnArgs>(args: SelectSubset<T, participantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$participantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Participant.
     * @param {participantUpsertArgs} args - Arguments to update or create a Participant.
     * @example
     * // Update or create a Participant
     * const participant = await prisma.participant.upsert({
     *   create: {
     *     // ... data to create a Participant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Participant we want to update
     *   }
     * })
     */
    upsert<T extends participantUpsertArgs>(args: SelectSubset<T, participantUpsertArgs<ExtArgs>>): Prisma__participantClient<$Result.GetResult<Prisma.$participantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Participants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participantCountArgs} args - Arguments to filter Participants to count.
     * @example
     * // Count the number of Participants
     * const count = await prisma.participant.count({
     *   where: {
     *     // ... the filter for the Participants we want to count
     *   }
     * })
    **/
    count<T extends participantCountArgs>(
      args?: Subset<T, participantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Participant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParticipantAggregateArgs>(args: Subset<T, ParticipantAggregateArgs>): Prisma.PrismaPromise<GetParticipantAggregateType<T>>

    /**
     * Group by Participant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends participantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: participantGroupByArgs['orderBy'] }
        : { orderBy?: participantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, participantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the participant model
   */
  readonly fields: participantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for participant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__participantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends eventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, eventDefaultArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the participant model
   */
  interface participantFieldRefs {
    readonly userId: FieldRef<"participant", 'String'>
    readonly eventId: FieldRef<"participant", 'Int'>
    readonly viaRsvp: FieldRef<"participant", 'Boolean'>
    readonly qrCode: FieldRef<"participant", 'String'>
  }
    

  // Custom InputTypes
  /**
   * participant findUnique
   */
  export type participantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participant
     */
    select?: participantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the participant
     */
    omit?: participantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: participantInclude<ExtArgs> | null
    /**
     * Filter, which participant to fetch.
     */
    where: participantWhereUniqueInput
  }

  /**
   * participant findUniqueOrThrow
   */
  export type participantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participant
     */
    select?: participantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the participant
     */
    omit?: participantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: participantInclude<ExtArgs> | null
    /**
     * Filter, which participant to fetch.
     */
    where: participantWhereUniqueInput
  }

  /**
   * participant findFirst
   */
  export type participantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participant
     */
    select?: participantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the participant
     */
    omit?: participantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: participantInclude<ExtArgs> | null
    /**
     * Filter, which participant to fetch.
     */
    where?: participantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participants to fetch.
     */
    orderBy?: participantOrderByWithRelationInput | participantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for participants.
     */
    cursor?: participantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of participants.
     */
    distinct?: ParticipantScalarFieldEnum | ParticipantScalarFieldEnum[]
  }

  /**
   * participant findFirstOrThrow
   */
  export type participantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participant
     */
    select?: participantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the participant
     */
    omit?: participantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: participantInclude<ExtArgs> | null
    /**
     * Filter, which participant to fetch.
     */
    where?: participantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participants to fetch.
     */
    orderBy?: participantOrderByWithRelationInput | participantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for participants.
     */
    cursor?: participantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of participants.
     */
    distinct?: ParticipantScalarFieldEnum | ParticipantScalarFieldEnum[]
  }

  /**
   * participant findMany
   */
  export type participantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participant
     */
    select?: participantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the participant
     */
    omit?: participantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: participantInclude<ExtArgs> | null
    /**
     * Filter, which participants to fetch.
     */
    where?: participantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participants to fetch.
     */
    orderBy?: participantOrderByWithRelationInput | participantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing participants.
     */
    cursor?: participantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participants.
     */
    skip?: number
    distinct?: ParticipantScalarFieldEnum | ParticipantScalarFieldEnum[]
  }

  /**
   * participant create
   */
  export type participantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participant
     */
    select?: participantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the participant
     */
    omit?: participantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: participantInclude<ExtArgs> | null
    /**
     * The data needed to create a participant.
     */
    data: XOR<participantCreateInput, participantUncheckedCreateInput>
  }

  /**
   * participant createMany
   */
  export type participantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many participants.
     */
    data: participantCreateManyInput | participantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * participant createManyAndReturn
   */
  export type participantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participant
     */
    select?: participantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the participant
     */
    omit?: participantOmit<ExtArgs> | null
    /**
     * The data used to create many participants.
     */
    data: participantCreateManyInput | participantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: participantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * participant update
   */
  export type participantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participant
     */
    select?: participantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the participant
     */
    omit?: participantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: participantInclude<ExtArgs> | null
    /**
     * The data needed to update a participant.
     */
    data: XOR<participantUpdateInput, participantUncheckedUpdateInput>
    /**
     * Choose, which participant to update.
     */
    where: participantWhereUniqueInput
  }

  /**
   * participant updateMany
   */
  export type participantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update participants.
     */
    data: XOR<participantUpdateManyMutationInput, participantUncheckedUpdateManyInput>
    /**
     * Filter which participants to update
     */
    where?: participantWhereInput
    /**
     * Limit how many participants to update.
     */
    limit?: number
  }

  /**
   * participant updateManyAndReturn
   */
  export type participantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participant
     */
    select?: participantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the participant
     */
    omit?: participantOmit<ExtArgs> | null
    /**
     * The data used to update participants.
     */
    data: XOR<participantUpdateManyMutationInput, participantUncheckedUpdateManyInput>
    /**
     * Filter which participants to update
     */
    where?: participantWhereInput
    /**
     * Limit how many participants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: participantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * participant upsert
   */
  export type participantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participant
     */
    select?: participantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the participant
     */
    omit?: participantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: participantInclude<ExtArgs> | null
    /**
     * The filter to search for the participant to update in case it exists.
     */
    where: participantWhereUniqueInput
    /**
     * In case the participant found by the `where` argument doesn't exist, create a new participant with this data.
     */
    create: XOR<participantCreateInput, participantUncheckedCreateInput>
    /**
     * In case the participant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<participantUpdateInput, participantUncheckedUpdateInput>
  }

  /**
   * participant delete
   */
  export type participantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participant
     */
    select?: participantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the participant
     */
    omit?: participantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: participantInclude<ExtArgs> | null
    /**
     * Filter which participant to delete.
     */
    where: participantWhereUniqueInput
  }

  /**
   * participant deleteMany
   */
  export type participantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which participants to delete
     */
    where?: participantWhereInput
    /**
     * Limit how many participants to delete.
     */
    limit?: number
  }

  /**
   * participant without action
   */
  export type participantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participant
     */
    select?: participantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the participant
     */
    omit?: participantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: participantInclude<ExtArgs> | null
  }


  /**
   * Model log
   */

  export type AggregateLog = {
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  export type LogAvgAggregateOutputType = {
    id: number | null
  }

  export type LogSumAggregateOutputType = {
    id: number | null
  }

  export type LogMinAggregateOutputType = {
    id: number | null
    userId: string | null
    action: string | null
    timestamp: Date | null
  }

  export type LogMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    action: string | null
    timestamp: Date | null
  }

  export type LogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    timestamp: number
    details: number
    _all: number
  }


  export type LogAvgAggregateInputType = {
    id?: true
  }

  export type LogSumAggregateInputType = {
    id?: true
  }

  export type LogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    timestamp?: true
  }

  export type LogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    timestamp?: true
  }

  export type LogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    timestamp?: true
    details?: true
    _all?: true
  }

  export type LogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which log to aggregate.
     */
    where?: logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logs to fetch.
     */
    orderBy?: logOrderByWithRelationInput | logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned logs
    **/
    _count?: true | LogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogMaxAggregateInputType
  }

  export type GetLogAggregateType<T extends LogAggregateArgs> = {
        [P in keyof T & keyof AggregateLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog[P]>
      : GetScalarType<T[P], AggregateLog[P]>
  }




  export type logGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: logWhereInput
    orderBy?: logOrderByWithAggregationInput | logOrderByWithAggregationInput[]
    by: LogScalarFieldEnum[] | LogScalarFieldEnum
    having?: logScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogCountAggregateInputType | true
    _avg?: LogAvgAggregateInputType
    _sum?: LogSumAggregateInputType
    _min?: LogMinAggregateInputType
    _max?: LogMaxAggregateInputType
  }

  export type LogGroupByOutputType = {
    id: number
    userId: string | null
    action: string
    timestamp: Date
    details: JsonValue | null
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  type GetLogGroupByPayload<T extends logGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogGroupByOutputType[P]>
            : GetScalarType<T[P], LogGroupByOutputType[P]>
        }
      >
    >


  export type logSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    timestamp?: boolean
    details?: boolean
    user?: boolean | log$userArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>

  export type logSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    timestamp?: boolean
    details?: boolean
    user?: boolean | log$userArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>

  export type logSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    timestamp?: boolean
    details?: boolean
    user?: boolean | log$userArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>

  export type logSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    timestamp?: boolean
    details?: boolean
  }

  export type logOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "timestamp" | "details", ExtArgs["result"]["log"]>
  export type logInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | log$userArgs<ExtArgs>
  }
  export type logIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | log$userArgs<ExtArgs>
  }
  export type logIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | log$userArgs<ExtArgs>
  }

  export type $logPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "log"
    objects: {
      user: Prisma.$userPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string | null
      action: string
      timestamp: Date
      details: Prisma.JsonValue | null
    }, ExtArgs["result"]["log"]>
    composites: {}
  }

  type logGetPayload<S extends boolean | null | undefined | logDefaultArgs> = $Result.GetResult<Prisma.$logPayload, S>

  type logCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<logFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LogCountAggregateInputType | true
    }

  export interface logDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['log'], meta: { name: 'log' } }
    /**
     * Find zero or one Log that matches the filter.
     * @param {logFindUniqueArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends logFindUniqueArgs>(args: SelectSubset<T, logFindUniqueArgs<ExtArgs>>): Prisma__logClient<$Result.GetResult<Prisma.$logPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Log that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {logFindUniqueOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends logFindUniqueOrThrowArgs>(args: SelectSubset<T, logFindUniqueOrThrowArgs<ExtArgs>>): Prisma__logClient<$Result.GetResult<Prisma.$logPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logFindFirstArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends logFindFirstArgs>(args?: SelectSubset<T, logFindFirstArgs<ExtArgs>>): Prisma__logClient<$Result.GetResult<Prisma.$logPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logFindFirstOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends logFindFirstOrThrowArgs>(args?: SelectSubset<T, logFindFirstOrThrowArgs<ExtArgs>>): Prisma__logClient<$Result.GetResult<Prisma.$logPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.log.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logWithIdOnly = await prisma.log.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends logFindManyArgs>(args?: SelectSubset<T, logFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Log.
     * @param {logCreateArgs} args - Arguments to create a Log.
     * @example
     * // Create one Log
     * const Log = await prisma.log.create({
     *   data: {
     *     // ... data to create a Log
     *   }
     * })
     * 
     */
    create<T extends logCreateArgs>(args: SelectSubset<T, logCreateArgs<ExtArgs>>): Prisma__logClient<$Result.GetResult<Prisma.$logPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Logs.
     * @param {logCreateManyArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends logCreateManyArgs>(args?: SelectSubset<T, logCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Logs and returns the data saved in the database.
     * @param {logCreateManyAndReturnArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Logs and only return the `id`
     * const logWithIdOnly = await prisma.log.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends logCreateManyAndReturnArgs>(args?: SelectSubset<T, logCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Log.
     * @param {logDeleteArgs} args - Arguments to delete one Log.
     * @example
     * // Delete one Log
     * const Log = await prisma.log.delete({
     *   where: {
     *     // ... filter to delete one Log
     *   }
     * })
     * 
     */
    delete<T extends logDeleteArgs>(args: SelectSubset<T, logDeleteArgs<ExtArgs>>): Prisma__logClient<$Result.GetResult<Prisma.$logPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Log.
     * @param {logUpdateArgs} args - Arguments to update one Log.
     * @example
     * // Update one Log
     * const log = await prisma.log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends logUpdateArgs>(args: SelectSubset<T, logUpdateArgs<ExtArgs>>): Prisma__logClient<$Result.GetResult<Prisma.$logPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Logs.
     * @param {logDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends logDeleteManyArgs>(args?: SelectSubset<T, logDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends logUpdateManyArgs>(args: SelectSubset<T, logUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs and returns the data updated in the database.
     * @param {logUpdateManyAndReturnArgs} args - Arguments to update many Logs.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Logs and only return the `id`
     * const logWithIdOnly = await prisma.log.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends logUpdateManyAndReturnArgs>(args: SelectSubset<T, logUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Log.
     * @param {logUpsertArgs} args - Arguments to update or create a Log.
     * @example
     * // Update or create a Log
     * const log = await prisma.log.upsert({
     *   create: {
     *     // ... data to create a Log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log we want to update
     *   }
     * })
     */
    upsert<T extends logUpsertArgs>(args: SelectSubset<T, logUpsertArgs<ExtArgs>>): Prisma__logClient<$Result.GetResult<Prisma.$logPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.log.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends logCountArgs>(
      args?: Subset<T, logCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAggregateArgs>(args: Subset<T, LogAggregateArgs>): Prisma.PrismaPromise<GetLogAggregateType<T>>

    /**
     * Group by Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends logGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: logGroupByArgs['orderBy'] }
        : { orderBy?: logGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, logGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the log model
   */
  readonly fields: logFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__logClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends log$userArgs<ExtArgs> = {}>(args?: Subset<T, log$userArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the log model
   */
  interface logFieldRefs {
    readonly id: FieldRef<"log", 'Int'>
    readonly userId: FieldRef<"log", 'String'>
    readonly action: FieldRef<"log", 'String'>
    readonly timestamp: FieldRef<"log", 'DateTime'>
    readonly details: FieldRef<"log", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * log findUnique
   */
  export type logFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the log
     */
    select?: logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the log
     */
    omit?: logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logInclude<ExtArgs> | null
    /**
     * Filter, which log to fetch.
     */
    where: logWhereUniqueInput
  }

  /**
   * log findUniqueOrThrow
   */
  export type logFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the log
     */
    select?: logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the log
     */
    omit?: logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logInclude<ExtArgs> | null
    /**
     * Filter, which log to fetch.
     */
    where: logWhereUniqueInput
  }

  /**
   * log findFirst
   */
  export type logFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the log
     */
    select?: logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the log
     */
    omit?: logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logInclude<ExtArgs> | null
    /**
     * Filter, which log to fetch.
     */
    where?: logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logs to fetch.
     */
    orderBy?: logOrderByWithRelationInput | logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for logs.
     */
    cursor?: logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * log findFirstOrThrow
   */
  export type logFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the log
     */
    select?: logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the log
     */
    omit?: logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logInclude<ExtArgs> | null
    /**
     * Filter, which log to fetch.
     */
    where?: logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logs to fetch.
     */
    orderBy?: logOrderByWithRelationInput | logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for logs.
     */
    cursor?: logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * log findMany
   */
  export type logFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the log
     */
    select?: logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the log
     */
    omit?: logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logInclude<ExtArgs> | null
    /**
     * Filter, which logs to fetch.
     */
    where?: logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logs to fetch.
     */
    orderBy?: logOrderByWithRelationInput | logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing logs.
     */
    cursor?: logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logs.
     */
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * log create
   */
  export type logCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the log
     */
    select?: logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the log
     */
    omit?: logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logInclude<ExtArgs> | null
    /**
     * The data needed to create a log.
     */
    data: XOR<logCreateInput, logUncheckedCreateInput>
  }

  /**
   * log createMany
   */
  export type logCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many logs.
     */
    data: logCreateManyInput | logCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * log createManyAndReturn
   */
  export type logCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the log
     */
    select?: logSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the log
     */
    omit?: logOmit<ExtArgs> | null
    /**
     * The data used to create many logs.
     */
    data: logCreateManyInput | logCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * log update
   */
  export type logUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the log
     */
    select?: logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the log
     */
    omit?: logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logInclude<ExtArgs> | null
    /**
     * The data needed to update a log.
     */
    data: XOR<logUpdateInput, logUncheckedUpdateInput>
    /**
     * Choose, which log to update.
     */
    where: logWhereUniqueInput
  }

  /**
   * log updateMany
   */
  export type logUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update logs.
     */
    data: XOR<logUpdateManyMutationInput, logUncheckedUpdateManyInput>
    /**
     * Filter which logs to update
     */
    where?: logWhereInput
    /**
     * Limit how many logs to update.
     */
    limit?: number
  }

  /**
   * log updateManyAndReturn
   */
  export type logUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the log
     */
    select?: logSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the log
     */
    omit?: logOmit<ExtArgs> | null
    /**
     * The data used to update logs.
     */
    data: XOR<logUpdateManyMutationInput, logUncheckedUpdateManyInput>
    /**
     * Filter which logs to update
     */
    where?: logWhereInput
    /**
     * Limit how many logs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * log upsert
   */
  export type logUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the log
     */
    select?: logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the log
     */
    omit?: logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logInclude<ExtArgs> | null
    /**
     * The filter to search for the log to update in case it exists.
     */
    where: logWhereUniqueInput
    /**
     * In case the log found by the `where` argument doesn't exist, create a new log with this data.
     */
    create: XOR<logCreateInput, logUncheckedCreateInput>
    /**
     * In case the log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<logUpdateInput, logUncheckedUpdateInput>
  }

  /**
   * log delete
   */
  export type logDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the log
     */
    select?: logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the log
     */
    omit?: logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logInclude<ExtArgs> | null
    /**
     * Filter which log to delete.
     */
    where: logWhereUniqueInput
  }

  /**
   * log deleteMany
   */
  export type logDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which logs to delete
     */
    where?: logWhereInput
    /**
     * Limit how many logs to delete.
     */
    limit?: number
  }

  /**
   * log.user
   */
  export type log$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }

  /**
   * log without action
   */
  export type logDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the log
     */
    select?: logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the log
     */
    omit?: logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logInclude<ExtArgs> | null
  }


  /**
   * Model message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    senderId: string | null
    receiverId: string | null
    message: string | null
    timestamp: Date | null
    readStatus: boolean | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    senderId: string | null
    receiverId: string | null
    message: string | null
    timestamp: Date | null
    readStatus: boolean | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    senderId: number
    receiverId: number
    message: number
    timestamp: number
    readStatus: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    message?: true
    timestamp?: true
    readStatus?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    message?: true
    timestamp?: true
    readStatus?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    message?: true
    timestamp?: true
    readStatus?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which message to aggregate.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type messageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: messageWhereInput
    orderBy?: messageOrderByWithAggregationInput | messageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: messageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: number
    senderId: string
    receiverId: string
    message: string
    timestamp: Date
    readStatus: boolean
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends messageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type messageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    message?: boolean
    timestamp?: boolean
    readStatus?: boolean
    sender?: boolean | userDefaultArgs<ExtArgs>
    receiver?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type messageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    message?: boolean
    timestamp?: boolean
    readStatus?: boolean
    sender?: boolean | userDefaultArgs<ExtArgs>
    receiver?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type messageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    message?: boolean
    timestamp?: boolean
    readStatus?: boolean
    sender?: boolean | userDefaultArgs<ExtArgs>
    receiver?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type messageSelectScalar = {
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    message?: boolean
    timestamp?: boolean
    readStatus?: boolean
  }

  export type messageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "senderId" | "receiverId" | "message" | "timestamp" | "readStatus", ExtArgs["result"]["message"]>
  export type messageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | userDefaultArgs<ExtArgs>
    receiver?: boolean | userDefaultArgs<ExtArgs>
  }
  export type messageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | userDefaultArgs<ExtArgs>
    receiver?: boolean | userDefaultArgs<ExtArgs>
  }
  export type messageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | userDefaultArgs<ExtArgs>
    receiver?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $messagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "message"
    objects: {
      sender: Prisma.$userPayload<ExtArgs>
      receiver: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      senderId: string
      receiverId: string
      message: string
      timestamp: Date
      readStatus: boolean
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type messageGetPayload<S extends boolean | null | undefined | messageDefaultArgs> = $Result.GetResult<Prisma.$messagePayload, S>

  type messageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<messageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface messageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['message'], meta: { name: 'message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {messageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends messageFindUniqueArgs>(args: SelectSubset<T, messageFindUniqueArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {messageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends messageFindUniqueOrThrowArgs>(args: SelectSubset<T, messageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends messageFindFirstArgs>(args?: SelectSubset<T, messageFindFirstArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends messageFindFirstOrThrowArgs>(args?: SelectSubset<T, messageFindFirstOrThrowArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends messageFindManyArgs>(args?: SelectSubset<T, messageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {messageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends messageCreateArgs>(args: SelectSubset<T, messageCreateArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {messageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends messageCreateManyArgs>(args?: SelectSubset<T, messageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {messageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends messageCreateManyAndReturnArgs>(args?: SelectSubset<T, messageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {messageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends messageDeleteArgs>(args: SelectSubset<T, messageDeleteArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {messageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends messageUpdateArgs>(args: SelectSubset<T, messageUpdateArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {messageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends messageDeleteManyArgs>(args?: SelectSubset<T, messageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends messageUpdateManyArgs>(args: SelectSubset<T, messageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {messageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends messageUpdateManyAndReturnArgs>(args: SelectSubset<T, messageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {messageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends messageUpsertArgs>(args: SelectSubset<T, messageUpsertArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends messageCountArgs>(
      args?: Subset<T, messageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends messageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: messageGroupByArgs['orderBy'] }
        : { orderBy?: messageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, messageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the message model
   */
  readonly fields: messageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__messageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sender<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receiver<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the message model
   */
  interface messageFieldRefs {
    readonly id: FieldRef<"message", 'Int'>
    readonly senderId: FieldRef<"message", 'String'>
    readonly receiverId: FieldRef<"message", 'String'>
    readonly message: FieldRef<"message", 'String'>
    readonly timestamp: FieldRef<"message", 'DateTime'>
    readonly readStatus: FieldRef<"message", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * message findUnique
   */
  export type messageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message findUniqueOrThrow
   */
  export type messageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message findFirst
   */
  export type messageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * message findFirstOrThrow
   */
  export type messageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * message findMany
   */
  export type messageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * message create
   */
  export type messageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The data needed to create a message.
     */
    data: XOR<messageCreateInput, messageUncheckedCreateInput>
  }

  /**
   * message createMany
   */
  export type messageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many messages.
     */
    data: messageCreateManyInput | messageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * message createManyAndReturn
   */
  export type messageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * The data used to create many messages.
     */
    data: messageCreateManyInput | messageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * message update
   */
  export type messageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The data needed to update a message.
     */
    data: XOR<messageUpdateInput, messageUncheckedUpdateInput>
    /**
     * Choose, which message to update.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message updateMany
   */
  export type messageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update messages.
     */
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyInput>
    /**
     * Filter which messages to update
     */
    where?: messageWhereInput
    /**
     * Limit how many messages to update.
     */
    limit?: number
  }

  /**
   * message updateManyAndReturn
   */
  export type messageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * The data used to update messages.
     */
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyInput>
    /**
     * Filter which messages to update
     */
    where?: messageWhereInput
    /**
     * Limit how many messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * message upsert
   */
  export type messageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The filter to search for the message to update in case it exists.
     */
    where: messageWhereUniqueInput
    /**
     * In case the message found by the `where` argument doesn't exist, create a new message with this data.
     */
    create: XOR<messageCreateInput, messageUncheckedCreateInput>
    /**
     * In case the message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<messageUpdateInput, messageUncheckedUpdateInput>
  }

  /**
   * message delete
   */
  export type messageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter which message to delete.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message deleteMany
   */
  export type messageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which messages to delete
     */
    where?: messageWhereInput
    /**
     * Limit how many messages to delete.
     */
    limit?: number
  }

  /**
   * message without action
   */
  export type messageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    providerId: 'providerId',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    accessTokenExpiresAt: 'accessTokenExpiresAt',
    refreshTokenExpiresAt: 'refreshTokenExpiresAt',
    scope: 'scope',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    expiresAt: 'expiresAt',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    userId: 'userId'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    username: 'username',
    dni: 'dni',
    birthDate: 'birthDate',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    value: 'value',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    eventId: 'eventId',
    status: 'status',
    amount: 'amount',
    currency: 'currency',
    provider: 'provider',
    externalReference: 'externalReference',
    mpPreferenceId: 'mpPreferenceId',
    mpPaymentId: 'mpPaymentId',
    payerEmail: 'payerEmail',
    payerName: 'payerName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    name: 'name',
    date: 'date',
    location: 'location',
    description: 'description',
    bannerUrl: 'bannerUrl',
    status: 'status',
    producerId: 'producerId',
    capacityTotal: 'capacityTotal',
    isRsvpAllowed: 'isRsvpAllowed',
    eventGenre: 'eventGenre',
    showRemainingTickets: 'showRemainingTickets',
    createdAt: 'createdAt'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const ArtistScalarFieldEnum: {
    id: 'id',
    name: 'name',
    bio: 'bio',
    imageUrl: 'imageUrl',
    socialLinks: 'socialLinks'
  };

  export type ArtistScalarFieldEnum = (typeof ArtistScalarFieldEnum)[keyof typeof ArtistScalarFieldEnum]


  export const EventArtistScalarFieldEnum: {
    eventId: 'eventId',
    artistId: 'artistId',
    order: 'order',
    slotTime: 'slotTime',
    isHeadliner: 'isHeadliner'
  };

  export type EventArtistScalarFieldEnum = (typeof EventArtistScalarFieldEnum)[keyof typeof EventArtistScalarFieldEnum]


  export const TicketTypeScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    code: 'code',
    label: 'label',
    price: 'price',
    stockMax: 'stockMax',
    stockCurrent: 'stockCurrent',
    userMaxPerType: 'userMaxPerType',
    scanExpiration: 'scanExpiration',
    isVisible: 'isVisible',
    isDisabled: 'isDisabled'
  };

  export type TicketTypeScalarFieldEnum = (typeof TicketTypeScalarFieldEnum)[keyof typeof TicketTypeScalarFieldEnum]


  export const TicketScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    ownerId: 'ownerId',
    typeId: 'typeId',
    paymentId: 'paymentId',
    qrCode: 'qrCode',
    code: 'code',
    status: 'status',
    transferredFromId: 'transferredFromId',
    createdAt: 'createdAt'
  };

  export type TicketScalarFieldEnum = (typeof TicketScalarFieldEnum)[keyof typeof TicketScalarFieldEnum]


  export const RrppAssignmentScalarFieldEnum: {
    rrppUserId: 'rrppUserId',
    eventId: 'eventId',
    commissionRate: 'commissionRate',
    freesGranted: 'freesGranted'
  };

  export type RrppAssignmentScalarFieldEnum = (typeof RrppAssignmentScalarFieldEnum)[keyof typeof RrppAssignmentScalarFieldEnum]


  export const ParticipantScalarFieldEnum: {
    userId: 'userId',
    eventId: 'eventId',
    viaRsvp: 'viaRsvp',
    qrCode: 'qrCode'
  };

  export type ParticipantScalarFieldEnum = (typeof ParticipantScalarFieldEnum)[keyof typeof ParticipantScalarFieldEnum]


  export const LogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    timestamp: 'timestamp',
    details: 'details'
  };

  export type LogScalarFieldEnum = (typeof LogScalarFieldEnum)[keyof typeof LogScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    receiverId: 'receiverId',
    message: 'message',
    timestamp: 'timestamp',
    readStatus: 'readStatus'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'EventStatus'
   */
  export type EnumEventStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventStatus'>
    


  /**
   * Reference to a field of type 'EventStatus[]'
   */
  export type ListEnumEventStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'TicketStatus'
   */
  export type EnumTicketStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TicketStatus'>
    


  /**
   * Reference to a field of type 'TicketStatus[]'
   */
  export type ListEnumTicketStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TicketStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type accountWhereInput = {
    AND?: accountWhereInput | accountWhereInput[]
    OR?: accountWhereInput[]
    NOT?: accountWhereInput | accountWhereInput[]
    id?: StringFilter<"account"> | string
    accountId?: StringFilter<"account"> | string
    providerId?: StringFilter<"account"> | string
    userId?: StringFilter<"account"> | string
    accessToken?: StringNullableFilter<"account"> | string | null
    refreshToken?: StringNullableFilter<"account"> | string | null
    idToken?: StringNullableFilter<"account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"account"> | Date | string | null
    scope?: StringNullableFilter<"account"> | string | null
    password?: StringNullableFilter<"account"> | string | null
    createdAt?: DateTimeFilter<"account"> | Date | string
    updatedAt?: DateTimeFilter<"account"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type accountOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: userOrderByWithRelationInput
  }

  export type accountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: accountWhereInput | accountWhereInput[]
    OR?: accountWhereInput[]
    NOT?: accountWhereInput | accountWhereInput[]
    accountId?: StringFilter<"account"> | string
    providerId?: StringFilter<"account"> | string
    userId?: StringFilter<"account"> | string
    accessToken?: StringNullableFilter<"account"> | string | null
    refreshToken?: StringNullableFilter<"account"> | string | null
    idToken?: StringNullableFilter<"account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"account"> | Date | string | null
    scope?: StringNullableFilter<"account"> | string | null
    password?: StringNullableFilter<"account"> | string | null
    createdAt?: DateTimeFilter<"account"> | Date | string
    updatedAt?: DateTimeFilter<"account"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id">

  export type accountOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: accountCountOrderByAggregateInput
    _max?: accountMaxOrderByAggregateInput
    _min?: accountMinOrderByAggregateInput
  }

  export type accountScalarWhereWithAggregatesInput = {
    AND?: accountScalarWhereWithAggregatesInput | accountScalarWhereWithAggregatesInput[]
    OR?: accountScalarWhereWithAggregatesInput[]
    NOT?: accountScalarWhereWithAggregatesInput | accountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"account"> | string
    accountId?: StringWithAggregatesFilter<"account"> | string
    providerId?: StringWithAggregatesFilter<"account"> | string
    userId?: StringWithAggregatesFilter<"account"> | string
    accessToken?: StringNullableWithAggregatesFilter<"account"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"account"> | string | null
    idToken?: StringNullableWithAggregatesFilter<"account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"account"> | Date | string | null
    scope?: StringNullableWithAggregatesFilter<"account"> | string | null
    password?: StringNullableWithAggregatesFilter<"account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"account"> | Date | string
  }

  export type sessionWhereInput = {
    AND?: sessionWhereInput | sessionWhereInput[]
    OR?: sessionWhereInput[]
    NOT?: sessionWhereInput | sessionWhereInput[]
    id?: StringFilter<"session"> | string
    expiresAt?: DateTimeFilter<"session"> | Date | string
    token?: StringFilter<"session"> | string
    createdAt?: DateTimeFilter<"session"> | Date | string
    updatedAt?: DateTimeFilter<"session"> | Date | string
    ipAddress?: StringNullableFilter<"session"> | string | null
    userAgent?: StringNullableFilter<"session"> | string | null
    userId?: StringFilter<"session"> | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type sessionOrderByWithRelationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: userOrderByWithRelationInput
  }

  export type sessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: sessionWhereInput | sessionWhereInput[]
    OR?: sessionWhereInput[]
    NOT?: sessionWhereInput | sessionWhereInput[]
    expiresAt?: DateTimeFilter<"session"> | Date | string
    createdAt?: DateTimeFilter<"session"> | Date | string
    updatedAt?: DateTimeFilter<"session"> | Date | string
    ipAddress?: StringNullableFilter<"session"> | string | null
    userAgent?: StringNullableFilter<"session"> | string | null
    userId?: StringFilter<"session"> | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id" | "token">

  export type sessionOrderByWithAggregationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: sessionCountOrderByAggregateInput
    _max?: sessionMaxOrderByAggregateInput
    _min?: sessionMinOrderByAggregateInput
  }

  export type sessionScalarWhereWithAggregatesInput = {
    AND?: sessionScalarWhereWithAggregatesInput | sessionScalarWhereWithAggregatesInput[]
    OR?: sessionScalarWhereWithAggregatesInput[]
    NOT?: sessionScalarWhereWithAggregatesInput | sessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"session"> | Date | string
    token?: StringWithAggregatesFilter<"session"> | string
    createdAt?: DateTimeWithAggregatesFilter<"session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"session"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"session"> | string | null
    userId?: StringWithAggregatesFilter<"session"> | string
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: StringFilter<"user"> | string
    name?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    emailVerified?: BoolFilter<"user"> | boolean
    image?: StringNullableFilter<"user"> | string | null
    createdAt?: DateTimeFilter<"user"> | Date | string
    updatedAt?: DateTimeFilter<"user"> | Date | string
    username?: StringNullableFilter<"user"> | string | null
    dni?: StringNullableFilter<"user"> | string | null
    birthDate?: DateTimeNullableFilter<"user"> | Date | string | null
    role?: EnumRoleFilter<"user"> | $Enums.Role
    tickets?: TicketListRelationFilter
    transferredTickets?: TicketListRelationFilter
    participants?: ParticipantListRelationFilter
    rrppAssignments?: RrppAssignmentListRelationFilter
    account?: AccountListRelationFilter
    session?: SessionListRelationFilter
    logs?: LogListRelationFilter
    sentMessages?: MessageListRelationFilter
    receivedMessages?: MessageListRelationFilter
    payments?: PaymentListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrderInput | SortOrder
    dni?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    role?: SortOrder
    tickets?: ticketOrderByRelationAggregateInput
    transferredTickets?: ticketOrderByRelationAggregateInput
    participants?: participantOrderByRelationAggregateInput
    rrppAssignments?: rrppAssignmentOrderByRelationAggregateInput
    account?: accountOrderByRelationAggregateInput
    session?: sessionOrderByRelationAggregateInput
    logs?: logOrderByRelationAggregateInput
    sentMessages?: messageOrderByRelationAggregateInput
    receivedMessages?: messageOrderByRelationAggregateInput
    payments?: paymentOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    name?: StringFilter<"user"> | string
    emailVerified?: BoolFilter<"user"> | boolean
    image?: StringNullableFilter<"user"> | string | null
    createdAt?: DateTimeFilter<"user"> | Date | string
    updatedAt?: DateTimeFilter<"user"> | Date | string
    dni?: StringNullableFilter<"user"> | string | null
    birthDate?: DateTimeNullableFilter<"user"> | Date | string | null
    role?: EnumRoleFilter<"user"> | $Enums.Role
    tickets?: TicketListRelationFilter
    transferredTickets?: TicketListRelationFilter
    participants?: ParticipantListRelationFilter
    rrppAssignments?: RrppAssignmentListRelationFilter
    account?: AccountListRelationFilter
    session?: SessionListRelationFilter
    logs?: LogListRelationFilter
    sentMessages?: MessageListRelationFilter
    receivedMessages?: MessageListRelationFilter
    payments?: PaymentListRelationFilter
  }, "id" | "email" | "username">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrderInput | SortOrder
    dni?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    role?: SortOrder
    _count?: userCountOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"user"> | string
    name?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    emailVerified?: BoolWithAggregatesFilter<"user"> | boolean
    image?: StringNullableWithAggregatesFilter<"user"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
    username?: StringNullableWithAggregatesFilter<"user"> | string | null
    dni?: StringNullableWithAggregatesFilter<"user"> | string | null
    birthDate?: DateTimeNullableWithAggregatesFilter<"user"> | Date | string | null
    role?: EnumRoleWithAggregatesFilter<"user"> | $Enums.Role
  }

  export type verificationWhereInput = {
    AND?: verificationWhereInput | verificationWhereInput[]
    OR?: verificationWhereInput[]
    NOT?: verificationWhereInput | verificationWhereInput[]
    id?: StringFilter<"verification"> | string
    identifier?: StringFilter<"verification"> | string
    value?: StringFilter<"verification"> | string
    expiresAt?: DateTimeFilter<"verification"> | Date | string
    createdAt?: DateTimeNullableFilter<"verification"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"verification"> | Date | string | null
  }

  export type verificationOrderByWithRelationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
  }

  export type verificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: verificationWhereInput | verificationWhereInput[]
    OR?: verificationWhereInput[]
    NOT?: verificationWhereInput | verificationWhereInput[]
    identifier?: StringFilter<"verification"> | string
    value?: StringFilter<"verification"> | string
    expiresAt?: DateTimeFilter<"verification"> | Date | string
    createdAt?: DateTimeNullableFilter<"verification"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"verification"> | Date | string | null
  }, "id">

  export type verificationOrderByWithAggregationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: verificationCountOrderByAggregateInput
    _max?: verificationMaxOrderByAggregateInput
    _min?: verificationMinOrderByAggregateInput
  }

  export type verificationScalarWhereWithAggregatesInput = {
    AND?: verificationScalarWhereWithAggregatesInput | verificationScalarWhereWithAggregatesInput[]
    OR?: verificationScalarWhereWithAggregatesInput[]
    NOT?: verificationScalarWhereWithAggregatesInput | verificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"verification"> | string
    identifier?: StringWithAggregatesFilter<"verification"> | string
    value?: StringWithAggregatesFilter<"verification"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"verification"> | Date | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"verification"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"verification"> | Date | string | null
  }

  export type paymentWhereInput = {
    AND?: paymentWhereInput | paymentWhereInput[]
    OR?: paymentWhereInput[]
    NOT?: paymentWhereInput | paymentWhereInput[]
    id?: IntFilter<"payment"> | number
    userId?: StringFilter<"payment"> | string
    eventId?: IntFilter<"payment"> | number
    status?: EnumPaymentStatusFilter<"payment"> | $Enums.PaymentStatus
    amount?: DecimalFilter<"payment"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"payment"> | string
    provider?: StringFilter<"payment"> | string
    externalReference?: StringFilter<"payment"> | string
    mpPreferenceId?: StringNullableFilter<"payment"> | string | null
    mpPaymentId?: StringNullableFilter<"payment"> | string | null
    payerEmail?: StringNullableFilter<"payment"> | string | null
    payerName?: StringNullableFilter<"payment"> | string | null
    createdAt?: DateTimeFilter<"payment"> | Date | string
    updatedAt?: DateTimeFilter<"payment"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    event?: XOR<EventScalarRelationFilter, eventWhereInput>
    tickets?: TicketListRelationFilter
  }

  export type paymentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    provider?: SortOrder
    externalReference?: SortOrder
    mpPreferenceId?: SortOrderInput | SortOrder
    mpPaymentId?: SortOrderInput | SortOrder
    payerEmail?: SortOrderInput | SortOrder
    payerName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: userOrderByWithRelationInput
    event?: eventOrderByWithRelationInput
    tickets?: ticketOrderByRelationAggregateInput
  }

  export type paymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    externalReference?: string
    mpPaymentId?: string
    AND?: paymentWhereInput | paymentWhereInput[]
    OR?: paymentWhereInput[]
    NOT?: paymentWhereInput | paymentWhereInput[]
    userId?: StringFilter<"payment"> | string
    eventId?: IntFilter<"payment"> | number
    status?: EnumPaymentStatusFilter<"payment"> | $Enums.PaymentStatus
    amount?: DecimalFilter<"payment"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"payment"> | string
    provider?: StringFilter<"payment"> | string
    mpPreferenceId?: StringNullableFilter<"payment"> | string | null
    payerEmail?: StringNullableFilter<"payment"> | string | null
    payerName?: StringNullableFilter<"payment"> | string | null
    createdAt?: DateTimeFilter<"payment"> | Date | string
    updatedAt?: DateTimeFilter<"payment"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    event?: XOR<EventScalarRelationFilter, eventWhereInput>
    tickets?: TicketListRelationFilter
  }, "id" | "externalReference" | "mpPaymentId">

  export type paymentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    provider?: SortOrder
    externalReference?: SortOrder
    mpPreferenceId?: SortOrderInput | SortOrder
    mpPaymentId?: SortOrderInput | SortOrder
    payerEmail?: SortOrderInput | SortOrder
    payerName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: paymentCountOrderByAggregateInput
    _avg?: paymentAvgOrderByAggregateInput
    _max?: paymentMaxOrderByAggregateInput
    _min?: paymentMinOrderByAggregateInput
    _sum?: paymentSumOrderByAggregateInput
  }

  export type paymentScalarWhereWithAggregatesInput = {
    AND?: paymentScalarWhereWithAggregatesInput | paymentScalarWhereWithAggregatesInput[]
    OR?: paymentScalarWhereWithAggregatesInput[]
    NOT?: paymentScalarWhereWithAggregatesInput | paymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"payment"> | number
    userId?: StringWithAggregatesFilter<"payment"> | string
    eventId?: IntWithAggregatesFilter<"payment"> | number
    status?: EnumPaymentStatusWithAggregatesFilter<"payment"> | $Enums.PaymentStatus
    amount?: DecimalWithAggregatesFilter<"payment"> | Decimal | DecimalJsLike | number | string
    currency?: StringWithAggregatesFilter<"payment"> | string
    provider?: StringWithAggregatesFilter<"payment"> | string
    externalReference?: StringWithAggregatesFilter<"payment"> | string
    mpPreferenceId?: StringNullableWithAggregatesFilter<"payment"> | string | null
    mpPaymentId?: StringNullableWithAggregatesFilter<"payment"> | string | null
    payerEmail?: StringNullableWithAggregatesFilter<"payment"> | string | null
    payerName?: StringNullableWithAggregatesFilter<"payment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"payment"> | Date | string
  }

  export type eventWhereInput = {
    AND?: eventWhereInput | eventWhereInput[]
    OR?: eventWhereInput[]
    NOT?: eventWhereInput | eventWhereInput[]
    id?: IntFilter<"event"> | number
    name?: StringFilter<"event"> | string
    date?: DateTimeFilter<"event"> | Date | string
    location?: StringFilter<"event"> | string
    description?: StringNullableFilter<"event"> | string | null
    bannerUrl?: StringNullableFilter<"event"> | string | null
    status?: EnumEventStatusFilter<"event"> | $Enums.EventStatus
    producerId?: IntFilter<"event"> | number
    capacityTotal?: IntNullableFilter<"event"> | number | null
    isRsvpAllowed?: BoolFilter<"event"> | boolean
    eventGenre?: StringNullableFilter<"event"> | string | null
    showRemainingTickets?: BoolFilter<"event"> | boolean
    createdAt?: DateTimeFilter<"event"> | Date | string
    ticketTypes?: TicketTypeListRelationFilter
    eventArtists?: EventArtistListRelationFilter
    tickets?: TicketListRelationFilter
    participants?: ParticipantListRelationFilter
    rrppAssignments?: RrppAssignmentListRelationFilter
    payments?: PaymentListRelationFilter
  }

  export type eventOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    location?: SortOrder
    description?: SortOrderInput | SortOrder
    bannerUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    producerId?: SortOrder
    capacityTotal?: SortOrderInput | SortOrder
    isRsvpAllowed?: SortOrder
    eventGenre?: SortOrderInput | SortOrder
    showRemainingTickets?: SortOrder
    createdAt?: SortOrder
    ticketTypes?: ticketTypeOrderByRelationAggregateInput
    eventArtists?: eventArtistOrderByRelationAggregateInput
    tickets?: ticketOrderByRelationAggregateInput
    participants?: participantOrderByRelationAggregateInput
    rrppAssignments?: rrppAssignmentOrderByRelationAggregateInput
    payments?: paymentOrderByRelationAggregateInput
  }

  export type eventWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: eventWhereInput | eventWhereInput[]
    OR?: eventWhereInput[]
    NOT?: eventWhereInput | eventWhereInput[]
    name?: StringFilter<"event"> | string
    date?: DateTimeFilter<"event"> | Date | string
    location?: StringFilter<"event"> | string
    description?: StringNullableFilter<"event"> | string | null
    bannerUrl?: StringNullableFilter<"event"> | string | null
    status?: EnumEventStatusFilter<"event"> | $Enums.EventStatus
    producerId?: IntFilter<"event"> | number
    capacityTotal?: IntNullableFilter<"event"> | number | null
    isRsvpAllowed?: BoolFilter<"event"> | boolean
    eventGenre?: StringNullableFilter<"event"> | string | null
    showRemainingTickets?: BoolFilter<"event"> | boolean
    createdAt?: DateTimeFilter<"event"> | Date | string
    ticketTypes?: TicketTypeListRelationFilter
    eventArtists?: EventArtistListRelationFilter
    tickets?: TicketListRelationFilter
    participants?: ParticipantListRelationFilter
    rrppAssignments?: RrppAssignmentListRelationFilter
    payments?: PaymentListRelationFilter
  }, "id">

  export type eventOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    location?: SortOrder
    description?: SortOrderInput | SortOrder
    bannerUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    producerId?: SortOrder
    capacityTotal?: SortOrderInput | SortOrder
    isRsvpAllowed?: SortOrder
    eventGenre?: SortOrderInput | SortOrder
    showRemainingTickets?: SortOrder
    createdAt?: SortOrder
    _count?: eventCountOrderByAggregateInput
    _avg?: eventAvgOrderByAggregateInput
    _max?: eventMaxOrderByAggregateInput
    _min?: eventMinOrderByAggregateInput
    _sum?: eventSumOrderByAggregateInput
  }

  export type eventScalarWhereWithAggregatesInput = {
    AND?: eventScalarWhereWithAggregatesInput | eventScalarWhereWithAggregatesInput[]
    OR?: eventScalarWhereWithAggregatesInput[]
    NOT?: eventScalarWhereWithAggregatesInput | eventScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"event"> | number
    name?: StringWithAggregatesFilter<"event"> | string
    date?: DateTimeWithAggregatesFilter<"event"> | Date | string
    location?: StringWithAggregatesFilter<"event"> | string
    description?: StringNullableWithAggregatesFilter<"event"> | string | null
    bannerUrl?: StringNullableWithAggregatesFilter<"event"> | string | null
    status?: EnumEventStatusWithAggregatesFilter<"event"> | $Enums.EventStatus
    producerId?: IntWithAggregatesFilter<"event"> | number
    capacityTotal?: IntNullableWithAggregatesFilter<"event"> | number | null
    isRsvpAllowed?: BoolWithAggregatesFilter<"event"> | boolean
    eventGenre?: StringNullableWithAggregatesFilter<"event"> | string | null
    showRemainingTickets?: BoolWithAggregatesFilter<"event"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"event"> | Date | string
  }

  export type artistWhereInput = {
    AND?: artistWhereInput | artistWhereInput[]
    OR?: artistWhereInput[]
    NOT?: artistWhereInput | artistWhereInput[]
    id?: IntFilter<"artist"> | number
    name?: StringFilter<"artist"> | string
    bio?: StringNullableFilter<"artist"> | string | null
    imageUrl?: StringNullableFilter<"artist"> | string | null
    socialLinks?: JsonNullableFilter<"artist">
    eventArtists?: EventArtistListRelationFilter
  }

  export type artistOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    bio?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    socialLinks?: SortOrderInput | SortOrder
    eventArtists?: eventArtistOrderByRelationAggregateInput
  }

  export type artistWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: artistWhereInput | artistWhereInput[]
    OR?: artistWhereInput[]
    NOT?: artistWhereInput | artistWhereInput[]
    name?: StringFilter<"artist"> | string
    bio?: StringNullableFilter<"artist"> | string | null
    imageUrl?: StringNullableFilter<"artist"> | string | null
    socialLinks?: JsonNullableFilter<"artist">
    eventArtists?: EventArtistListRelationFilter
  }, "id">

  export type artistOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    bio?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    socialLinks?: SortOrderInput | SortOrder
    _count?: artistCountOrderByAggregateInput
    _avg?: artistAvgOrderByAggregateInput
    _max?: artistMaxOrderByAggregateInput
    _min?: artistMinOrderByAggregateInput
    _sum?: artistSumOrderByAggregateInput
  }

  export type artistScalarWhereWithAggregatesInput = {
    AND?: artistScalarWhereWithAggregatesInput | artistScalarWhereWithAggregatesInput[]
    OR?: artistScalarWhereWithAggregatesInput[]
    NOT?: artistScalarWhereWithAggregatesInput | artistScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"artist"> | number
    name?: StringWithAggregatesFilter<"artist"> | string
    bio?: StringNullableWithAggregatesFilter<"artist"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"artist"> | string | null
    socialLinks?: JsonNullableWithAggregatesFilter<"artist">
  }

  export type eventArtistWhereInput = {
    AND?: eventArtistWhereInput | eventArtistWhereInput[]
    OR?: eventArtistWhereInput[]
    NOT?: eventArtistWhereInput | eventArtistWhereInput[]
    eventId?: IntFilter<"eventArtist"> | number
    artistId?: IntFilter<"eventArtist"> | number
    order?: IntNullableFilter<"eventArtist"> | number | null
    slotTime?: StringNullableFilter<"eventArtist"> | string | null
    isHeadliner?: BoolFilter<"eventArtist"> | boolean
    artist?: XOR<ArtistScalarRelationFilter, artistWhereInput>
    event?: XOR<EventScalarRelationFilter, eventWhereInput>
  }

  export type eventArtistOrderByWithRelationInput = {
    eventId?: SortOrder
    artistId?: SortOrder
    order?: SortOrderInput | SortOrder
    slotTime?: SortOrderInput | SortOrder
    isHeadliner?: SortOrder
    artist?: artistOrderByWithRelationInput
    event?: eventOrderByWithRelationInput
  }

  export type eventArtistWhereUniqueInput = Prisma.AtLeast<{
    eventId_artistId?: eventArtistEventIdArtistIdCompoundUniqueInput
    AND?: eventArtistWhereInput | eventArtistWhereInput[]
    OR?: eventArtistWhereInput[]
    NOT?: eventArtistWhereInput | eventArtistWhereInput[]
    eventId?: IntFilter<"eventArtist"> | number
    artistId?: IntFilter<"eventArtist"> | number
    order?: IntNullableFilter<"eventArtist"> | number | null
    slotTime?: StringNullableFilter<"eventArtist"> | string | null
    isHeadliner?: BoolFilter<"eventArtist"> | boolean
    artist?: XOR<ArtistScalarRelationFilter, artistWhereInput>
    event?: XOR<EventScalarRelationFilter, eventWhereInput>
  }, "eventId_artistId">

  export type eventArtistOrderByWithAggregationInput = {
    eventId?: SortOrder
    artistId?: SortOrder
    order?: SortOrderInput | SortOrder
    slotTime?: SortOrderInput | SortOrder
    isHeadliner?: SortOrder
    _count?: eventArtistCountOrderByAggregateInput
    _avg?: eventArtistAvgOrderByAggregateInput
    _max?: eventArtistMaxOrderByAggregateInput
    _min?: eventArtistMinOrderByAggregateInput
    _sum?: eventArtistSumOrderByAggregateInput
  }

  export type eventArtistScalarWhereWithAggregatesInput = {
    AND?: eventArtistScalarWhereWithAggregatesInput | eventArtistScalarWhereWithAggregatesInput[]
    OR?: eventArtistScalarWhereWithAggregatesInput[]
    NOT?: eventArtistScalarWhereWithAggregatesInput | eventArtistScalarWhereWithAggregatesInput[]
    eventId?: IntWithAggregatesFilter<"eventArtist"> | number
    artistId?: IntWithAggregatesFilter<"eventArtist"> | number
    order?: IntNullableWithAggregatesFilter<"eventArtist"> | number | null
    slotTime?: StringNullableWithAggregatesFilter<"eventArtist"> | string | null
    isHeadliner?: BoolWithAggregatesFilter<"eventArtist"> | boolean
  }

  export type ticketTypeWhereInput = {
    AND?: ticketTypeWhereInput | ticketTypeWhereInput[]
    OR?: ticketTypeWhereInput[]
    NOT?: ticketTypeWhereInput | ticketTypeWhereInput[]
    id?: IntFilter<"ticketType"> | number
    eventId?: IntFilter<"ticketType"> | number
    code?: StringFilter<"ticketType"> | string
    label?: StringFilter<"ticketType"> | string
    price?: DecimalFilter<"ticketType"> | Decimal | DecimalJsLike | number | string
    stockMax?: IntFilter<"ticketType"> | number
    stockCurrent?: IntFilter<"ticketType"> | number
    userMaxPerType?: IntFilter<"ticketType"> | number
    scanExpiration?: DateTimeNullableFilter<"ticketType"> | Date | string | null
    isVisible?: BoolFilter<"ticketType"> | boolean
    isDisabled?: BoolFilter<"ticketType"> | boolean
    event?: XOR<EventScalarRelationFilter, eventWhereInput>
    tickets?: TicketListRelationFilter
  }

  export type ticketTypeOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    code?: SortOrder
    label?: SortOrder
    price?: SortOrder
    stockMax?: SortOrder
    stockCurrent?: SortOrder
    userMaxPerType?: SortOrder
    scanExpiration?: SortOrderInput | SortOrder
    isVisible?: SortOrder
    isDisabled?: SortOrder
    event?: eventOrderByWithRelationInput
    tickets?: ticketOrderByRelationAggregateInput
  }

  export type ticketTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    eventId_code?: ticketTypeEventIdCodeCompoundUniqueInput
    AND?: ticketTypeWhereInput | ticketTypeWhereInput[]
    OR?: ticketTypeWhereInput[]
    NOT?: ticketTypeWhereInput | ticketTypeWhereInput[]
    eventId?: IntFilter<"ticketType"> | number
    code?: StringFilter<"ticketType"> | string
    label?: StringFilter<"ticketType"> | string
    price?: DecimalFilter<"ticketType"> | Decimal | DecimalJsLike | number | string
    stockMax?: IntFilter<"ticketType"> | number
    stockCurrent?: IntFilter<"ticketType"> | number
    userMaxPerType?: IntFilter<"ticketType"> | number
    scanExpiration?: DateTimeNullableFilter<"ticketType"> | Date | string | null
    isVisible?: BoolFilter<"ticketType"> | boolean
    isDisabled?: BoolFilter<"ticketType"> | boolean
    event?: XOR<EventScalarRelationFilter, eventWhereInput>
    tickets?: TicketListRelationFilter
  }, "id" | "eventId_code">

  export type ticketTypeOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    code?: SortOrder
    label?: SortOrder
    price?: SortOrder
    stockMax?: SortOrder
    stockCurrent?: SortOrder
    userMaxPerType?: SortOrder
    scanExpiration?: SortOrderInput | SortOrder
    isVisible?: SortOrder
    isDisabled?: SortOrder
    _count?: ticketTypeCountOrderByAggregateInput
    _avg?: ticketTypeAvgOrderByAggregateInput
    _max?: ticketTypeMaxOrderByAggregateInput
    _min?: ticketTypeMinOrderByAggregateInput
    _sum?: ticketTypeSumOrderByAggregateInput
  }

  export type ticketTypeScalarWhereWithAggregatesInput = {
    AND?: ticketTypeScalarWhereWithAggregatesInput | ticketTypeScalarWhereWithAggregatesInput[]
    OR?: ticketTypeScalarWhereWithAggregatesInput[]
    NOT?: ticketTypeScalarWhereWithAggregatesInput | ticketTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ticketType"> | number
    eventId?: IntWithAggregatesFilter<"ticketType"> | number
    code?: StringWithAggregatesFilter<"ticketType"> | string
    label?: StringWithAggregatesFilter<"ticketType"> | string
    price?: DecimalWithAggregatesFilter<"ticketType"> | Decimal | DecimalJsLike | number | string
    stockMax?: IntWithAggregatesFilter<"ticketType"> | number
    stockCurrent?: IntWithAggregatesFilter<"ticketType"> | number
    userMaxPerType?: IntWithAggregatesFilter<"ticketType"> | number
    scanExpiration?: DateTimeNullableWithAggregatesFilter<"ticketType"> | Date | string | null
    isVisible?: BoolWithAggregatesFilter<"ticketType"> | boolean
    isDisabled?: BoolWithAggregatesFilter<"ticketType"> | boolean
  }

  export type ticketWhereInput = {
    AND?: ticketWhereInput | ticketWhereInput[]
    OR?: ticketWhereInput[]
    NOT?: ticketWhereInput | ticketWhereInput[]
    id?: IntFilter<"ticket"> | number
    eventId?: IntFilter<"ticket"> | number
    ownerId?: StringFilter<"ticket"> | string
    typeId?: IntFilter<"ticket"> | number
    paymentId?: IntNullableFilter<"ticket"> | number | null
    qrCode?: StringFilter<"ticket"> | string
    code?: StringNullableFilter<"ticket"> | string | null
    status?: EnumTicketStatusFilter<"ticket"> | $Enums.TicketStatus
    transferredFromId?: StringNullableFilter<"ticket"> | string | null
    createdAt?: DateTimeFilter<"ticket"> | Date | string
    event?: XOR<EventScalarRelationFilter, eventWhereInput>
    owner?: XOR<UserScalarRelationFilter, userWhereInput>
    type?: XOR<TicketTypeScalarRelationFilter, ticketTypeWhereInput>
    transferredFrom?: XOR<UserNullableScalarRelationFilter, userWhereInput> | null
    payment?: XOR<PaymentNullableScalarRelationFilter, paymentWhereInput> | null
  }

  export type ticketOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    ownerId?: SortOrder
    typeId?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    qrCode?: SortOrder
    code?: SortOrderInput | SortOrder
    status?: SortOrder
    transferredFromId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    event?: eventOrderByWithRelationInput
    owner?: userOrderByWithRelationInput
    type?: ticketTypeOrderByWithRelationInput
    transferredFrom?: userOrderByWithRelationInput
    payment?: paymentOrderByWithRelationInput
  }

  export type ticketWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    qrCode?: string
    code?: string
    AND?: ticketWhereInput | ticketWhereInput[]
    OR?: ticketWhereInput[]
    NOT?: ticketWhereInput | ticketWhereInput[]
    eventId?: IntFilter<"ticket"> | number
    ownerId?: StringFilter<"ticket"> | string
    typeId?: IntFilter<"ticket"> | number
    paymentId?: IntNullableFilter<"ticket"> | number | null
    status?: EnumTicketStatusFilter<"ticket"> | $Enums.TicketStatus
    transferredFromId?: StringNullableFilter<"ticket"> | string | null
    createdAt?: DateTimeFilter<"ticket"> | Date | string
    event?: XOR<EventScalarRelationFilter, eventWhereInput>
    owner?: XOR<UserScalarRelationFilter, userWhereInput>
    type?: XOR<TicketTypeScalarRelationFilter, ticketTypeWhereInput>
    transferredFrom?: XOR<UserNullableScalarRelationFilter, userWhereInput> | null
    payment?: XOR<PaymentNullableScalarRelationFilter, paymentWhereInput> | null
  }, "id" | "qrCode" | "code">

  export type ticketOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    ownerId?: SortOrder
    typeId?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    qrCode?: SortOrder
    code?: SortOrderInput | SortOrder
    status?: SortOrder
    transferredFromId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ticketCountOrderByAggregateInput
    _avg?: ticketAvgOrderByAggregateInput
    _max?: ticketMaxOrderByAggregateInput
    _min?: ticketMinOrderByAggregateInput
    _sum?: ticketSumOrderByAggregateInput
  }

  export type ticketScalarWhereWithAggregatesInput = {
    AND?: ticketScalarWhereWithAggregatesInput | ticketScalarWhereWithAggregatesInput[]
    OR?: ticketScalarWhereWithAggregatesInput[]
    NOT?: ticketScalarWhereWithAggregatesInput | ticketScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ticket"> | number
    eventId?: IntWithAggregatesFilter<"ticket"> | number
    ownerId?: StringWithAggregatesFilter<"ticket"> | string
    typeId?: IntWithAggregatesFilter<"ticket"> | number
    paymentId?: IntNullableWithAggregatesFilter<"ticket"> | number | null
    qrCode?: StringWithAggregatesFilter<"ticket"> | string
    code?: StringNullableWithAggregatesFilter<"ticket"> | string | null
    status?: EnumTicketStatusWithAggregatesFilter<"ticket"> | $Enums.TicketStatus
    transferredFromId?: StringNullableWithAggregatesFilter<"ticket"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ticket"> | Date | string
  }

  export type rrppAssignmentWhereInput = {
    AND?: rrppAssignmentWhereInput | rrppAssignmentWhereInput[]
    OR?: rrppAssignmentWhereInput[]
    NOT?: rrppAssignmentWhereInput | rrppAssignmentWhereInput[]
    rrppUserId?: StringFilter<"rrppAssignment"> | string
    eventId?: IntFilter<"rrppAssignment"> | number
    commissionRate?: DecimalFilter<"rrppAssignment"> | Decimal | DecimalJsLike | number | string
    freesGranted?: IntFilter<"rrppAssignment"> | number
    rrppUser?: XOR<UserScalarRelationFilter, userWhereInput>
    event?: XOR<EventScalarRelationFilter, eventWhereInput>
  }

  export type rrppAssignmentOrderByWithRelationInput = {
    rrppUserId?: SortOrder
    eventId?: SortOrder
    commissionRate?: SortOrder
    freesGranted?: SortOrder
    rrppUser?: userOrderByWithRelationInput
    event?: eventOrderByWithRelationInput
  }

  export type rrppAssignmentWhereUniqueInput = Prisma.AtLeast<{
    rrppUserId_eventId?: rrppAssignmentRrppUserIdEventIdCompoundUniqueInput
    AND?: rrppAssignmentWhereInput | rrppAssignmentWhereInput[]
    OR?: rrppAssignmentWhereInput[]
    NOT?: rrppAssignmentWhereInput | rrppAssignmentWhereInput[]
    rrppUserId?: StringFilter<"rrppAssignment"> | string
    eventId?: IntFilter<"rrppAssignment"> | number
    commissionRate?: DecimalFilter<"rrppAssignment"> | Decimal | DecimalJsLike | number | string
    freesGranted?: IntFilter<"rrppAssignment"> | number
    rrppUser?: XOR<UserScalarRelationFilter, userWhereInput>
    event?: XOR<EventScalarRelationFilter, eventWhereInput>
  }, "rrppUserId_eventId">

  export type rrppAssignmentOrderByWithAggregationInput = {
    rrppUserId?: SortOrder
    eventId?: SortOrder
    commissionRate?: SortOrder
    freesGranted?: SortOrder
    _count?: rrppAssignmentCountOrderByAggregateInput
    _avg?: rrppAssignmentAvgOrderByAggregateInput
    _max?: rrppAssignmentMaxOrderByAggregateInput
    _min?: rrppAssignmentMinOrderByAggregateInput
    _sum?: rrppAssignmentSumOrderByAggregateInput
  }

  export type rrppAssignmentScalarWhereWithAggregatesInput = {
    AND?: rrppAssignmentScalarWhereWithAggregatesInput | rrppAssignmentScalarWhereWithAggregatesInput[]
    OR?: rrppAssignmentScalarWhereWithAggregatesInput[]
    NOT?: rrppAssignmentScalarWhereWithAggregatesInput | rrppAssignmentScalarWhereWithAggregatesInput[]
    rrppUserId?: StringWithAggregatesFilter<"rrppAssignment"> | string
    eventId?: IntWithAggregatesFilter<"rrppAssignment"> | number
    commissionRate?: DecimalWithAggregatesFilter<"rrppAssignment"> | Decimal | DecimalJsLike | number | string
    freesGranted?: IntWithAggregatesFilter<"rrppAssignment"> | number
  }

  export type participantWhereInput = {
    AND?: participantWhereInput | participantWhereInput[]
    OR?: participantWhereInput[]
    NOT?: participantWhereInput | participantWhereInput[]
    userId?: StringFilter<"participant"> | string
    eventId?: IntFilter<"participant"> | number
    viaRsvp?: BoolFilter<"participant"> | boolean
    qrCode?: StringNullableFilter<"participant"> | string | null
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    event?: XOR<EventScalarRelationFilter, eventWhereInput>
  }

  export type participantOrderByWithRelationInput = {
    userId?: SortOrder
    eventId?: SortOrder
    viaRsvp?: SortOrder
    qrCode?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
    event?: eventOrderByWithRelationInput
  }

  export type participantWhereUniqueInput = Prisma.AtLeast<{
    userId_eventId?: participantUserIdEventIdCompoundUniqueInput
    AND?: participantWhereInput | participantWhereInput[]
    OR?: participantWhereInput[]
    NOT?: participantWhereInput | participantWhereInput[]
    userId?: StringFilter<"participant"> | string
    eventId?: IntFilter<"participant"> | number
    viaRsvp?: BoolFilter<"participant"> | boolean
    qrCode?: StringNullableFilter<"participant"> | string | null
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    event?: XOR<EventScalarRelationFilter, eventWhereInput>
  }, "userId_eventId">

  export type participantOrderByWithAggregationInput = {
    userId?: SortOrder
    eventId?: SortOrder
    viaRsvp?: SortOrder
    qrCode?: SortOrderInput | SortOrder
    _count?: participantCountOrderByAggregateInput
    _avg?: participantAvgOrderByAggregateInput
    _max?: participantMaxOrderByAggregateInput
    _min?: participantMinOrderByAggregateInput
    _sum?: participantSumOrderByAggregateInput
  }

  export type participantScalarWhereWithAggregatesInput = {
    AND?: participantScalarWhereWithAggregatesInput | participantScalarWhereWithAggregatesInput[]
    OR?: participantScalarWhereWithAggregatesInput[]
    NOT?: participantScalarWhereWithAggregatesInput | participantScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"participant"> | string
    eventId?: IntWithAggregatesFilter<"participant"> | number
    viaRsvp?: BoolWithAggregatesFilter<"participant"> | boolean
    qrCode?: StringNullableWithAggregatesFilter<"participant"> | string | null
  }

  export type logWhereInput = {
    AND?: logWhereInput | logWhereInput[]
    OR?: logWhereInput[]
    NOT?: logWhereInput | logWhereInput[]
    id?: IntFilter<"log"> | number
    userId?: StringNullableFilter<"log"> | string | null
    action?: StringFilter<"log"> | string
    timestamp?: DateTimeFilter<"log"> | Date | string
    details?: JsonNullableFilter<"log">
    user?: XOR<UserNullableScalarRelationFilter, userWhereInput> | null
  }

  export type logOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    timestamp?: SortOrder
    details?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
  }

  export type logWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: logWhereInput | logWhereInput[]
    OR?: logWhereInput[]
    NOT?: logWhereInput | logWhereInput[]
    userId?: StringNullableFilter<"log"> | string | null
    action?: StringFilter<"log"> | string
    timestamp?: DateTimeFilter<"log"> | Date | string
    details?: JsonNullableFilter<"log">
    user?: XOR<UserNullableScalarRelationFilter, userWhereInput> | null
  }, "id">

  export type logOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    timestamp?: SortOrder
    details?: SortOrderInput | SortOrder
    _count?: logCountOrderByAggregateInput
    _avg?: logAvgOrderByAggregateInput
    _max?: logMaxOrderByAggregateInput
    _min?: logMinOrderByAggregateInput
    _sum?: logSumOrderByAggregateInput
  }

  export type logScalarWhereWithAggregatesInput = {
    AND?: logScalarWhereWithAggregatesInput | logScalarWhereWithAggregatesInput[]
    OR?: logScalarWhereWithAggregatesInput[]
    NOT?: logScalarWhereWithAggregatesInput | logScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"log"> | number
    userId?: StringNullableWithAggregatesFilter<"log"> | string | null
    action?: StringWithAggregatesFilter<"log"> | string
    timestamp?: DateTimeWithAggregatesFilter<"log"> | Date | string
    details?: JsonNullableWithAggregatesFilter<"log">
  }

  export type messageWhereInput = {
    AND?: messageWhereInput | messageWhereInput[]
    OR?: messageWhereInput[]
    NOT?: messageWhereInput | messageWhereInput[]
    id?: IntFilter<"message"> | number
    senderId?: StringFilter<"message"> | string
    receiverId?: StringFilter<"message"> | string
    message?: StringFilter<"message"> | string
    timestamp?: DateTimeFilter<"message"> | Date | string
    readStatus?: BoolFilter<"message"> | boolean
    sender?: XOR<UserScalarRelationFilter, userWhereInput>
    receiver?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type messageOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
    readStatus?: SortOrder
    sender?: userOrderByWithRelationInput
    receiver?: userOrderByWithRelationInput
  }

  export type messageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: messageWhereInput | messageWhereInput[]
    OR?: messageWhereInput[]
    NOT?: messageWhereInput | messageWhereInput[]
    senderId?: StringFilter<"message"> | string
    receiverId?: StringFilter<"message"> | string
    message?: StringFilter<"message"> | string
    timestamp?: DateTimeFilter<"message"> | Date | string
    readStatus?: BoolFilter<"message"> | boolean
    sender?: XOR<UserScalarRelationFilter, userWhereInput>
    receiver?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id">

  export type messageOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
    readStatus?: SortOrder
    _count?: messageCountOrderByAggregateInput
    _avg?: messageAvgOrderByAggregateInput
    _max?: messageMaxOrderByAggregateInput
    _min?: messageMinOrderByAggregateInput
    _sum?: messageSumOrderByAggregateInput
  }

  export type messageScalarWhereWithAggregatesInput = {
    AND?: messageScalarWhereWithAggregatesInput | messageScalarWhereWithAggregatesInput[]
    OR?: messageScalarWhereWithAggregatesInput[]
    NOT?: messageScalarWhereWithAggregatesInput | messageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"message"> | number
    senderId?: StringWithAggregatesFilter<"message"> | string
    receiverId?: StringWithAggregatesFilter<"message"> | string
    message?: StringWithAggregatesFilter<"message"> | string
    timestamp?: DateTimeWithAggregatesFilter<"message"> | Date | string
    readStatus?: BoolWithAggregatesFilter<"message"> | boolean
  }

  export type accountCreateInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    user: userCreateNestedOneWithoutAccountInput
  }

  export type accountUncheckedCreateInput = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type accountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutAccountNestedInput
  }

  export type accountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type accountCreateManyInput = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type accountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type accountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionCreateInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    user: userCreateNestedOneWithoutSessionInput
  }

  export type sessionUncheckedCreateInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
  }

  export type sessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneRequiredWithoutSessionNestedInput
  }

  export type sessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type sessionCreateManyInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
  }

  export type sessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type userCreateInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketCreateNestedManyWithoutTransferredFromInput
    participants?: participantCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutRrppUserInput
    account?: accountCreateNestedManyWithoutUserInput
    session?: sessionCreateNestedManyWithoutUserInput
    logs?: logCreateNestedManyWithoutUserInput
    sentMessages?: messageCreateNestedManyWithoutSenderInput
    receivedMessages?: messageCreateNestedManyWithoutReceiverInput
    payments?: paymentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketUncheckedCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketUncheckedCreateNestedManyWithoutTransferredFromInput
    participants?: participantUncheckedCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutRrppUserInput
    account?: accountUncheckedCreateNestedManyWithoutUserInput
    session?: sessionUncheckedCreateNestedManyWithoutUserInput
    logs?: logUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: messageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: messageUncheckedCreateNestedManyWithoutReceiverInput
    payments?: paymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutRrppUserNestedInput
    account?: accountUpdateManyWithoutUserNestedInput
    session?: sessionUpdateManyWithoutUserNestedInput
    logs?: logUpdateManyWithoutUserNestedInput
    sentMessages?: messageUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUpdateManyWithoutReceiverNestedInput
    payments?: paymentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUncheckedUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUncheckedUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUncheckedUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutRrppUserNestedInput
    account?: accountUncheckedUpdateManyWithoutUserNestedInput
    session?: sessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: logUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: messageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUncheckedUpdateManyWithoutReceiverNestedInput
    payments?: paymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
  }

  export type userUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type userUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type verificationCreateInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type verificationUncheckedCreateInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type verificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type verificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type verificationCreateManyInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type verificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type verificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type paymentCreateInput = {
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    provider?: string
    externalReference: string
    mpPreferenceId?: string | null
    mpPaymentId?: string | null
    payerEmail?: string | null
    payerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: userCreateNestedOneWithoutPaymentsInput
    event: eventCreateNestedOneWithoutPaymentsInput
    tickets?: ticketCreateNestedManyWithoutPaymentInput
  }

  export type paymentUncheckedCreateInput = {
    id?: number
    userId: string
    eventId: number
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    provider?: string
    externalReference: string
    mpPreferenceId?: string | null
    mpPaymentId?: string | null
    payerEmail?: string | null
    payerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tickets?: ticketUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type paymentUpdateInput = {
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    externalReference?: StringFieldUpdateOperationsInput | string
    mpPreferenceId?: NullableStringFieldUpdateOperationsInput | string | null
    mpPaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    payerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    payerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutPaymentsNestedInput
    event?: eventUpdateOneRequiredWithoutPaymentsNestedInput
    tickets?: ticketUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    externalReference?: StringFieldUpdateOperationsInput | string
    mpPreferenceId?: NullableStringFieldUpdateOperationsInput | string | null
    mpPaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    payerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    payerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: ticketUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type paymentCreateManyInput = {
    id?: number
    userId: string
    eventId: number
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    provider?: string
    externalReference: string
    mpPreferenceId?: string | null
    mpPaymentId?: string | null
    payerEmail?: string | null
    payerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type paymentUpdateManyMutationInput = {
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    externalReference?: StringFieldUpdateOperationsInput | string
    mpPreferenceId?: NullableStringFieldUpdateOperationsInput | string | null
    mpPaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    payerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    payerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    externalReference?: StringFieldUpdateOperationsInput | string
    mpPreferenceId?: NullableStringFieldUpdateOperationsInput | string | null
    mpPaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    payerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    payerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type eventCreateInput = {
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
    ticketTypes?: ticketTypeCreateNestedManyWithoutEventInput
    eventArtists?: eventArtistCreateNestedManyWithoutEventInput
    tickets?: ticketCreateNestedManyWithoutEventInput
    participants?: participantCreateNestedManyWithoutEventInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutEventInput
    payments?: paymentCreateNestedManyWithoutEventInput
  }

  export type eventUncheckedCreateInput = {
    id?: number
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
    ticketTypes?: ticketTypeUncheckedCreateNestedManyWithoutEventInput
    eventArtists?: eventArtistUncheckedCreateNestedManyWithoutEventInput
    tickets?: ticketUncheckedCreateNestedManyWithoutEventInput
    participants?: participantUncheckedCreateNestedManyWithoutEventInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutEventInput
    payments?: paymentUncheckedCreateNestedManyWithoutEventInput
  }

  export type eventUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketTypes?: ticketTypeUpdateManyWithoutEventNestedInput
    eventArtists?: eventArtistUpdateManyWithoutEventNestedInput
    tickets?: ticketUpdateManyWithoutEventNestedInput
    participants?: participantUpdateManyWithoutEventNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutEventNestedInput
    payments?: paymentUpdateManyWithoutEventNestedInput
  }

  export type eventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketTypes?: ticketTypeUncheckedUpdateManyWithoutEventNestedInput
    eventArtists?: eventArtistUncheckedUpdateManyWithoutEventNestedInput
    tickets?: ticketUncheckedUpdateManyWithoutEventNestedInput
    participants?: participantUncheckedUpdateManyWithoutEventNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutEventNestedInput
    payments?: paymentUncheckedUpdateManyWithoutEventNestedInput
  }

  export type eventCreateManyInput = {
    id?: number
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
  }

  export type eventUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type eventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type artistCreateInput = {
    name: string
    bio?: string | null
    imageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    eventArtists?: eventArtistCreateNestedManyWithoutArtistInput
  }

  export type artistUncheckedCreateInput = {
    id?: number
    name: string
    bio?: string | null
    imageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    eventArtists?: eventArtistUncheckedCreateNestedManyWithoutArtistInput
  }

  export type artistUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    eventArtists?: eventArtistUpdateManyWithoutArtistNestedInput
  }

  export type artistUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    eventArtists?: eventArtistUncheckedUpdateManyWithoutArtistNestedInput
  }

  export type artistCreateManyInput = {
    id?: number
    name: string
    bio?: string | null
    imageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
  }

  export type artistUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
  }

  export type artistUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
  }

  export type eventArtistCreateInput = {
    order?: number | null
    slotTime?: string | null
    isHeadliner?: boolean
    artist: artistCreateNestedOneWithoutEventArtistsInput
    event: eventCreateNestedOneWithoutEventArtistsInput
  }

  export type eventArtistUncheckedCreateInput = {
    eventId: number
    artistId: number
    order?: number | null
    slotTime?: string | null
    isHeadliner?: boolean
  }

  export type eventArtistUpdateInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    slotTime?: NullableStringFieldUpdateOperationsInput | string | null
    isHeadliner?: BoolFieldUpdateOperationsInput | boolean
    artist?: artistUpdateOneRequiredWithoutEventArtistsNestedInput
    event?: eventUpdateOneRequiredWithoutEventArtistsNestedInput
  }

  export type eventArtistUncheckedUpdateInput = {
    eventId?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    slotTime?: NullableStringFieldUpdateOperationsInput | string | null
    isHeadliner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type eventArtistCreateManyInput = {
    eventId: number
    artistId: number
    order?: number | null
    slotTime?: string | null
    isHeadliner?: boolean
  }

  export type eventArtistUpdateManyMutationInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    slotTime?: NullableStringFieldUpdateOperationsInput | string | null
    isHeadliner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type eventArtistUncheckedUpdateManyInput = {
    eventId?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    slotTime?: NullableStringFieldUpdateOperationsInput | string | null
    isHeadliner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ticketTypeCreateInput = {
    code: string
    label: string
    price: Decimal | DecimalJsLike | number | string
    stockMax: number
    stockCurrent: number
    userMaxPerType?: number
    scanExpiration?: Date | string | null
    isVisible?: boolean
    isDisabled?: boolean
    event: eventCreateNestedOneWithoutTicketTypesInput
    tickets?: ticketCreateNestedManyWithoutTypeInput
  }

  export type ticketTypeUncheckedCreateInput = {
    id?: number
    eventId: number
    code: string
    label: string
    price: Decimal | DecimalJsLike | number | string
    stockMax: number
    stockCurrent: number
    userMaxPerType?: number
    scanExpiration?: Date | string | null
    isVisible?: boolean
    isDisabled?: boolean
    tickets?: ticketUncheckedCreateNestedManyWithoutTypeInput
  }

  export type ticketTypeUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockMax?: IntFieldUpdateOperationsInput | number
    stockCurrent?: IntFieldUpdateOperationsInput | number
    userMaxPerType?: IntFieldUpdateOperationsInput | number
    scanExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    event?: eventUpdateOneRequiredWithoutTicketTypesNestedInput
    tickets?: ticketUpdateManyWithoutTypeNestedInput
  }

  export type ticketTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockMax?: IntFieldUpdateOperationsInput | number
    stockCurrent?: IntFieldUpdateOperationsInput | number
    userMaxPerType?: IntFieldUpdateOperationsInput | number
    scanExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    tickets?: ticketUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type ticketTypeCreateManyInput = {
    id?: number
    eventId: number
    code: string
    label: string
    price: Decimal | DecimalJsLike | number | string
    stockMax: number
    stockCurrent: number
    userMaxPerType?: number
    scanExpiration?: Date | string | null
    isVisible?: boolean
    isDisabled?: boolean
  }

  export type ticketTypeUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockMax?: IntFieldUpdateOperationsInput | number
    stockCurrent?: IntFieldUpdateOperationsInput | number
    userMaxPerType?: IntFieldUpdateOperationsInput | number
    scanExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ticketTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockMax?: IntFieldUpdateOperationsInput | number
    stockCurrent?: IntFieldUpdateOperationsInput | number
    userMaxPerType?: IntFieldUpdateOperationsInput | number
    scanExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ticketCreateInput = {
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    createdAt?: Date | string
    event: eventCreateNestedOneWithoutTicketsInput
    owner: userCreateNestedOneWithoutTicketsInput
    type: ticketTypeCreateNestedOneWithoutTicketsInput
    transferredFrom?: userCreateNestedOneWithoutTransferredTicketsInput
    payment?: paymentCreateNestedOneWithoutTicketsInput
  }

  export type ticketUncheckedCreateInput = {
    id?: number
    eventId: number
    ownerId: string
    typeId: number
    paymentId?: number | null
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    transferredFromId?: string | null
    createdAt?: Date | string
  }

  export type ticketUpdateInput = {
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: eventUpdateOneRequiredWithoutTicketsNestedInput
    owner?: userUpdateOneRequiredWithoutTicketsNestedInput
    type?: ticketTypeUpdateOneRequiredWithoutTicketsNestedInput
    transferredFrom?: userUpdateOneWithoutTransferredTicketsNestedInput
    payment?: paymentUpdateOneWithoutTicketsNestedInput
  }

  export type ticketUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    paymentId?: NullableIntFieldUpdateOperationsInput | number | null
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    transferredFromId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketCreateManyInput = {
    id?: number
    eventId: number
    ownerId: string
    typeId: number
    paymentId?: number | null
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    transferredFromId?: string | null
    createdAt?: Date | string
  }

  export type ticketUpdateManyMutationInput = {
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    paymentId?: NullableIntFieldUpdateOperationsInput | number | null
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    transferredFromId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rrppAssignmentCreateInput = {
    commissionRate?: Decimal | DecimalJsLike | number | string
    freesGranted?: number
    rrppUser: userCreateNestedOneWithoutRrppAssignmentsInput
    event: eventCreateNestedOneWithoutRrppAssignmentsInput
  }

  export type rrppAssignmentUncheckedCreateInput = {
    rrppUserId: string
    eventId: number
    commissionRate?: Decimal | DecimalJsLike | number | string
    freesGranted?: number
  }

  export type rrppAssignmentUpdateInput = {
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    freesGranted?: IntFieldUpdateOperationsInput | number
    rrppUser?: userUpdateOneRequiredWithoutRrppAssignmentsNestedInput
    event?: eventUpdateOneRequiredWithoutRrppAssignmentsNestedInput
  }

  export type rrppAssignmentUncheckedUpdateInput = {
    rrppUserId?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    freesGranted?: IntFieldUpdateOperationsInput | number
  }

  export type rrppAssignmentCreateManyInput = {
    rrppUserId: string
    eventId: number
    commissionRate?: Decimal | DecimalJsLike | number | string
    freesGranted?: number
  }

  export type rrppAssignmentUpdateManyMutationInput = {
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    freesGranted?: IntFieldUpdateOperationsInput | number
  }

  export type rrppAssignmentUncheckedUpdateManyInput = {
    rrppUserId?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    freesGranted?: IntFieldUpdateOperationsInput | number
  }

  export type participantCreateInput = {
    viaRsvp?: boolean
    qrCode?: string | null
    user: userCreateNestedOneWithoutParticipantsInput
    event: eventCreateNestedOneWithoutParticipantsInput
  }

  export type participantUncheckedCreateInput = {
    userId: string
    eventId: number
    viaRsvp?: boolean
    qrCode?: string | null
  }

  export type participantUpdateInput = {
    viaRsvp?: BoolFieldUpdateOperationsInput | boolean
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneRequiredWithoutParticipantsNestedInput
    event?: eventUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type participantUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    viaRsvp?: BoolFieldUpdateOperationsInput | boolean
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type participantCreateManyInput = {
    userId: string
    eventId: number
    viaRsvp?: boolean
    qrCode?: string | null
  }

  export type participantUpdateManyMutationInput = {
    viaRsvp?: BoolFieldUpdateOperationsInput | boolean
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type participantUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    viaRsvp?: BoolFieldUpdateOperationsInput | boolean
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type logCreateInput = {
    action: string
    timestamp?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    user?: userCreateNestedOneWithoutLogsInput
  }

  export type logUncheckedCreateInput = {
    id?: number
    userId?: string | null
    action: string
    timestamp?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type logUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    user?: userUpdateOneWithoutLogsNestedInput
  }

  export type logUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type logCreateManyInput = {
    id?: number
    userId?: string | null
    action: string
    timestamp?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type logUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type logUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type messageCreateInput = {
    message: string
    timestamp?: Date | string
    readStatus?: boolean
    sender: userCreateNestedOneWithoutSentMessagesInput
    receiver: userCreateNestedOneWithoutReceivedMessagesInput
  }

  export type messageUncheckedCreateInput = {
    id?: number
    senderId: string
    receiverId: string
    message: string
    timestamp?: Date | string
    readStatus?: boolean
  }

  export type messageUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: BoolFieldUpdateOperationsInput | boolean
    sender?: userUpdateOneRequiredWithoutSentMessagesNestedInput
    receiver?: userUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type messageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: BoolFieldUpdateOperationsInput | boolean
  }

  export type messageCreateManyInput = {
    id?: number
    senderId: string
    receiverId: string
    message: string
    timestamp?: Date | string
    readStatus?: boolean
  }

  export type messageUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: BoolFieldUpdateOperationsInput | boolean
  }

  export type messageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserScalarRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type accountCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type accountMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type accountMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type sessionCountOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
  }

  export type sessionMaxOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
  }

  export type sessionMinOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type TicketListRelationFilter = {
    every?: ticketWhereInput
    some?: ticketWhereInput
    none?: ticketWhereInput
  }

  export type ParticipantListRelationFilter = {
    every?: participantWhereInput
    some?: participantWhereInput
    none?: participantWhereInput
  }

  export type RrppAssignmentListRelationFilter = {
    every?: rrppAssignmentWhereInput
    some?: rrppAssignmentWhereInput
    none?: rrppAssignmentWhereInput
  }

  export type AccountListRelationFilter = {
    every?: accountWhereInput
    some?: accountWhereInput
    none?: accountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: sessionWhereInput
    some?: sessionWhereInput
    none?: sessionWhereInput
  }

  export type LogListRelationFilter = {
    every?: logWhereInput
    some?: logWhereInput
    none?: logWhereInput
  }

  export type MessageListRelationFilter = {
    every?: messageWhereInput
    some?: messageWhereInput
    none?: messageWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: paymentWhereInput
    some?: paymentWhereInput
    none?: paymentWhereInput
  }

  export type ticketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type participantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type rrppAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type accountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type logOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type messageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type paymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    dni?: SortOrder
    birthDate?: SortOrder
    role?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    dni?: SortOrder
    birthDate?: SortOrder
    role?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    dni?: SortOrder
    birthDate?: SortOrder
    role?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type verificationCountOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type verificationMaxOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type verificationMinOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EventScalarRelationFilter = {
    is?: eventWhereInput
    isNot?: eventWhereInput
  }

  export type paymentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    provider?: SortOrder
    externalReference?: SortOrder
    mpPreferenceId?: SortOrder
    mpPaymentId?: SortOrder
    payerEmail?: SortOrder
    payerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type paymentAvgOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    amount?: SortOrder
  }

  export type paymentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    provider?: SortOrder
    externalReference?: SortOrder
    mpPreferenceId?: SortOrder
    mpPaymentId?: SortOrder
    payerEmail?: SortOrder
    payerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type paymentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    provider?: SortOrder
    externalReference?: SortOrder
    mpPreferenceId?: SortOrder
    mpPaymentId?: SortOrder
    payerEmail?: SortOrder
    payerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type paymentSumOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    amount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumEventStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusFilter<$PrismaModel> | $Enums.EventStatus
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TicketTypeListRelationFilter = {
    every?: ticketTypeWhereInput
    some?: ticketTypeWhereInput
    none?: ticketTypeWhereInput
  }

  export type EventArtistListRelationFilter = {
    every?: eventArtistWhereInput
    some?: eventArtistWhereInput
    none?: eventArtistWhereInput
  }

  export type ticketTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type eventArtistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type eventCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    location?: SortOrder
    description?: SortOrder
    bannerUrl?: SortOrder
    status?: SortOrder
    producerId?: SortOrder
    capacityTotal?: SortOrder
    isRsvpAllowed?: SortOrder
    eventGenre?: SortOrder
    showRemainingTickets?: SortOrder
    createdAt?: SortOrder
  }

  export type eventAvgOrderByAggregateInput = {
    id?: SortOrder
    producerId?: SortOrder
    capacityTotal?: SortOrder
  }

  export type eventMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    location?: SortOrder
    description?: SortOrder
    bannerUrl?: SortOrder
    status?: SortOrder
    producerId?: SortOrder
    capacityTotal?: SortOrder
    isRsvpAllowed?: SortOrder
    eventGenre?: SortOrder
    showRemainingTickets?: SortOrder
    createdAt?: SortOrder
  }

  export type eventMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    location?: SortOrder
    description?: SortOrder
    bannerUrl?: SortOrder
    status?: SortOrder
    producerId?: SortOrder
    capacityTotal?: SortOrder
    isRsvpAllowed?: SortOrder
    eventGenre?: SortOrder
    showRemainingTickets?: SortOrder
    createdAt?: SortOrder
  }

  export type eventSumOrderByAggregateInput = {
    id?: SortOrder
    producerId?: SortOrder
    capacityTotal?: SortOrder
  }

  export type EnumEventStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusWithAggregatesFilter<$PrismaModel> | $Enums.EventStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventStatusFilter<$PrismaModel>
    _max?: NestedEnumEventStatusFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type artistCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    imageUrl?: SortOrder
    socialLinks?: SortOrder
  }

  export type artistAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type artistMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    imageUrl?: SortOrder
  }

  export type artistMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    imageUrl?: SortOrder
  }

  export type artistSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type ArtistScalarRelationFilter = {
    is?: artistWhereInput
    isNot?: artistWhereInput
  }

  export type eventArtistEventIdArtistIdCompoundUniqueInput = {
    eventId: number
    artistId: number
  }

  export type eventArtistCountOrderByAggregateInput = {
    eventId?: SortOrder
    artistId?: SortOrder
    order?: SortOrder
    slotTime?: SortOrder
    isHeadliner?: SortOrder
  }

  export type eventArtistAvgOrderByAggregateInput = {
    eventId?: SortOrder
    artistId?: SortOrder
    order?: SortOrder
  }

  export type eventArtistMaxOrderByAggregateInput = {
    eventId?: SortOrder
    artistId?: SortOrder
    order?: SortOrder
    slotTime?: SortOrder
    isHeadliner?: SortOrder
  }

  export type eventArtistMinOrderByAggregateInput = {
    eventId?: SortOrder
    artistId?: SortOrder
    order?: SortOrder
    slotTime?: SortOrder
    isHeadliner?: SortOrder
  }

  export type eventArtistSumOrderByAggregateInput = {
    eventId?: SortOrder
    artistId?: SortOrder
    order?: SortOrder
  }

  export type ticketTypeEventIdCodeCompoundUniqueInput = {
    eventId: number
    code: string
  }

  export type ticketTypeCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    code?: SortOrder
    label?: SortOrder
    price?: SortOrder
    stockMax?: SortOrder
    stockCurrent?: SortOrder
    userMaxPerType?: SortOrder
    scanExpiration?: SortOrder
    isVisible?: SortOrder
    isDisabled?: SortOrder
  }

  export type ticketTypeAvgOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    price?: SortOrder
    stockMax?: SortOrder
    stockCurrent?: SortOrder
    userMaxPerType?: SortOrder
  }

  export type ticketTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    code?: SortOrder
    label?: SortOrder
    price?: SortOrder
    stockMax?: SortOrder
    stockCurrent?: SortOrder
    userMaxPerType?: SortOrder
    scanExpiration?: SortOrder
    isVisible?: SortOrder
    isDisabled?: SortOrder
  }

  export type ticketTypeMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    code?: SortOrder
    label?: SortOrder
    price?: SortOrder
    stockMax?: SortOrder
    stockCurrent?: SortOrder
    userMaxPerType?: SortOrder
    scanExpiration?: SortOrder
    isVisible?: SortOrder
    isDisabled?: SortOrder
  }

  export type ticketTypeSumOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    price?: SortOrder
    stockMax?: SortOrder
    stockCurrent?: SortOrder
    userMaxPerType?: SortOrder
  }

  export type EnumTicketStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketStatus | EnumTicketStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTicketStatusFilter<$PrismaModel> | $Enums.TicketStatus
  }

  export type TicketTypeScalarRelationFilter = {
    is?: ticketTypeWhereInput
    isNot?: ticketTypeWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: userWhereInput | null
    isNot?: userWhereInput | null
  }

  export type PaymentNullableScalarRelationFilter = {
    is?: paymentWhereInput | null
    isNot?: paymentWhereInput | null
  }

  export type ticketCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    ownerId?: SortOrder
    typeId?: SortOrder
    paymentId?: SortOrder
    qrCode?: SortOrder
    code?: SortOrder
    status?: SortOrder
    transferredFromId?: SortOrder
    createdAt?: SortOrder
  }

  export type ticketAvgOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    typeId?: SortOrder
    paymentId?: SortOrder
  }

  export type ticketMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    ownerId?: SortOrder
    typeId?: SortOrder
    paymentId?: SortOrder
    qrCode?: SortOrder
    code?: SortOrder
    status?: SortOrder
    transferredFromId?: SortOrder
    createdAt?: SortOrder
  }

  export type ticketMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    ownerId?: SortOrder
    typeId?: SortOrder
    paymentId?: SortOrder
    qrCode?: SortOrder
    code?: SortOrder
    status?: SortOrder
    transferredFromId?: SortOrder
    createdAt?: SortOrder
  }

  export type ticketSumOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    typeId?: SortOrder
    paymentId?: SortOrder
  }

  export type EnumTicketStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketStatus | EnumTicketStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTicketStatusWithAggregatesFilter<$PrismaModel> | $Enums.TicketStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTicketStatusFilter<$PrismaModel>
    _max?: NestedEnumTicketStatusFilter<$PrismaModel>
  }

  export type rrppAssignmentRrppUserIdEventIdCompoundUniqueInput = {
    rrppUserId: string
    eventId: number
  }

  export type rrppAssignmentCountOrderByAggregateInput = {
    rrppUserId?: SortOrder
    eventId?: SortOrder
    commissionRate?: SortOrder
    freesGranted?: SortOrder
  }

  export type rrppAssignmentAvgOrderByAggregateInput = {
    eventId?: SortOrder
    commissionRate?: SortOrder
    freesGranted?: SortOrder
  }

  export type rrppAssignmentMaxOrderByAggregateInput = {
    rrppUserId?: SortOrder
    eventId?: SortOrder
    commissionRate?: SortOrder
    freesGranted?: SortOrder
  }

  export type rrppAssignmentMinOrderByAggregateInput = {
    rrppUserId?: SortOrder
    eventId?: SortOrder
    commissionRate?: SortOrder
    freesGranted?: SortOrder
  }

  export type rrppAssignmentSumOrderByAggregateInput = {
    eventId?: SortOrder
    commissionRate?: SortOrder
    freesGranted?: SortOrder
  }

  export type participantUserIdEventIdCompoundUniqueInput = {
    userId: string
    eventId: number
  }

  export type participantCountOrderByAggregateInput = {
    userId?: SortOrder
    eventId?: SortOrder
    viaRsvp?: SortOrder
    qrCode?: SortOrder
  }

  export type participantAvgOrderByAggregateInput = {
    eventId?: SortOrder
  }

  export type participantMaxOrderByAggregateInput = {
    userId?: SortOrder
    eventId?: SortOrder
    viaRsvp?: SortOrder
    qrCode?: SortOrder
  }

  export type participantMinOrderByAggregateInput = {
    userId?: SortOrder
    eventId?: SortOrder
    viaRsvp?: SortOrder
    qrCode?: SortOrder
  }

  export type participantSumOrderByAggregateInput = {
    eventId?: SortOrder
  }

  export type logCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrder
    details?: SortOrder
  }

  export type logAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type logMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrder
  }

  export type logMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrder
  }

  export type logSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type messageCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
    readStatus?: SortOrder
  }

  export type messageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type messageMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
    readStatus?: SortOrder
  }

  export type messageMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
    readStatus?: SortOrder
  }

  export type messageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userCreateNestedOneWithoutAccountInput = {
    create?: XOR<userCreateWithoutAccountInput, userUncheckedCreateWithoutAccountInput>
    connectOrCreate?: userCreateOrConnectWithoutAccountInput
    connect?: userWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type userUpdateOneRequiredWithoutAccountNestedInput = {
    create?: XOR<userCreateWithoutAccountInput, userUncheckedCreateWithoutAccountInput>
    connectOrCreate?: userCreateOrConnectWithoutAccountInput
    upsert?: userUpsertWithoutAccountInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutAccountInput, userUpdateWithoutAccountInput>, userUncheckedUpdateWithoutAccountInput>
  }

  export type userCreateNestedOneWithoutSessionInput = {
    create?: XOR<userCreateWithoutSessionInput, userUncheckedCreateWithoutSessionInput>
    connectOrCreate?: userCreateOrConnectWithoutSessionInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutSessionNestedInput = {
    create?: XOR<userCreateWithoutSessionInput, userUncheckedCreateWithoutSessionInput>
    connectOrCreate?: userCreateOrConnectWithoutSessionInput
    upsert?: userUpsertWithoutSessionInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutSessionInput, userUpdateWithoutSessionInput>, userUncheckedUpdateWithoutSessionInput>
  }

  export type ticketCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ticketCreateWithoutOwnerInput, ticketUncheckedCreateWithoutOwnerInput> | ticketCreateWithoutOwnerInput[] | ticketUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutOwnerInput | ticketCreateOrConnectWithoutOwnerInput[]
    createMany?: ticketCreateManyOwnerInputEnvelope
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
  }

  export type ticketCreateNestedManyWithoutTransferredFromInput = {
    create?: XOR<ticketCreateWithoutTransferredFromInput, ticketUncheckedCreateWithoutTransferredFromInput> | ticketCreateWithoutTransferredFromInput[] | ticketUncheckedCreateWithoutTransferredFromInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutTransferredFromInput | ticketCreateOrConnectWithoutTransferredFromInput[]
    createMany?: ticketCreateManyTransferredFromInputEnvelope
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
  }

  export type participantCreateNestedManyWithoutUserInput = {
    create?: XOR<participantCreateWithoutUserInput, participantUncheckedCreateWithoutUserInput> | participantCreateWithoutUserInput[] | participantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: participantCreateOrConnectWithoutUserInput | participantCreateOrConnectWithoutUserInput[]
    createMany?: participantCreateManyUserInputEnvelope
    connect?: participantWhereUniqueInput | participantWhereUniqueInput[]
  }

  export type rrppAssignmentCreateNestedManyWithoutRrppUserInput = {
    create?: XOR<rrppAssignmentCreateWithoutRrppUserInput, rrppAssignmentUncheckedCreateWithoutRrppUserInput> | rrppAssignmentCreateWithoutRrppUserInput[] | rrppAssignmentUncheckedCreateWithoutRrppUserInput[]
    connectOrCreate?: rrppAssignmentCreateOrConnectWithoutRrppUserInput | rrppAssignmentCreateOrConnectWithoutRrppUserInput[]
    createMany?: rrppAssignmentCreateManyRrppUserInputEnvelope
    connect?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
  }

  export type accountCreateNestedManyWithoutUserInput = {
    create?: XOR<accountCreateWithoutUserInput, accountUncheckedCreateWithoutUserInput> | accountCreateWithoutUserInput[] | accountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: accountCreateOrConnectWithoutUserInput | accountCreateOrConnectWithoutUserInput[]
    createMany?: accountCreateManyUserInputEnvelope
    connect?: accountWhereUniqueInput | accountWhereUniqueInput[]
  }

  export type sessionCreateNestedManyWithoutUserInput = {
    create?: XOR<sessionCreateWithoutUserInput, sessionUncheckedCreateWithoutUserInput> | sessionCreateWithoutUserInput[] | sessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: sessionCreateOrConnectWithoutUserInput | sessionCreateOrConnectWithoutUserInput[]
    createMany?: sessionCreateManyUserInputEnvelope
    connect?: sessionWhereUniqueInput | sessionWhereUniqueInput[]
  }

  export type logCreateNestedManyWithoutUserInput = {
    create?: XOR<logCreateWithoutUserInput, logUncheckedCreateWithoutUserInput> | logCreateWithoutUserInput[] | logUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logCreateOrConnectWithoutUserInput | logCreateOrConnectWithoutUserInput[]
    createMany?: logCreateManyUserInputEnvelope
    connect?: logWhereUniqueInput | logWhereUniqueInput[]
  }

  export type messageCreateNestedManyWithoutSenderInput = {
    create?: XOR<messageCreateWithoutSenderInput, messageUncheckedCreateWithoutSenderInput> | messageCreateWithoutSenderInput[] | messageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: messageCreateOrConnectWithoutSenderInput | messageCreateOrConnectWithoutSenderInput[]
    createMany?: messageCreateManySenderInputEnvelope
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
  }

  export type messageCreateNestedManyWithoutReceiverInput = {
    create?: XOR<messageCreateWithoutReceiverInput, messageUncheckedCreateWithoutReceiverInput> | messageCreateWithoutReceiverInput[] | messageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: messageCreateOrConnectWithoutReceiverInput | messageCreateOrConnectWithoutReceiverInput[]
    createMany?: messageCreateManyReceiverInputEnvelope
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
  }

  export type paymentCreateNestedManyWithoutUserInput = {
    create?: XOR<paymentCreateWithoutUserInput, paymentUncheckedCreateWithoutUserInput> | paymentCreateWithoutUserInput[] | paymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutUserInput | paymentCreateOrConnectWithoutUserInput[]
    createMany?: paymentCreateManyUserInputEnvelope
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
  }

  export type ticketUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ticketCreateWithoutOwnerInput, ticketUncheckedCreateWithoutOwnerInput> | ticketCreateWithoutOwnerInput[] | ticketUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutOwnerInput | ticketCreateOrConnectWithoutOwnerInput[]
    createMany?: ticketCreateManyOwnerInputEnvelope
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
  }

  export type ticketUncheckedCreateNestedManyWithoutTransferredFromInput = {
    create?: XOR<ticketCreateWithoutTransferredFromInput, ticketUncheckedCreateWithoutTransferredFromInput> | ticketCreateWithoutTransferredFromInput[] | ticketUncheckedCreateWithoutTransferredFromInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutTransferredFromInput | ticketCreateOrConnectWithoutTransferredFromInput[]
    createMany?: ticketCreateManyTransferredFromInputEnvelope
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
  }

  export type participantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<participantCreateWithoutUserInput, participantUncheckedCreateWithoutUserInput> | participantCreateWithoutUserInput[] | participantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: participantCreateOrConnectWithoutUserInput | participantCreateOrConnectWithoutUserInput[]
    createMany?: participantCreateManyUserInputEnvelope
    connect?: participantWhereUniqueInput | participantWhereUniqueInput[]
  }

  export type rrppAssignmentUncheckedCreateNestedManyWithoutRrppUserInput = {
    create?: XOR<rrppAssignmentCreateWithoutRrppUserInput, rrppAssignmentUncheckedCreateWithoutRrppUserInput> | rrppAssignmentCreateWithoutRrppUserInput[] | rrppAssignmentUncheckedCreateWithoutRrppUserInput[]
    connectOrCreate?: rrppAssignmentCreateOrConnectWithoutRrppUserInput | rrppAssignmentCreateOrConnectWithoutRrppUserInput[]
    createMany?: rrppAssignmentCreateManyRrppUserInputEnvelope
    connect?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
  }

  export type accountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<accountCreateWithoutUserInput, accountUncheckedCreateWithoutUserInput> | accountCreateWithoutUserInput[] | accountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: accountCreateOrConnectWithoutUserInput | accountCreateOrConnectWithoutUserInput[]
    createMany?: accountCreateManyUserInputEnvelope
    connect?: accountWhereUniqueInput | accountWhereUniqueInput[]
  }

  export type sessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<sessionCreateWithoutUserInput, sessionUncheckedCreateWithoutUserInput> | sessionCreateWithoutUserInput[] | sessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: sessionCreateOrConnectWithoutUserInput | sessionCreateOrConnectWithoutUserInput[]
    createMany?: sessionCreateManyUserInputEnvelope
    connect?: sessionWhereUniqueInput | sessionWhereUniqueInput[]
  }

  export type logUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<logCreateWithoutUserInput, logUncheckedCreateWithoutUserInput> | logCreateWithoutUserInput[] | logUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logCreateOrConnectWithoutUserInput | logCreateOrConnectWithoutUserInput[]
    createMany?: logCreateManyUserInputEnvelope
    connect?: logWhereUniqueInput | logWhereUniqueInput[]
  }

  export type messageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<messageCreateWithoutSenderInput, messageUncheckedCreateWithoutSenderInput> | messageCreateWithoutSenderInput[] | messageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: messageCreateOrConnectWithoutSenderInput | messageCreateOrConnectWithoutSenderInput[]
    createMany?: messageCreateManySenderInputEnvelope
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
  }

  export type messageUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<messageCreateWithoutReceiverInput, messageUncheckedCreateWithoutReceiverInput> | messageCreateWithoutReceiverInput[] | messageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: messageCreateOrConnectWithoutReceiverInput | messageCreateOrConnectWithoutReceiverInput[]
    createMany?: messageCreateManyReceiverInputEnvelope
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
  }

  export type paymentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<paymentCreateWithoutUserInput, paymentUncheckedCreateWithoutUserInput> | paymentCreateWithoutUserInput[] | paymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutUserInput | paymentCreateOrConnectWithoutUserInput[]
    createMany?: paymentCreateManyUserInputEnvelope
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type ticketUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ticketCreateWithoutOwnerInput, ticketUncheckedCreateWithoutOwnerInput> | ticketCreateWithoutOwnerInput[] | ticketUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutOwnerInput | ticketCreateOrConnectWithoutOwnerInput[]
    upsert?: ticketUpsertWithWhereUniqueWithoutOwnerInput | ticketUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ticketCreateManyOwnerInputEnvelope
    set?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    disconnect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    delete?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    update?: ticketUpdateWithWhereUniqueWithoutOwnerInput | ticketUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ticketUpdateManyWithWhereWithoutOwnerInput | ticketUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ticketScalarWhereInput | ticketScalarWhereInput[]
  }

  export type ticketUpdateManyWithoutTransferredFromNestedInput = {
    create?: XOR<ticketCreateWithoutTransferredFromInput, ticketUncheckedCreateWithoutTransferredFromInput> | ticketCreateWithoutTransferredFromInput[] | ticketUncheckedCreateWithoutTransferredFromInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutTransferredFromInput | ticketCreateOrConnectWithoutTransferredFromInput[]
    upsert?: ticketUpsertWithWhereUniqueWithoutTransferredFromInput | ticketUpsertWithWhereUniqueWithoutTransferredFromInput[]
    createMany?: ticketCreateManyTransferredFromInputEnvelope
    set?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    disconnect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    delete?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    update?: ticketUpdateWithWhereUniqueWithoutTransferredFromInput | ticketUpdateWithWhereUniqueWithoutTransferredFromInput[]
    updateMany?: ticketUpdateManyWithWhereWithoutTransferredFromInput | ticketUpdateManyWithWhereWithoutTransferredFromInput[]
    deleteMany?: ticketScalarWhereInput | ticketScalarWhereInput[]
  }

  export type participantUpdateManyWithoutUserNestedInput = {
    create?: XOR<participantCreateWithoutUserInput, participantUncheckedCreateWithoutUserInput> | participantCreateWithoutUserInput[] | participantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: participantCreateOrConnectWithoutUserInput | participantCreateOrConnectWithoutUserInput[]
    upsert?: participantUpsertWithWhereUniqueWithoutUserInput | participantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: participantCreateManyUserInputEnvelope
    set?: participantWhereUniqueInput | participantWhereUniqueInput[]
    disconnect?: participantWhereUniqueInput | participantWhereUniqueInput[]
    delete?: participantWhereUniqueInput | participantWhereUniqueInput[]
    connect?: participantWhereUniqueInput | participantWhereUniqueInput[]
    update?: participantUpdateWithWhereUniqueWithoutUserInput | participantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: participantUpdateManyWithWhereWithoutUserInput | participantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: participantScalarWhereInput | participantScalarWhereInput[]
  }

  export type rrppAssignmentUpdateManyWithoutRrppUserNestedInput = {
    create?: XOR<rrppAssignmentCreateWithoutRrppUserInput, rrppAssignmentUncheckedCreateWithoutRrppUserInput> | rrppAssignmentCreateWithoutRrppUserInput[] | rrppAssignmentUncheckedCreateWithoutRrppUserInput[]
    connectOrCreate?: rrppAssignmentCreateOrConnectWithoutRrppUserInput | rrppAssignmentCreateOrConnectWithoutRrppUserInput[]
    upsert?: rrppAssignmentUpsertWithWhereUniqueWithoutRrppUserInput | rrppAssignmentUpsertWithWhereUniqueWithoutRrppUserInput[]
    createMany?: rrppAssignmentCreateManyRrppUserInputEnvelope
    set?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    disconnect?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    delete?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    connect?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    update?: rrppAssignmentUpdateWithWhereUniqueWithoutRrppUserInput | rrppAssignmentUpdateWithWhereUniqueWithoutRrppUserInput[]
    updateMany?: rrppAssignmentUpdateManyWithWhereWithoutRrppUserInput | rrppAssignmentUpdateManyWithWhereWithoutRrppUserInput[]
    deleteMany?: rrppAssignmentScalarWhereInput | rrppAssignmentScalarWhereInput[]
  }

  export type accountUpdateManyWithoutUserNestedInput = {
    create?: XOR<accountCreateWithoutUserInput, accountUncheckedCreateWithoutUserInput> | accountCreateWithoutUserInput[] | accountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: accountCreateOrConnectWithoutUserInput | accountCreateOrConnectWithoutUserInput[]
    upsert?: accountUpsertWithWhereUniqueWithoutUserInput | accountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: accountCreateManyUserInputEnvelope
    set?: accountWhereUniqueInput | accountWhereUniqueInput[]
    disconnect?: accountWhereUniqueInput | accountWhereUniqueInput[]
    delete?: accountWhereUniqueInput | accountWhereUniqueInput[]
    connect?: accountWhereUniqueInput | accountWhereUniqueInput[]
    update?: accountUpdateWithWhereUniqueWithoutUserInput | accountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: accountUpdateManyWithWhereWithoutUserInput | accountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: accountScalarWhereInput | accountScalarWhereInput[]
  }

  export type sessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<sessionCreateWithoutUserInput, sessionUncheckedCreateWithoutUserInput> | sessionCreateWithoutUserInput[] | sessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: sessionCreateOrConnectWithoutUserInput | sessionCreateOrConnectWithoutUserInput[]
    upsert?: sessionUpsertWithWhereUniqueWithoutUserInput | sessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: sessionCreateManyUserInputEnvelope
    set?: sessionWhereUniqueInput | sessionWhereUniqueInput[]
    disconnect?: sessionWhereUniqueInput | sessionWhereUniqueInput[]
    delete?: sessionWhereUniqueInput | sessionWhereUniqueInput[]
    connect?: sessionWhereUniqueInput | sessionWhereUniqueInput[]
    update?: sessionUpdateWithWhereUniqueWithoutUserInput | sessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: sessionUpdateManyWithWhereWithoutUserInput | sessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: sessionScalarWhereInput | sessionScalarWhereInput[]
  }

  export type logUpdateManyWithoutUserNestedInput = {
    create?: XOR<logCreateWithoutUserInput, logUncheckedCreateWithoutUserInput> | logCreateWithoutUserInput[] | logUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logCreateOrConnectWithoutUserInput | logCreateOrConnectWithoutUserInput[]
    upsert?: logUpsertWithWhereUniqueWithoutUserInput | logUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: logCreateManyUserInputEnvelope
    set?: logWhereUniqueInput | logWhereUniqueInput[]
    disconnect?: logWhereUniqueInput | logWhereUniqueInput[]
    delete?: logWhereUniqueInput | logWhereUniqueInput[]
    connect?: logWhereUniqueInput | logWhereUniqueInput[]
    update?: logUpdateWithWhereUniqueWithoutUserInput | logUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: logUpdateManyWithWhereWithoutUserInput | logUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: logScalarWhereInput | logScalarWhereInput[]
  }

  export type messageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<messageCreateWithoutSenderInput, messageUncheckedCreateWithoutSenderInput> | messageCreateWithoutSenderInput[] | messageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: messageCreateOrConnectWithoutSenderInput | messageCreateOrConnectWithoutSenderInput[]
    upsert?: messageUpsertWithWhereUniqueWithoutSenderInput | messageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: messageCreateManySenderInputEnvelope
    set?: messageWhereUniqueInput | messageWhereUniqueInput[]
    disconnect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    delete?: messageWhereUniqueInput | messageWhereUniqueInput[]
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    update?: messageUpdateWithWhereUniqueWithoutSenderInput | messageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: messageUpdateManyWithWhereWithoutSenderInput | messageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: messageScalarWhereInput | messageScalarWhereInput[]
  }

  export type messageUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<messageCreateWithoutReceiverInput, messageUncheckedCreateWithoutReceiverInput> | messageCreateWithoutReceiverInput[] | messageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: messageCreateOrConnectWithoutReceiverInput | messageCreateOrConnectWithoutReceiverInput[]
    upsert?: messageUpsertWithWhereUniqueWithoutReceiverInput | messageUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: messageCreateManyReceiverInputEnvelope
    set?: messageWhereUniqueInput | messageWhereUniqueInput[]
    disconnect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    delete?: messageWhereUniqueInput | messageWhereUniqueInput[]
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    update?: messageUpdateWithWhereUniqueWithoutReceiverInput | messageUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: messageUpdateManyWithWhereWithoutReceiverInput | messageUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: messageScalarWhereInput | messageScalarWhereInput[]
  }

  export type paymentUpdateManyWithoutUserNestedInput = {
    create?: XOR<paymentCreateWithoutUserInput, paymentUncheckedCreateWithoutUserInput> | paymentCreateWithoutUserInput[] | paymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutUserInput | paymentCreateOrConnectWithoutUserInput[]
    upsert?: paymentUpsertWithWhereUniqueWithoutUserInput | paymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: paymentCreateManyUserInputEnvelope
    set?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    disconnect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    delete?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    update?: paymentUpdateWithWhereUniqueWithoutUserInput | paymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: paymentUpdateManyWithWhereWithoutUserInput | paymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: paymentScalarWhereInput | paymentScalarWhereInput[]
  }

  export type ticketUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ticketCreateWithoutOwnerInput, ticketUncheckedCreateWithoutOwnerInput> | ticketCreateWithoutOwnerInput[] | ticketUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutOwnerInput | ticketCreateOrConnectWithoutOwnerInput[]
    upsert?: ticketUpsertWithWhereUniqueWithoutOwnerInput | ticketUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ticketCreateManyOwnerInputEnvelope
    set?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    disconnect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    delete?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    update?: ticketUpdateWithWhereUniqueWithoutOwnerInput | ticketUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ticketUpdateManyWithWhereWithoutOwnerInput | ticketUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ticketScalarWhereInput | ticketScalarWhereInput[]
  }

  export type ticketUncheckedUpdateManyWithoutTransferredFromNestedInput = {
    create?: XOR<ticketCreateWithoutTransferredFromInput, ticketUncheckedCreateWithoutTransferredFromInput> | ticketCreateWithoutTransferredFromInput[] | ticketUncheckedCreateWithoutTransferredFromInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutTransferredFromInput | ticketCreateOrConnectWithoutTransferredFromInput[]
    upsert?: ticketUpsertWithWhereUniqueWithoutTransferredFromInput | ticketUpsertWithWhereUniqueWithoutTransferredFromInput[]
    createMany?: ticketCreateManyTransferredFromInputEnvelope
    set?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    disconnect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    delete?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    update?: ticketUpdateWithWhereUniqueWithoutTransferredFromInput | ticketUpdateWithWhereUniqueWithoutTransferredFromInput[]
    updateMany?: ticketUpdateManyWithWhereWithoutTransferredFromInput | ticketUpdateManyWithWhereWithoutTransferredFromInput[]
    deleteMany?: ticketScalarWhereInput | ticketScalarWhereInput[]
  }

  export type participantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<participantCreateWithoutUserInput, participantUncheckedCreateWithoutUserInput> | participantCreateWithoutUserInput[] | participantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: participantCreateOrConnectWithoutUserInput | participantCreateOrConnectWithoutUserInput[]
    upsert?: participantUpsertWithWhereUniqueWithoutUserInput | participantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: participantCreateManyUserInputEnvelope
    set?: participantWhereUniqueInput | participantWhereUniqueInput[]
    disconnect?: participantWhereUniqueInput | participantWhereUniqueInput[]
    delete?: participantWhereUniqueInput | participantWhereUniqueInput[]
    connect?: participantWhereUniqueInput | participantWhereUniqueInput[]
    update?: participantUpdateWithWhereUniqueWithoutUserInput | participantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: participantUpdateManyWithWhereWithoutUserInput | participantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: participantScalarWhereInput | participantScalarWhereInput[]
  }

  export type rrppAssignmentUncheckedUpdateManyWithoutRrppUserNestedInput = {
    create?: XOR<rrppAssignmentCreateWithoutRrppUserInput, rrppAssignmentUncheckedCreateWithoutRrppUserInput> | rrppAssignmentCreateWithoutRrppUserInput[] | rrppAssignmentUncheckedCreateWithoutRrppUserInput[]
    connectOrCreate?: rrppAssignmentCreateOrConnectWithoutRrppUserInput | rrppAssignmentCreateOrConnectWithoutRrppUserInput[]
    upsert?: rrppAssignmentUpsertWithWhereUniqueWithoutRrppUserInput | rrppAssignmentUpsertWithWhereUniqueWithoutRrppUserInput[]
    createMany?: rrppAssignmentCreateManyRrppUserInputEnvelope
    set?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    disconnect?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    delete?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    connect?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    update?: rrppAssignmentUpdateWithWhereUniqueWithoutRrppUserInput | rrppAssignmentUpdateWithWhereUniqueWithoutRrppUserInput[]
    updateMany?: rrppAssignmentUpdateManyWithWhereWithoutRrppUserInput | rrppAssignmentUpdateManyWithWhereWithoutRrppUserInput[]
    deleteMany?: rrppAssignmentScalarWhereInput | rrppAssignmentScalarWhereInput[]
  }

  export type accountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<accountCreateWithoutUserInput, accountUncheckedCreateWithoutUserInput> | accountCreateWithoutUserInput[] | accountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: accountCreateOrConnectWithoutUserInput | accountCreateOrConnectWithoutUserInput[]
    upsert?: accountUpsertWithWhereUniqueWithoutUserInput | accountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: accountCreateManyUserInputEnvelope
    set?: accountWhereUniqueInput | accountWhereUniqueInput[]
    disconnect?: accountWhereUniqueInput | accountWhereUniqueInput[]
    delete?: accountWhereUniqueInput | accountWhereUniqueInput[]
    connect?: accountWhereUniqueInput | accountWhereUniqueInput[]
    update?: accountUpdateWithWhereUniqueWithoutUserInput | accountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: accountUpdateManyWithWhereWithoutUserInput | accountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: accountScalarWhereInput | accountScalarWhereInput[]
  }

  export type sessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<sessionCreateWithoutUserInput, sessionUncheckedCreateWithoutUserInput> | sessionCreateWithoutUserInput[] | sessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: sessionCreateOrConnectWithoutUserInput | sessionCreateOrConnectWithoutUserInput[]
    upsert?: sessionUpsertWithWhereUniqueWithoutUserInput | sessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: sessionCreateManyUserInputEnvelope
    set?: sessionWhereUniqueInput | sessionWhereUniqueInput[]
    disconnect?: sessionWhereUniqueInput | sessionWhereUniqueInput[]
    delete?: sessionWhereUniqueInput | sessionWhereUniqueInput[]
    connect?: sessionWhereUniqueInput | sessionWhereUniqueInput[]
    update?: sessionUpdateWithWhereUniqueWithoutUserInput | sessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: sessionUpdateManyWithWhereWithoutUserInput | sessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: sessionScalarWhereInput | sessionScalarWhereInput[]
  }

  export type logUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<logCreateWithoutUserInput, logUncheckedCreateWithoutUserInput> | logCreateWithoutUserInput[] | logUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logCreateOrConnectWithoutUserInput | logCreateOrConnectWithoutUserInput[]
    upsert?: logUpsertWithWhereUniqueWithoutUserInput | logUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: logCreateManyUserInputEnvelope
    set?: logWhereUniqueInput | logWhereUniqueInput[]
    disconnect?: logWhereUniqueInput | logWhereUniqueInput[]
    delete?: logWhereUniqueInput | logWhereUniqueInput[]
    connect?: logWhereUniqueInput | logWhereUniqueInput[]
    update?: logUpdateWithWhereUniqueWithoutUserInput | logUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: logUpdateManyWithWhereWithoutUserInput | logUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: logScalarWhereInput | logScalarWhereInput[]
  }

  export type messageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<messageCreateWithoutSenderInput, messageUncheckedCreateWithoutSenderInput> | messageCreateWithoutSenderInput[] | messageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: messageCreateOrConnectWithoutSenderInput | messageCreateOrConnectWithoutSenderInput[]
    upsert?: messageUpsertWithWhereUniqueWithoutSenderInput | messageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: messageCreateManySenderInputEnvelope
    set?: messageWhereUniqueInput | messageWhereUniqueInput[]
    disconnect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    delete?: messageWhereUniqueInput | messageWhereUniqueInput[]
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    update?: messageUpdateWithWhereUniqueWithoutSenderInput | messageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: messageUpdateManyWithWhereWithoutSenderInput | messageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: messageScalarWhereInput | messageScalarWhereInput[]
  }

  export type messageUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<messageCreateWithoutReceiverInput, messageUncheckedCreateWithoutReceiverInput> | messageCreateWithoutReceiverInput[] | messageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: messageCreateOrConnectWithoutReceiverInput | messageCreateOrConnectWithoutReceiverInput[]
    upsert?: messageUpsertWithWhereUniqueWithoutReceiverInput | messageUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: messageCreateManyReceiverInputEnvelope
    set?: messageWhereUniqueInput | messageWhereUniqueInput[]
    disconnect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    delete?: messageWhereUniqueInput | messageWhereUniqueInput[]
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    update?: messageUpdateWithWhereUniqueWithoutReceiverInput | messageUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: messageUpdateManyWithWhereWithoutReceiverInput | messageUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: messageScalarWhereInput | messageScalarWhereInput[]
  }

  export type paymentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<paymentCreateWithoutUserInput, paymentUncheckedCreateWithoutUserInput> | paymentCreateWithoutUserInput[] | paymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutUserInput | paymentCreateOrConnectWithoutUserInput[]
    upsert?: paymentUpsertWithWhereUniqueWithoutUserInput | paymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: paymentCreateManyUserInputEnvelope
    set?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    disconnect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    delete?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    update?: paymentUpdateWithWhereUniqueWithoutUserInput | paymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: paymentUpdateManyWithWhereWithoutUserInput | paymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: paymentScalarWhereInput | paymentScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<userCreateWithoutPaymentsInput, userUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: userCreateOrConnectWithoutPaymentsInput
    connect?: userWhereUniqueInput
  }

  export type eventCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<eventCreateWithoutPaymentsInput, eventUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: eventCreateOrConnectWithoutPaymentsInput
    connect?: eventWhereUniqueInput
  }

  export type ticketCreateNestedManyWithoutPaymentInput = {
    create?: XOR<ticketCreateWithoutPaymentInput, ticketUncheckedCreateWithoutPaymentInput> | ticketCreateWithoutPaymentInput[] | ticketUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutPaymentInput | ticketCreateOrConnectWithoutPaymentInput[]
    createMany?: ticketCreateManyPaymentInputEnvelope
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
  }

  export type ticketUncheckedCreateNestedManyWithoutPaymentInput = {
    create?: XOR<ticketCreateWithoutPaymentInput, ticketUncheckedCreateWithoutPaymentInput> | ticketCreateWithoutPaymentInput[] | ticketUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutPaymentInput | ticketCreateOrConnectWithoutPaymentInput[]
    createMany?: ticketCreateManyPaymentInputEnvelope
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type userUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<userCreateWithoutPaymentsInput, userUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: userCreateOrConnectWithoutPaymentsInput
    upsert?: userUpsertWithoutPaymentsInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutPaymentsInput, userUpdateWithoutPaymentsInput>, userUncheckedUpdateWithoutPaymentsInput>
  }

  export type eventUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<eventCreateWithoutPaymentsInput, eventUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: eventCreateOrConnectWithoutPaymentsInput
    upsert?: eventUpsertWithoutPaymentsInput
    connect?: eventWhereUniqueInput
    update?: XOR<XOR<eventUpdateToOneWithWhereWithoutPaymentsInput, eventUpdateWithoutPaymentsInput>, eventUncheckedUpdateWithoutPaymentsInput>
  }

  export type ticketUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<ticketCreateWithoutPaymentInput, ticketUncheckedCreateWithoutPaymentInput> | ticketCreateWithoutPaymentInput[] | ticketUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutPaymentInput | ticketCreateOrConnectWithoutPaymentInput[]
    upsert?: ticketUpsertWithWhereUniqueWithoutPaymentInput | ticketUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: ticketCreateManyPaymentInputEnvelope
    set?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    disconnect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    delete?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    update?: ticketUpdateWithWhereUniqueWithoutPaymentInput | ticketUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: ticketUpdateManyWithWhereWithoutPaymentInput | ticketUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: ticketScalarWhereInput | ticketScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ticketUncheckedUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<ticketCreateWithoutPaymentInput, ticketUncheckedCreateWithoutPaymentInput> | ticketCreateWithoutPaymentInput[] | ticketUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutPaymentInput | ticketCreateOrConnectWithoutPaymentInput[]
    upsert?: ticketUpsertWithWhereUniqueWithoutPaymentInput | ticketUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: ticketCreateManyPaymentInputEnvelope
    set?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    disconnect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    delete?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    update?: ticketUpdateWithWhereUniqueWithoutPaymentInput | ticketUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: ticketUpdateManyWithWhereWithoutPaymentInput | ticketUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: ticketScalarWhereInput | ticketScalarWhereInput[]
  }

  export type ticketTypeCreateNestedManyWithoutEventInput = {
    create?: XOR<ticketTypeCreateWithoutEventInput, ticketTypeUncheckedCreateWithoutEventInput> | ticketTypeCreateWithoutEventInput[] | ticketTypeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticketTypeCreateOrConnectWithoutEventInput | ticketTypeCreateOrConnectWithoutEventInput[]
    createMany?: ticketTypeCreateManyEventInputEnvelope
    connect?: ticketTypeWhereUniqueInput | ticketTypeWhereUniqueInput[]
  }

  export type eventArtistCreateNestedManyWithoutEventInput = {
    create?: XOR<eventArtistCreateWithoutEventInput, eventArtistUncheckedCreateWithoutEventInput> | eventArtistCreateWithoutEventInput[] | eventArtistUncheckedCreateWithoutEventInput[]
    connectOrCreate?: eventArtistCreateOrConnectWithoutEventInput | eventArtistCreateOrConnectWithoutEventInput[]
    createMany?: eventArtistCreateManyEventInputEnvelope
    connect?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
  }

  export type ticketCreateNestedManyWithoutEventInput = {
    create?: XOR<ticketCreateWithoutEventInput, ticketUncheckedCreateWithoutEventInput> | ticketCreateWithoutEventInput[] | ticketUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutEventInput | ticketCreateOrConnectWithoutEventInput[]
    createMany?: ticketCreateManyEventInputEnvelope
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
  }

  export type participantCreateNestedManyWithoutEventInput = {
    create?: XOR<participantCreateWithoutEventInput, participantUncheckedCreateWithoutEventInput> | participantCreateWithoutEventInput[] | participantUncheckedCreateWithoutEventInput[]
    connectOrCreate?: participantCreateOrConnectWithoutEventInput | participantCreateOrConnectWithoutEventInput[]
    createMany?: participantCreateManyEventInputEnvelope
    connect?: participantWhereUniqueInput | participantWhereUniqueInput[]
  }

  export type rrppAssignmentCreateNestedManyWithoutEventInput = {
    create?: XOR<rrppAssignmentCreateWithoutEventInput, rrppAssignmentUncheckedCreateWithoutEventInput> | rrppAssignmentCreateWithoutEventInput[] | rrppAssignmentUncheckedCreateWithoutEventInput[]
    connectOrCreate?: rrppAssignmentCreateOrConnectWithoutEventInput | rrppAssignmentCreateOrConnectWithoutEventInput[]
    createMany?: rrppAssignmentCreateManyEventInputEnvelope
    connect?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
  }

  export type paymentCreateNestedManyWithoutEventInput = {
    create?: XOR<paymentCreateWithoutEventInput, paymentUncheckedCreateWithoutEventInput> | paymentCreateWithoutEventInput[] | paymentUncheckedCreateWithoutEventInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutEventInput | paymentCreateOrConnectWithoutEventInput[]
    createMany?: paymentCreateManyEventInputEnvelope
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
  }

  export type ticketTypeUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<ticketTypeCreateWithoutEventInput, ticketTypeUncheckedCreateWithoutEventInput> | ticketTypeCreateWithoutEventInput[] | ticketTypeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticketTypeCreateOrConnectWithoutEventInput | ticketTypeCreateOrConnectWithoutEventInput[]
    createMany?: ticketTypeCreateManyEventInputEnvelope
    connect?: ticketTypeWhereUniqueInput | ticketTypeWhereUniqueInput[]
  }

  export type eventArtistUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<eventArtistCreateWithoutEventInput, eventArtistUncheckedCreateWithoutEventInput> | eventArtistCreateWithoutEventInput[] | eventArtistUncheckedCreateWithoutEventInput[]
    connectOrCreate?: eventArtistCreateOrConnectWithoutEventInput | eventArtistCreateOrConnectWithoutEventInput[]
    createMany?: eventArtistCreateManyEventInputEnvelope
    connect?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
  }

  export type ticketUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<ticketCreateWithoutEventInput, ticketUncheckedCreateWithoutEventInput> | ticketCreateWithoutEventInput[] | ticketUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutEventInput | ticketCreateOrConnectWithoutEventInput[]
    createMany?: ticketCreateManyEventInputEnvelope
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
  }

  export type participantUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<participantCreateWithoutEventInput, participantUncheckedCreateWithoutEventInput> | participantCreateWithoutEventInput[] | participantUncheckedCreateWithoutEventInput[]
    connectOrCreate?: participantCreateOrConnectWithoutEventInput | participantCreateOrConnectWithoutEventInput[]
    createMany?: participantCreateManyEventInputEnvelope
    connect?: participantWhereUniqueInput | participantWhereUniqueInput[]
  }

  export type rrppAssignmentUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<rrppAssignmentCreateWithoutEventInput, rrppAssignmentUncheckedCreateWithoutEventInput> | rrppAssignmentCreateWithoutEventInput[] | rrppAssignmentUncheckedCreateWithoutEventInput[]
    connectOrCreate?: rrppAssignmentCreateOrConnectWithoutEventInput | rrppAssignmentCreateOrConnectWithoutEventInput[]
    createMany?: rrppAssignmentCreateManyEventInputEnvelope
    connect?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
  }

  export type paymentUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<paymentCreateWithoutEventInput, paymentUncheckedCreateWithoutEventInput> | paymentCreateWithoutEventInput[] | paymentUncheckedCreateWithoutEventInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutEventInput | paymentCreateOrConnectWithoutEventInput[]
    createMany?: paymentCreateManyEventInputEnvelope
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
  }

  export type EnumEventStatusFieldUpdateOperationsInput = {
    set?: $Enums.EventStatus
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ticketTypeUpdateManyWithoutEventNestedInput = {
    create?: XOR<ticketTypeCreateWithoutEventInput, ticketTypeUncheckedCreateWithoutEventInput> | ticketTypeCreateWithoutEventInput[] | ticketTypeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticketTypeCreateOrConnectWithoutEventInput | ticketTypeCreateOrConnectWithoutEventInput[]
    upsert?: ticketTypeUpsertWithWhereUniqueWithoutEventInput | ticketTypeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ticketTypeCreateManyEventInputEnvelope
    set?: ticketTypeWhereUniqueInput | ticketTypeWhereUniqueInput[]
    disconnect?: ticketTypeWhereUniqueInput | ticketTypeWhereUniqueInput[]
    delete?: ticketTypeWhereUniqueInput | ticketTypeWhereUniqueInput[]
    connect?: ticketTypeWhereUniqueInput | ticketTypeWhereUniqueInput[]
    update?: ticketTypeUpdateWithWhereUniqueWithoutEventInput | ticketTypeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ticketTypeUpdateManyWithWhereWithoutEventInput | ticketTypeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ticketTypeScalarWhereInput | ticketTypeScalarWhereInput[]
  }

  export type eventArtistUpdateManyWithoutEventNestedInput = {
    create?: XOR<eventArtistCreateWithoutEventInput, eventArtistUncheckedCreateWithoutEventInput> | eventArtistCreateWithoutEventInput[] | eventArtistUncheckedCreateWithoutEventInput[]
    connectOrCreate?: eventArtistCreateOrConnectWithoutEventInput | eventArtistCreateOrConnectWithoutEventInput[]
    upsert?: eventArtistUpsertWithWhereUniqueWithoutEventInput | eventArtistUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: eventArtistCreateManyEventInputEnvelope
    set?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    disconnect?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    delete?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    connect?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    update?: eventArtistUpdateWithWhereUniqueWithoutEventInput | eventArtistUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: eventArtistUpdateManyWithWhereWithoutEventInput | eventArtistUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: eventArtistScalarWhereInput | eventArtistScalarWhereInput[]
  }

  export type ticketUpdateManyWithoutEventNestedInput = {
    create?: XOR<ticketCreateWithoutEventInput, ticketUncheckedCreateWithoutEventInput> | ticketCreateWithoutEventInput[] | ticketUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutEventInput | ticketCreateOrConnectWithoutEventInput[]
    upsert?: ticketUpsertWithWhereUniqueWithoutEventInput | ticketUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ticketCreateManyEventInputEnvelope
    set?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    disconnect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    delete?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    update?: ticketUpdateWithWhereUniqueWithoutEventInput | ticketUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ticketUpdateManyWithWhereWithoutEventInput | ticketUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ticketScalarWhereInput | ticketScalarWhereInput[]
  }

  export type participantUpdateManyWithoutEventNestedInput = {
    create?: XOR<participantCreateWithoutEventInput, participantUncheckedCreateWithoutEventInput> | participantCreateWithoutEventInput[] | participantUncheckedCreateWithoutEventInput[]
    connectOrCreate?: participantCreateOrConnectWithoutEventInput | participantCreateOrConnectWithoutEventInput[]
    upsert?: participantUpsertWithWhereUniqueWithoutEventInput | participantUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: participantCreateManyEventInputEnvelope
    set?: participantWhereUniqueInput | participantWhereUniqueInput[]
    disconnect?: participantWhereUniqueInput | participantWhereUniqueInput[]
    delete?: participantWhereUniqueInput | participantWhereUniqueInput[]
    connect?: participantWhereUniqueInput | participantWhereUniqueInput[]
    update?: participantUpdateWithWhereUniqueWithoutEventInput | participantUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: participantUpdateManyWithWhereWithoutEventInput | participantUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: participantScalarWhereInput | participantScalarWhereInput[]
  }

  export type rrppAssignmentUpdateManyWithoutEventNestedInput = {
    create?: XOR<rrppAssignmentCreateWithoutEventInput, rrppAssignmentUncheckedCreateWithoutEventInput> | rrppAssignmentCreateWithoutEventInput[] | rrppAssignmentUncheckedCreateWithoutEventInput[]
    connectOrCreate?: rrppAssignmentCreateOrConnectWithoutEventInput | rrppAssignmentCreateOrConnectWithoutEventInput[]
    upsert?: rrppAssignmentUpsertWithWhereUniqueWithoutEventInput | rrppAssignmentUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: rrppAssignmentCreateManyEventInputEnvelope
    set?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    disconnect?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    delete?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    connect?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    update?: rrppAssignmentUpdateWithWhereUniqueWithoutEventInput | rrppAssignmentUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: rrppAssignmentUpdateManyWithWhereWithoutEventInput | rrppAssignmentUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: rrppAssignmentScalarWhereInput | rrppAssignmentScalarWhereInput[]
  }

  export type paymentUpdateManyWithoutEventNestedInput = {
    create?: XOR<paymentCreateWithoutEventInput, paymentUncheckedCreateWithoutEventInput> | paymentCreateWithoutEventInput[] | paymentUncheckedCreateWithoutEventInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutEventInput | paymentCreateOrConnectWithoutEventInput[]
    upsert?: paymentUpsertWithWhereUniqueWithoutEventInput | paymentUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: paymentCreateManyEventInputEnvelope
    set?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    disconnect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    delete?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    update?: paymentUpdateWithWhereUniqueWithoutEventInput | paymentUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: paymentUpdateManyWithWhereWithoutEventInput | paymentUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: paymentScalarWhereInput | paymentScalarWhereInput[]
  }

  export type ticketTypeUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<ticketTypeCreateWithoutEventInput, ticketTypeUncheckedCreateWithoutEventInput> | ticketTypeCreateWithoutEventInput[] | ticketTypeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticketTypeCreateOrConnectWithoutEventInput | ticketTypeCreateOrConnectWithoutEventInput[]
    upsert?: ticketTypeUpsertWithWhereUniqueWithoutEventInput | ticketTypeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ticketTypeCreateManyEventInputEnvelope
    set?: ticketTypeWhereUniqueInput | ticketTypeWhereUniqueInput[]
    disconnect?: ticketTypeWhereUniqueInput | ticketTypeWhereUniqueInput[]
    delete?: ticketTypeWhereUniqueInput | ticketTypeWhereUniqueInput[]
    connect?: ticketTypeWhereUniqueInput | ticketTypeWhereUniqueInput[]
    update?: ticketTypeUpdateWithWhereUniqueWithoutEventInput | ticketTypeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ticketTypeUpdateManyWithWhereWithoutEventInput | ticketTypeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ticketTypeScalarWhereInput | ticketTypeScalarWhereInput[]
  }

  export type eventArtistUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<eventArtistCreateWithoutEventInput, eventArtistUncheckedCreateWithoutEventInput> | eventArtistCreateWithoutEventInput[] | eventArtistUncheckedCreateWithoutEventInput[]
    connectOrCreate?: eventArtistCreateOrConnectWithoutEventInput | eventArtistCreateOrConnectWithoutEventInput[]
    upsert?: eventArtistUpsertWithWhereUniqueWithoutEventInput | eventArtistUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: eventArtistCreateManyEventInputEnvelope
    set?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    disconnect?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    delete?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    connect?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    update?: eventArtistUpdateWithWhereUniqueWithoutEventInput | eventArtistUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: eventArtistUpdateManyWithWhereWithoutEventInput | eventArtistUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: eventArtistScalarWhereInput | eventArtistScalarWhereInput[]
  }

  export type ticketUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<ticketCreateWithoutEventInput, ticketUncheckedCreateWithoutEventInput> | ticketCreateWithoutEventInput[] | ticketUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutEventInput | ticketCreateOrConnectWithoutEventInput[]
    upsert?: ticketUpsertWithWhereUniqueWithoutEventInput | ticketUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ticketCreateManyEventInputEnvelope
    set?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    disconnect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    delete?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    update?: ticketUpdateWithWhereUniqueWithoutEventInput | ticketUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ticketUpdateManyWithWhereWithoutEventInput | ticketUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ticketScalarWhereInput | ticketScalarWhereInput[]
  }

  export type participantUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<participantCreateWithoutEventInput, participantUncheckedCreateWithoutEventInput> | participantCreateWithoutEventInput[] | participantUncheckedCreateWithoutEventInput[]
    connectOrCreate?: participantCreateOrConnectWithoutEventInput | participantCreateOrConnectWithoutEventInput[]
    upsert?: participantUpsertWithWhereUniqueWithoutEventInput | participantUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: participantCreateManyEventInputEnvelope
    set?: participantWhereUniqueInput | participantWhereUniqueInput[]
    disconnect?: participantWhereUniqueInput | participantWhereUniqueInput[]
    delete?: participantWhereUniqueInput | participantWhereUniqueInput[]
    connect?: participantWhereUniqueInput | participantWhereUniqueInput[]
    update?: participantUpdateWithWhereUniqueWithoutEventInput | participantUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: participantUpdateManyWithWhereWithoutEventInput | participantUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: participantScalarWhereInput | participantScalarWhereInput[]
  }

  export type rrppAssignmentUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<rrppAssignmentCreateWithoutEventInput, rrppAssignmentUncheckedCreateWithoutEventInput> | rrppAssignmentCreateWithoutEventInput[] | rrppAssignmentUncheckedCreateWithoutEventInput[]
    connectOrCreate?: rrppAssignmentCreateOrConnectWithoutEventInput | rrppAssignmentCreateOrConnectWithoutEventInput[]
    upsert?: rrppAssignmentUpsertWithWhereUniqueWithoutEventInput | rrppAssignmentUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: rrppAssignmentCreateManyEventInputEnvelope
    set?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    disconnect?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    delete?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    connect?: rrppAssignmentWhereUniqueInput | rrppAssignmentWhereUniqueInput[]
    update?: rrppAssignmentUpdateWithWhereUniqueWithoutEventInput | rrppAssignmentUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: rrppAssignmentUpdateManyWithWhereWithoutEventInput | rrppAssignmentUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: rrppAssignmentScalarWhereInput | rrppAssignmentScalarWhereInput[]
  }

  export type paymentUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<paymentCreateWithoutEventInput, paymentUncheckedCreateWithoutEventInput> | paymentCreateWithoutEventInput[] | paymentUncheckedCreateWithoutEventInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutEventInput | paymentCreateOrConnectWithoutEventInput[]
    upsert?: paymentUpsertWithWhereUniqueWithoutEventInput | paymentUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: paymentCreateManyEventInputEnvelope
    set?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    disconnect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    delete?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    update?: paymentUpdateWithWhereUniqueWithoutEventInput | paymentUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: paymentUpdateManyWithWhereWithoutEventInput | paymentUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: paymentScalarWhereInput | paymentScalarWhereInput[]
  }

  export type eventArtistCreateNestedManyWithoutArtistInput = {
    create?: XOR<eventArtistCreateWithoutArtistInput, eventArtistUncheckedCreateWithoutArtistInput> | eventArtistCreateWithoutArtistInput[] | eventArtistUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: eventArtistCreateOrConnectWithoutArtistInput | eventArtistCreateOrConnectWithoutArtistInput[]
    createMany?: eventArtistCreateManyArtistInputEnvelope
    connect?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
  }

  export type eventArtistUncheckedCreateNestedManyWithoutArtistInput = {
    create?: XOR<eventArtistCreateWithoutArtistInput, eventArtistUncheckedCreateWithoutArtistInput> | eventArtistCreateWithoutArtistInput[] | eventArtistUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: eventArtistCreateOrConnectWithoutArtistInput | eventArtistCreateOrConnectWithoutArtistInput[]
    createMany?: eventArtistCreateManyArtistInputEnvelope
    connect?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
  }

  export type eventArtistUpdateManyWithoutArtistNestedInput = {
    create?: XOR<eventArtistCreateWithoutArtistInput, eventArtistUncheckedCreateWithoutArtistInput> | eventArtistCreateWithoutArtistInput[] | eventArtistUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: eventArtistCreateOrConnectWithoutArtistInput | eventArtistCreateOrConnectWithoutArtistInput[]
    upsert?: eventArtistUpsertWithWhereUniqueWithoutArtistInput | eventArtistUpsertWithWhereUniqueWithoutArtistInput[]
    createMany?: eventArtistCreateManyArtistInputEnvelope
    set?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    disconnect?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    delete?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    connect?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    update?: eventArtistUpdateWithWhereUniqueWithoutArtistInput | eventArtistUpdateWithWhereUniqueWithoutArtistInput[]
    updateMany?: eventArtistUpdateManyWithWhereWithoutArtistInput | eventArtistUpdateManyWithWhereWithoutArtistInput[]
    deleteMany?: eventArtistScalarWhereInput | eventArtistScalarWhereInput[]
  }

  export type eventArtistUncheckedUpdateManyWithoutArtistNestedInput = {
    create?: XOR<eventArtistCreateWithoutArtistInput, eventArtistUncheckedCreateWithoutArtistInput> | eventArtistCreateWithoutArtistInput[] | eventArtistUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: eventArtistCreateOrConnectWithoutArtistInput | eventArtistCreateOrConnectWithoutArtistInput[]
    upsert?: eventArtistUpsertWithWhereUniqueWithoutArtistInput | eventArtistUpsertWithWhereUniqueWithoutArtistInput[]
    createMany?: eventArtistCreateManyArtistInputEnvelope
    set?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    disconnect?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    delete?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    connect?: eventArtistWhereUniqueInput | eventArtistWhereUniqueInput[]
    update?: eventArtistUpdateWithWhereUniqueWithoutArtistInput | eventArtistUpdateWithWhereUniqueWithoutArtistInput[]
    updateMany?: eventArtistUpdateManyWithWhereWithoutArtistInput | eventArtistUpdateManyWithWhereWithoutArtistInput[]
    deleteMany?: eventArtistScalarWhereInput | eventArtistScalarWhereInput[]
  }

  export type artistCreateNestedOneWithoutEventArtistsInput = {
    create?: XOR<artistCreateWithoutEventArtistsInput, artistUncheckedCreateWithoutEventArtistsInput>
    connectOrCreate?: artistCreateOrConnectWithoutEventArtistsInput
    connect?: artistWhereUniqueInput
  }

  export type eventCreateNestedOneWithoutEventArtistsInput = {
    create?: XOR<eventCreateWithoutEventArtistsInput, eventUncheckedCreateWithoutEventArtistsInput>
    connectOrCreate?: eventCreateOrConnectWithoutEventArtistsInput
    connect?: eventWhereUniqueInput
  }

  export type artistUpdateOneRequiredWithoutEventArtistsNestedInput = {
    create?: XOR<artistCreateWithoutEventArtistsInput, artistUncheckedCreateWithoutEventArtistsInput>
    connectOrCreate?: artistCreateOrConnectWithoutEventArtistsInput
    upsert?: artistUpsertWithoutEventArtistsInput
    connect?: artistWhereUniqueInput
    update?: XOR<XOR<artistUpdateToOneWithWhereWithoutEventArtistsInput, artistUpdateWithoutEventArtistsInput>, artistUncheckedUpdateWithoutEventArtistsInput>
  }

  export type eventUpdateOneRequiredWithoutEventArtistsNestedInput = {
    create?: XOR<eventCreateWithoutEventArtistsInput, eventUncheckedCreateWithoutEventArtistsInput>
    connectOrCreate?: eventCreateOrConnectWithoutEventArtistsInput
    upsert?: eventUpsertWithoutEventArtistsInput
    connect?: eventWhereUniqueInput
    update?: XOR<XOR<eventUpdateToOneWithWhereWithoutEventArtistsInput, eventUpdateWithoutEventArtistsInput>, eventUncheckedUpdateWithoutEventArtistsInput>
  }

  export type eventCreateNestedOneWithoutTicketTypesInput = {
    create?: XOR<eventCreateWithoutTicketTypesInput, eventUncheckedCreateWithoutTicketTypesInput>
    connectOrCreate?: eventCreateOrConnectWithoutTicketTypesInput
    connect?: eventWhereUniqueInput
  }

  export type ticketCreateNestedManyWithoutTypeInput = {
    create?: XOR<ticketCreateWithoutTypeInput, ticketUncheckedCreateWithoutTypeInput> | ticketCreateWithoutTypeInput[] | ticketUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutTypeInput | ticketCreateOrConnectWithoutTypeInput[]
    createMany?: ticketCreateManyTypeInputEnvelope
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
  }

  export type ticketUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<ticketCreateWithoutTypeInput, ticketUncheckedCreateWithoutTypeInput> | ticketCreateWithoutTypeInput[] | ticketUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutTypeInput | ticketCreateOrConnectWithoutTypeInput[]
    createMany?: ticketCreateManyTypeInputEnvelope
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
  }

  export type eventUpdateOneRequiredWithoutTicketTypesNestedInput = {
    create?: XOR<eventCreateWithoutTicketTypesInput, eventUncheckedCreateWithoutTicketTypesInput>
    connectOrCreate?: eventCreateOrConnectWithoutTicketTypesInput
    upsert?: eventUpsertWithoutTicketTypesInput
    connect?: eventWhereUniqueInput
    update?: XOR<XOR<eventUpdateToOneWithWhereWithoutTicketTypesInput, eventUpdateWithoutTicketTypesInput>, eventUncheckedUpdateWithoutTicketTypesInput>
  }

  export type ticketUpdateManyWithoutTypeNestedInput = {
    create?: XOR<ticketCreateWithoutTypeInput, ticketUncheckedCreateWithoutTypeInput> | ticketCreateWithoutTypeInput[] | ticketUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutTypeInput | ticketCreateOrConnectWithoutTypeInput[]
    upsert?: ticketUpsertWithWhereUniqueWithoutTypeInput | ticketUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: ticketCreateManyTypeInputEnvelope
    set?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    disconnect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    delete?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    update?: ticketUpdateWithWhereUniqueWithoutTypeInput | ticketUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: ticketUpdateManyWithWhereWithoutTypeInput | ticketUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: ticketScalarWhereInput | ticketScalarWhereInput[]
  }

  export type ticketUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<ticketCreateWithoutTypeInput, ticketUncheckedCreateWithoutTypeInput> | ticketCreateWithoutTypeInput[] | ticketUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutTypeInput | ticketCreateOrConnectWithoutTypeInput[]
    upsert?: ticketUpsertWithWhereUniqueWithoutTypeInput | ticketUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: ticketCreateManyTypeInputEnvelope
    set?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    disconnect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    delete?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    update?: ticketUpdateWithWhereUniqueWithoutTypeInput | ticketUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: ticketUpdateManyWithWhereWithoutTypeInput | ticketUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: ticketScalarWhereInput | ticketScalarWhereInput[]
  }

  export type eventCreateNestedOneWithoutTicketsInput = {
    create?: XOR<eventCreateWithoutTicketsInput, eventUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: eventCreateOrConnectWithoutTicketsInput
    connect?: eventWhereUniqueInput
  }

  export type userCreateNestedOneWithoutTicketsInput = {
    create?: XOR<userCreateWithoutTicketsInput, userUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: userCreateOrConnectWithoutTicketsInput
    connect?: userWhereUniqueInput
  }

  export type ticketTypeCreateNestedOneWithoutTicketsInput = {
    create?: XOR<ticketTypeCreateWithoutTicketsInput, ticketTypeUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: ticketTypeCreateOrConnectWithoutTicketsInput
    connect?: ticketTypeWhereUniqueInput
  }

  export type userCreateNestedOneWithoutTransferredTicketsInput = {
    create?: XOR<userCreateWithoutTransferredTicketsInput, userUncheckedCreateWithoutTransferredTicketsInput>
    connectOrCreate?: userCreateOrConnectWithoutTransferredTicketsInput
    connect?: userWhereUniqueInput
  }

  export type paymentCreateNestedOneWithoutTicketsInput = {
    create?: XOR<paymentCreateWithoutTicketsInput, paymentUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: paymentCreateOrConnectWithoutTicketsInput
    connect?: paymentWhereUniqueInput
  }

  export type EnumTicketStatusFieldUpdateOperationsInput = {
    set?: $Enums.TicketStatus
  }

  export type eventUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<eventCreateWithoutTicketsInput, eventUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: eventCreateOrConnectWithoutTicketsInput
    upsert?: eventUpsertWithoutTicketsInput
    connect?: eventWhereUniqueInput
    update?: XOR<XOR<eventUpdateToOneWithWhereWithoutTicketsInput, eventUpdateWithoutTicketsInput>, eventUncheckedUpdateWithoutTicketsInput>
  }

  export type userUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<userCreateWithoutTicketsInput, userUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: userCreateOrConnectWithoutTicketsInput
    upsert?: userUpsertWithoutTicketsInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutTicketsInput, userUpdateWithoutTicketsInput>, userUncheckedUpdateWithoutTicketsInput>
  }

  export type ticketTypeUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<ticketTypeCreateWithoutTicketsInput, ticketTypeUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: ticketTypeCreateOrConnectWithoutTicketsInput
    upsert?: ticketTypeUpsertWithoutTicketsInput
    connect?: ticketTypeWhereUniqueInput
    update?: XOR<XOR<ticketTypeUpdateToOneWithWhereWithoutTicketsInput, ticketTypeUpdateWithoutTicketsInput>, ticketTypeUncheckedUpdateWithoutTicketsInput>
  }

  export type userUpdateOneWithoutTransferredTicketsNestedInput = {
    create?: XOR<userCreateWithoutTransferredTicketsInput, userUncheckedCreateWithoutTransferredTicketsInput>
    connectOrCreate?: userCreateOrConnectWithoutTransferredTicketsInput
    upsert?: userUpsertWithoutTransferredTicketsInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutTransferredTicketsInput, userUpdateWithoutTransferredTicketsInput>, userUncheckedUpdateWithoutTransferredTicketsInput>
  }

  export type paymentUpdateOneWithoutTicketsNestedInput = {
    create?: XOR<paymentCreateWithoutTicketsInput, paymentUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: paymentCreateOrConnectWithoutTicketsInput
    upsert?: paymentUpsertWithoutTicketsInput
    disconnect?: paymentWhereInput | boolean
    delete?: paymentWhereInput | boolean
    connect?: paymentWhereUniqueInput
    update?: XOR<XOR<paymentUpdateToOneWithWhereWithoutTicketsInput, paymentUpdateWithoutTicketsInput>, paymentUncheckedUpdateWithoutTicketsInput>
  }

  export type userCreateNestedOneWithoutRrppAssignmentsInput = {
    create?: XOR<userCreateWithoutRrppAssignmentsInput, userUncheckedCreateWithoutRrppAssignmentsInput>
    connectOrCreate?: userCreateOrConnectWithoutRrppAssignmentsInput
    connect?: userWhereUniqueInput
  }

  export type eventCreateNestedOneWithoutRrppAssignmentsInput = {
    create?: XOR<eventCreateWithoutRrppAssignmentsInput, eventUncheckedCreateWithoutRrppAssignmentsInput>
    connectOrCreate?: eventCreateOrConnectWithoutRrppAssignmentsInput
    connect?: eventWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutRrppAssignmentsNestedInput = {
    create?: XOR<userCreateWithoutRrppAssignmentsInput, userUncheckedCreateWithoutRrppAssignmentsInput>
    connectOrCreate?: userCreateOrConnectWithoutRrppAssignmentsInput
    upsert?: userUpsertWithoutRrppAssignmentsInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutRrppAssignmentsInput, userUpdateWithoutRrppAssignmentsInput>, userUncheckedUpdateWithoutRrppAssignmentsInput>
  }

  export type eventUpdateOneRequiredWithoutRrppAssignmentsNestedInput = {
    create?: XOR<eventCreateWithoutRrppAssignmentsInput, eventUncheckedCreateWithoutRrppAssignmentsInput>
    connectOrCreate?: eventCreateOrConnectWithoutRrppAssignmentsInput
    upsert?: eventUpsertWithoutRrppAssignmentsInput
    connect?: eventWhereUniqueInput
    update?: XOR<XOR<eventUpdateToOneWithWhereWithoutRrppAssignmentsInput, eventUpdateWithoutRrppAssignmentsInput>, eventUncheckedUpdateWithoutRrppAssignmentsInput>
  }

  export type userCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<userCreateWithoutParticipantsInput, userUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: userCreateOrConnectWithoutParticipantsInput
    connect?: userWhereUniqueInput
  }

  export type eventCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<eventCreateWithoutParticipantsInput, eventUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: eventCreateOrConnectWithoutParticipantsInput
    connect?: eventWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<userCreateWithoutParticipantsInput, userUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: userCreateOrConnectWithoutParticipantsInput
    upsert?: userUpsertWithoutParticipantsInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutParticipantsInput, userUpdateWithoutParticipantsInput>, userUncheckedUpdateWithoutParticipantsInput>
  }

  export type eventUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<eventCreateWithoutParticipantsInput, eventUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: eventCreateOrConnectWithoutParticipantsInput
    upsert?: eventUpsertWithoutParticipantsInput
    connect?: eventWhereUniqueInput
    update?: XOR<XOR<eventUpdateToOneWithWhereWithoutParticipantsInput, eventUpdateWithoutParticipantsInput>, eventUncheckedUpdateWithoutParticipantsInput>
  }

  export type userCreateNestedOneWithoutLogsInput = {
    create?: XOR<userCreateWithoutLogsInput, userUncheckedCreateWithoutLogsInput>
    connectOrCreate?: userCreateOrConnectWithoutLogsInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneWithoutLogsNestedInput = {
    create?: XOR<userCreateWithoutLogsInput, userUncheckedCreateWithoutLogsInput>
    connectOrCreate?: userCreateOrConnectWithoutLogsInput
    upsert?: userUpsertWithoutLogsInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutLogsInput, userUpdateWithoutLogsInput>, userUncheckedUpdateWithoutLogsInput>
  }

  export type userCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<userCreateWithoutSentMessagesInput, userUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: userCreateOrConnectWithoutSentMessagesInput
    connect?: userWhereUniqueInput
  }

  export type userCreateNestedOneWithoutReceivedMessagesInput = {
    create?: XOR<userCreateWithoutReceivedMessagesInput, userUncheckedCreateWithoutReceivedMessagesInput>
    connectOrCreate?: userCreateOrConnectWithoutReceivedMessagesInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutSentMessagesNestedInput = {
    create?: XOR<userCreateWithoutSentMessagesInput, userUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: userCreateOrConnectWithoutSentMessagesInput
    upsert?: userUpsertWithoutSentMessagesInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutSentMessagesInput, userUpdateWithoutSentMessagesInput>, userUncheckedUpdateWithoutSentMessagesInput>
  }

  export type userUpdateOneRequiredWithoutReceivedMessagesNestedInput = {
    create?: XOR<userCreateWithoutReceivedMessagesInput, userUncheckedCreateWithoutReceivedMessagesInput>
    connectOrCreate?: userCreateOrConnectWithoutReceivedMessagesInput
    upsert?: userUpsertWithoutReceivedMessagesInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutReceivedMessagesInput, userUpdateWithoutReceivedMessagesInput>, userUncheckedUpdateWithoutReceivedMessagesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumEventStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusFilter<$PrismaModel> | $Enums.EventStatus
  }

  export type NestedEnumEventStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusWithAggregatesFilter<$PrismaModel> | $Enums.EventStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventStatusFilter<$PrismaModel>
    _max?: NestedEnumEventStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumTicketStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketStatus | EnumTicketStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTicketStatusFilter<$PrismaModel> | $Enums.TicketStatus
  }

  export type NestedEnumTicketStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketStatus | EnumTicketStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TicketStatus[] | ListEnumTicketStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTicketStatusWithAggregatesFilter<$PrismaModel> | $Enums.TicketStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTicketStatusFilter<$PrismaModel>
    _max?: NestedEnumTicketStatusFilter<$PrismaModel>
  }

  export type userCreateWithoutAccountInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketCreateNestedManyWithoutTransferredFromInput
    participants?: participantCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutRrppUserInput
    session?: sessionCreateNestedManyWithoutUserInput
    logs?: logCreateNestedManyWithoutUserInput
    sentMessages?: messageCreateNestedManyWithoutSenderInput
    receivedMessages?: messageCreateNestedManyWithoutReceiverInput
    payments?: paymentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutAccountInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketUncheckedCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketUncheckedCreateNestedManyWithoutTransferredFromInput
    participants?: participantUncheckedCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutRrppUserInput
    session?: sessionUncheckedCreateNestedManyWithoutUserInput
    logs?: logUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: messageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: messageUncheckedCreateNestedManyWithoutReceiverInput
    payments?: paymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutAccountInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutAccountInput, userUncheckedCreateWithoutAccountInput>
  }

  export type userUpsertWithoutAccountInput = {
    update: XOR<userUpdateWithoutAccountInput, userUncheckedUpdateWithoutAccountInput>
    create: XOR<userCreateWithoutAccountInput, userUncheckedCreateWithoutAccountInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutAccountInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutAccountInput, userUncheckedUpdateWithoutAccountInput>
  }

  export type userUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutRrppUserNestedInput
    session?: sessionUpdateManyWithoutUserNestedInput
    logs?: logUpdateManyWithoutUserNestedInput
    sentMessages?: messageUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUpdateManyWithoutReceiverNestedInput
    payments?: paymentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUncheckedUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUncheckedUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUncheckedUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutRrppUserNestedInput
    session?: sessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: logUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: messageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUncheckedUpdateManyWithoutReceiverNestedInput
    payments?: paymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateWithoutSessionInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketCreateNestedManyWithoutTransferredFromInput
    participants?: participantCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutRrppUserInput
    account?: accountCreateNestedManyWithoutUserInput
    logs?: logCreateNestedManyWithoutUserInput
    sentMessages?: messageCreateNestedManyWithoutSenderInput
    receivedMessages?: messageCreateNestedManyWithoutReceiverInput
    payments?: paymentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutSessionInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketUncheckedCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketUncheckedCreateNestedManyWithoutTransferredFromInput
    participants?: participantUncheckedCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutRrppUserInput
    account?: accountUncheckedCreateNestedManyWithoutUserInput
    logs?: logUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: messageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: messageUncheckedCreateNestedManyWithoutReceiverInput
    payments?: paymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutSessionInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutSessionInput, userUncheckedCreateWithoutSessionInput>
  }

  export type userUpsertWithoutSessionInput = {
    update: XOR<userUpdateWithoutSessionInput, userUncheckedUpdateWithoutSessionInput>
    create: XOR<userCreateWithoutSessionInput, userUncheckedCreateWithoutSessionInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutSessionInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutSessionInput, userUncheckedUpdateWithoutSessionInput>
  }

  export type userUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutRrppUserNestedInput
    account?: accountUpdateManyWithoutUserNestedInput
    logs?: logUpdateManyWithoutUserNestedInput
    sentMessages?: messageUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUpdateManyWithoutReceiverNestedInput
    payments?: paymentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUncheckedUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUncheckedUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUncheckedUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutRrppUserNestedInput
    account?: accountUncheckedUpdateManyWithoutUserNestedInput
    logs?: logUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: messageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUncheckedUpdateManyWithoutReceiverNestedInput
    payments?: paymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ticketCreateWithoutOwnerInput = {
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    createdAt?: Date | string
    event: eventCreateNestedOneWithoutTicketsInput
    type: ticketTypeCreateNestedOneWithoutTicketsInput
    transferredFrom?: userCreateNestedOneWithoutTransferredTicketsInput
    payment?: paymentCreateNestedOneWithoutTicketsInput
  }

  export type ticketUncheckedCreateWithoutOwnerInput = {
    id?: number
    eventId: number
    typeId: number
    paymentId?: number | null
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    transferredFromId?: string | null
    createdAt?: Date | string
  }

  export type ticketCreateOrConnectWithoutOwnerInput = {
    where: ticketWhereUniqueInput
    create: XOR<ticketCreateWithoutOwnerInput, ticketUncheckedCreateWithoutOwnerInput>
  }

  export type ticketCreateManyOwnerInputEnvelope = {
    data: ticketCreateManyOwnerInput | ticketCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ticketCreateWithoutTransferredFromInput = {
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    createdAt?: Date | string
    event: eventCreateNestedOneWithoutTicketsInput
    owner: userCreateNestedOneWithoutTicketsInput
    type: ticketTypeCreateNestedOneWithoutTicketsInput
    payment?: paymentCreateNestedOneWithoutTicketsInput
  }

  export type ticketUncheckedCreateWithoutTransferredFromInput = {
    id?: number
    eventId: number
    ownerId: string
    typeId: number
    paymentId?: number | null
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    createdAt?: Date | string
  }

  export type ticketCreateOrConnectWithoutTransferredFromInput = {
    where: ticketWhereUniqueInput
    create: XOR<ticketCreateWithoutTransferredFromInput, ticketUncheckedCreateWithoutTransferredFromInput>
  }

  export type ticketCreateManyTransferredFromInputEnvelope = {
    data: ticketCreateManyTransferredFromInput | ticketCreateManyTransferredFromInput[]
    skipDuplicates?: boolean
  }

  export type participantCreateWithoutUserInput = {
    viaRsvp?: boolean
    qrCode?: string | null
    event: eventCreateNestedOneWithoutParticipantsInput
  }

  export type participantUncheckedCreateWithoutUserInput = {
    eventId: number
    viaRsvp?: boolean
    qrCode?: string | null
  }

  export type participantCreateOrConnectWithoutUserInput = {
    where: participantWhereUniqueInput
    create: XOR<participantCreateWithoutUserInput, participantUncheckedCreateWithoutUserInput>
  }

  export type participantCreateManyUserInputEnvelope = {
    data: participantCreateManyUserInput | participantCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type rrppAssignmentCreateWithoutRrppUserInput = {
    commissionRate?: Decimal | DecimalJsLike | number | string
    freesGranted?: number
    event: eventCreateNestedOneWithoutRrppAssignmentsInput
  }

  export type rrppAssignmentUncheckedCreateWithoutRrppUserInput = {
    eventId: number
    commissionRate?: Decimal | DecimalJsLike | number | string
    freesGranted?: number
  }

  export type rrppAssignmentCreateOrConnectWithoutRrppUserInput = {
    where: rrppAssignmentWhereUniqueInput
    create: XOR<rrppAssignmentCreateWithoutRrppUserInput, rrppAssignmentUncheckedCreateWithoutRrppUserInput>
  }

  export type rrppAssignmentCreateManyRrppUserInputEnvelope = {
    data: rrppAssignmentCreateManyRrppUserInput | rrppAssignmentCreateManyRrppUserInput[]
    skipDuplicates?: boolean
  }

  export type accountCreateWithoutUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type accountUncheckedCreateWithoutUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type accountCreateOrConnectWithoutUserInput = {
    where: accountWhereUniqueInput
    create: XOR<accountCreateWithoutUserInput, accountUncheckedCreateWithoutUserInput>
  }

  export type accountCreateManyUserInputEnvelope = {
    data: accountCreateManyUserInput | accountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type sessionCreateWithoutUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type sessionUncheckedCreateWithoutUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type sessionCreateOrConnectWithoutUserInput = {
    where: sessionWhereUniqueInput
    create: XOR<sessionCreateWithoutUserInput, sessionUncheckedCreateWithoutUserInput>
  }

  export type sessionCreateManyUserInputEnvelope = {
    data: sessionCreateManyUserInput | sessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type logCreateWithoutUserInput = {
    action: string
    timestamp?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type logUncheckedCreateWithoutUserInput = {
    id?: number
    action: string
    timestamp?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type logCreateOrConnectWithoutUserInput = {
    where: logWhereUniqueInput
    create: XOR<logCreateWithoutUserInput, logUncheckedCreateWithoutUserInput>
  }

  export type logCreateManyUserInputEnvelope = {
    data: logCreateManyUserInput | logCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type messageCreateWithoutSenderInput = {
    message: string
    timestamp?: Date | string
    readStatus?: boolean
    receiver: userCreateNestedOneWithoutReceivedMessagesInput
  }

  export type messageUncheckedCreateWithoutSenderInput = {
    id?: number
    receiverId: string
    message: string
    timestamp?: Date | string
    readStatus?: boolean
  }

  export type messageCreateOrConnectWithoutSenderInput = {
    where: messageWhereUniqueInput
    create: XOR<messageCreateWithoutSenderInput, messageUncheckedCreateWithoutSenderInput>
  }

  export type messageCreateManySenderInputEnvelope = {
    data: messageCreateManySenderInput | messageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type messageCreateWithoutReceiverInput = {
    message: string
    timestamp?: Date | string
    readStatus?: boolean
    sender: userCreateNestedOneWithoutSentMessagesInput
  }

  export type messageUncheckedCreateWithoutReceiverInput = {
    id?: number
    senderId: string
    message: string
    timestamp?: Date | string
    readStatus?: boolean
  }

  export type messageCreateOrConnectWithoutReceiverInput = {
    where: messageWhereUniqueInput
    create: XOR<messageCreateWithoutReceiverInput, messageUncheckedCreateWithoutReceiverInput>
  }

  export type messageCreateManyReceiverInputEnvelope = {
    data: messageCreateManyReceiverInput | messageCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type paymentCreateWithoutUserInput = {
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    provider?: string
    externalReference: string
    mpPreferenceId?: string | null
    mpPaymentId?: string | null
    payerEmail?: string | null
    payerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    event: eventCreateNestedOneWithoutPaymentsInput
    tickets?: ticketCreateNestedManyWithoutPaymentInput
  }

  export type paymentUncheckedCreateWithoutUserInput = {
    id?: number
    eventId: number
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    provider?: string
    externalReference: string
    mpPreferenceId?: string | null
    mpPaymentId?: string | null
    payerEmail?: string | null
    payerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tickets?: ticketUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type paymentCreateOrConnectWithoutUserInput = {
    where: paymentWhereUniqueInput
    create: XOR<paymentCreateWithoutUserInput, paymentUncheckedCreateWithoutUserInput>
  }

  export type paymentCreateManyUserInputEnvelope = {
    data: paymentCreateManyUserInput | paymentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ticketUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ticketWhereUniqueInput
    update: XOR<ticketUpdateWithoutOwnerInput, ticketUncheckedUpdateWithoutOwnerInput>
    create: XOR<ticketCreateWithoutOwnerInput, ticketUncheckedCreateWithoutOwnerInput>
  }

  export type ticketUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ticketWhereUniqueInput
    data: XOR<ticketUpdateWithoutOwnerInput, ticketUncheckedUpdateWithoutOwnerInput>
  }

  export type ticketUpdateManyWithWhereWithoutOwnerInput = {
    where: ticketScalarWhereInput
    data: XOR<ticketUpdateManyMutationInput, ticketUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ticketScalarWhereInput = {
    AND?: ticketScalarWhereInput | ticketScalarWhereInput[]
    OR?: ticketScalarWhereInput[]
    NOT?: ticketScalarWhereInput | ticketScalarWhereInput[]
    id?: IntFilter<"ticket"> | number
    eventId?: IntFilter<"ticket"> | number
    ownerId?: StringFilter<"ticket"> | string
    typeId?: IntFilter<"ticket"> | number
    paymentId?: IntNullableFilter<"ticket"> | number | null
    qrCode?: StringFilter<"ticket"> | string
    code?: StringNullableFilter<"ticket"> | string | null
    status?: EnumTicketStatusFilter<"ticket"> | $Enums.TicketStatus
    transferredFromId?: StringNullableFilter<"ticket"> | string | null
    createdAt?: DateTimeFilter<"ticket"> | Date | string
  }

  export type ticketUpsertWithWhereUniqueWithoutTransferredFromInput = {
    where: ticketWhereUniqueInput
    update: XOR<ticketUpdateWithoutTransferredFromInput, ticketUncheckedUpdateWithoutTransferredFromInput>
    create: XOR<ticketCreateWithoutTransferredFromInput, ticketUncheckedCreateWithoutTransferredFromInput>
  }

  export type ticketUpdateWithWhereUniqueWithoutTransferredFromInput = {
    where: ticketWhereUniqueInput
    data: XOR<ticketUpdateWithoutTransferredFromInput, ticketUncheckedUpdateWithoutTransferredFromInput>
  }

  export type ticketUpdateManyWithWhereWithoutTransferredFromInput = {
    where: ticketScalarWhereInput
    data: XOR<ticketUpdateManyMutationInput, ticketUncheckedUpdateManyWithoutTransferredFromInput>
  }

  export type participantUpsertWithWhereUniqueWithoutUserInput = {
    where: participantWhereUniqueInput
    update: XOR<participantUpdateWithoutUserInput, participantUncheckedUpdateWithoutUserInput>
    create: XOR<participantCreateWithoutUserInput, participantUncheckedCreateWithoutUserInput>
  }

  export type participantUpdateWithWhereUniqueWithoutUserInput = {
    where: participantWhereUniqueInput
    data: XOR<participantUpdateWithoutUserInput, participantUncheckedUpdateWithoutUserInput>
  }

  export type participantUpdateManyWithWhereWithoutUserInput = {
    where: participantScalarWhereInput
    data: XOR<participantUpdateManyMutationInput, participantUncheckedUpdateManyWithoutUserInput>
  }

  export type participantScalarWhereInput = {
    AND?: participantScalarWhereInput | participantScalarWhereInput[]
    OR?: participantScalarWhereInput[]
    NOT?: participantScalarWhereInput | participantScalarWhereInput[]
    userId?: StringFilter<"participant"> | string
    eventId?: IntFilter<"participant"> | number
    viaRsvp?: BoolFilter<"participant"> | boolean
    qrCode?: StringNullableFilter<"participant"> | string | null
  }

  export type rrppAssignmentUpsertWithWhereUniqueWithoutRrppUserInput = {
    where: rrppAssignmentWhereUniqueInput
    update: XOR<rrppAssignmentUpdateWithoutRrppUserInput, rrppAssignmentUncheckedUpdateWithoutRrppUserInput>
    create: XOR<rrppAssignmentCreateWithoutRrppUserInput, rrppAssignmentUncheckedCreateWithoutRrppUserInput>
  }

  export type rrppAssignmentUpdateWithWhereUniqueWithoutRrppUserInput = {
    where: rrppAssignmentWhereUniqueInput
    data: XOR<rrppAssignmentUpdateWithoutRrppUserInput, rrppAssignmentUncheckedUpdateWithoutRrppUserInput>
  }

  export type rrppAssignmentUpdateManyWithWhereWithoutRrppUserInput = {
    where: rrppAssignmentScalarWhereInput
    data: XOR<rrppAssignmentUpdateManyMutationInput, rrppAssignmentUncheckedUpdateManyWithoutRrppUserInput>
  }

  export type rrppAssignmentScalarWhereInput = {
    AND?: rrppAssignmentScalarWhereInput | rrppAssignmentScalarWhereInput[]
    OR?: rrppAssignmentScalarWhereInput[]
    NOT?: rrppAssignmentScalarWhereInput | rrppAssignmentScalarWhereInput[]
    rrppUserId?: StringFilter<"rrppAssignment"> | string
    eventId?: IntFilter<"rrppAssignment"> | number
    commissionRate?: DecimalFilter<"rrppAssignment"> | Decimal | DecimalJsLike | number | string
    freesGranted?: IntFilter<"rrppAssignment"> | number
  }

  export type accountUpsertWithWhereUniqueWithoutUserInput = {
    where: accountWhereUniqueInput
    update: XOR<accountUpdateWithoutUserInput, accountUncheckedUpdateWithoutUserInput>
    create: XOR<accountCreateWithoutUserInput, accountUncheckedCreateWithoutUserInput>
  }

  export type accountUpdateWithWhereUniqueWithoutUserInput = {
    where: accountWhereUniqueInput
    data: XOR<accountUpdateWithoutUserInput, accountUncheckedUpdateWithoutUserInput>
  }

  export type accountUpdateManyWithWhereWithoutUserInput = {
    where: accountScalarWhereInput
    data: XOR<accountUpdateManyMutationInput, accountUncheckedUpdateManyWithoutUserInput>
  }

  export type accountScalarWhereInput = {
    AND?: accountScalarWhereInput | accountScalarWhereInput[]
    OR?: accountScalarWhereInput[]
    NOT?: accountScalarWhereInput | accountScalarWhereInput[]
    id?: StringFilter<"account"> | string
    accountId?: StringFilter<"account"> | string
    providerId?: StringFilter<"account"> | string
    userId?: StringFilter<"account"> | string
    accessToken?: StringNullableFilter<"account"> | string | null
    refreshToken?: StringNullableFilter<"account"> | string | null
    idToken?: StringNullableFilter<"account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"account"> | Date | string | null
    scope?: StringNullableFilter<"account"> | string | null
    password?: StringNullableFilter<"account"> | string | null
    createdAt?: DateTimeFilter<"account"> | Date | string
    updatedAt?: DateTimeFilter<"account"> | Date | string
  }

  export type sessionUpsertWithWhereUniqueWithoutUserInput = {
    where: sessionWhereUniqueInput
    update: XOR<sessionUpdateWithoutUserInput, sessionUncheckedUpdateWithoutUserInput>
    create: XOR<sessionCreateWithoutUserInput, sessionUncheckedCreateWithoutUserInput>
  }

  export type sessionUpdateWithWhereUniqueWithoutUserInput = {
    where: sessionWhereUniqueInput
    data: XOR<sessionUpdateWithoutUserInput, sessionUncheckedUpdateWithoutUserInput>
  }

  export type sessionUpdateManyWithWhereWithoutUserInput = {
    where: sessionScalarWhereInput
    data: XOR<sessionUpdateManyMutationInput, sessionUncheckedUpdateManyWithoutUserInput>
  }

  export type sessionScalarWhereInput = {
    AND?: sessionScalarWhereInput | sessionScalarWhereInput[]
    OR?: sessionScalarWhereInput[]
    NOT?: sessionScalarWhereInput | sessionScalarWhereInput[]
    id?: StringFilter<"session"> | string
    expiresAt?: DateTimeFilter<"session"> | Date | string
    token?: StringFilter<"session"> | string
    createdAt?: DateTimeFilter<"session"> | Date | string
    updatedAt?: DateTimeFilter<"session"> | Date | string
    ipAddress?: StringNullableFilter<"session"> | string | null
    userAgent?: StringNullableFilter<"session"> | string | null
    userId?: StringFilter<"session"> | string
  }

  export type logUpsertWithWhereUniqueWithoutUserInput = {
    where: logWhereUniqueInput
    update: XOR<logUpdateWithoutUserInput, logUncheckedUpdateWithoutUserInput>
    create: XOR<logCreateWithoutUserInput, logUncheckedCreateWithoutUserInput>
  }

  export type logUpdateWithWhereUniqueWithoutUserInput = {
    where: logWhereUniqueInput
    data: XOR<logUpdateWithoutUserInput, logUncheckedUpdateWithoutUserInput>
  }

  export type logUpdateManyWithWhereWithoutUserInput = {
    where: logScalarWhereInput
    data: XOR<logUpdateManyMutationInput, logUncheckedUpdateManyWithoutUserInput>
  }

  export type logScalarWhereInput = {
    AND?: logScalarWhereInput | logScalarWhereInput[]
    OR?: logScalarWhereInput[]
    NOT?: logScalarWhereInput | logScalarWhereInput[]
    id?: IntFilter<"log"> | number
    userId?: StringNullableFilter<"log"> | string | null
    action?: StringFilter<"log"> | string
    timestamp?: DateTimeFilter<"log"> | Date | string
    details?: JsonNullableFilter<"log">
  }

  export type messageUpsertWithWhereUniqueWithoutSenderInput = {
    where: messageWhereUniqueInput
    update: XOR<messageUpdateWithoutSenderInput, messageUncheckedUpdateWithoutSenderInput>
    create: XOR<messageCreateWithoutSenderInput, messageUncheckedCreateWithoutSenderInput>
  }

  export type messageUpdateWithWhereUniqueWithoutSenderInput = {
    where: messageWhereUniqueInput
    data: XOR<messageUpdateWithoutSenderInput, messageUncheckedUpdateWithoutSenderInput>
  }

  export type messageUpdateManyWithWhereWithoutSenderInput = {
    where: messageScalarWhereInput
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyWithoutSenderInput>
  }

  export type messageScalarWhereInput = {
    AND?: messageScalarWhereInput | messageScalarWhereInput[]
    OR?: messageScalarWhereInput[]
    NOT?: messageScalarWhereInput | messageScalarWhereInput[]
    id?: IntFilter<"message"> | number
    senderId?: StringFilter<"message"> | string
    receiverId?: StringFilter<"message"> | string
    message?: StringFilter<"message"> | string
    timestamp?: DateTimeFilter<"message"> | Date | string
    readStatus?: BoolFilter<"message"> | boolean
  }

  export type messageUpsertWithWhereUniqueWithoutReceiverInput = {
    where: messageWhereUniqueInput
    update: XOR<messageUpdateWithoutReceiverInput, messageUncheckedUpdateWithoutReceiverInput>
    create: XOR<messageCreateWithoutReceiverInput, messageUncheckedCreateWithoutReceiverInput>
  }

  export type messageUpdateWithWhereUniqueWithoutReceiverInput = {
    where: messageWhereUniqueInput
    data: XOR<messageUpdateWithoutReceiverInput, messageUncheckedUpdateWithoutReceiverInput>
  }

  export type messageUpdateManyWithWhereWithoutReceiverInput = {
    where: messageScalarWhereInput
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyWithoutReceiverInput>
  }

  export type paymentUpsertWithWhereUniqueWithoutUserInput = {
    where: paymentWhereUniqueInput
    update: XOR<paymentUpdateWithoutUserInput, paymentUncheckedUpdateWithoutUserInput>
    create: XOR<paymentCreateWithoutUserInput, paymentUncheckedCreateWithoutUserInput>
  }

  export type paymentUpdateWithWhereUniqueWithoutUserInput = {
    where: paymentWhereUniqueInput
    data: XOR<paymentUpdateWithoutUserInput, paymentUncheckedUpdateWithoutUserInput>
  }

  export type paymentUpdateManyWithWhereWithoutUserInput = {
    where: paymentScalarWhereInput
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyWithoutUserInput>
  }

  export type paymentScalarWhereInput = {
    AND?: paymentScalarWhereInput | paymentScalarWhereInput[]
    OR?: paymentScalarWhereInput[]
    NOT?: paymentScalarWhereInput | paymentScalarWhereInput[]
    id?: IntFilter<"payment"> | number
    userId?: StringFilter<"payment"> | string
    eventId?: IntFilter<"payment"> | number
    status?: EnumPaymentStatusFilter<"payment"> | $Enums.PaymentStatus
    amount?: DecimalFilter<"payment"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"payment"> | string
    provider?: StringFilter<"payment"> | string
    externalReference?: StringFilter<"payment"> | string
    mpPreferenceId?: StringNullableFilter<"payment"> | string | null
    mpPaymentId?: StringNullableFilter<"payment"> | string | null
    payerEmail?: StringNullableFilter<"payment"> | string | null
    payerName?: StringNullableFilter<"payment"> | string | null
    createdAt?: DateTimeFilter<"payment"> | Date | string
    updatedAt?: DateTimeFilter<"payment"> | Date | string
  }

  export type userCreateWithoutPaymentsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketCreateNestedManyWithoutTransferredFromInput
    participants?: participantCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutRrppUserInput
    account?: accountCreateNestedManyWithoutUserInput
    session?: sessionCreateNestedManyWithoutUserInput
    logs?: logCreateNestedManyWithoutUserInput
    sentMessages?: messageCreateNestedManyWithoutSenderInput
    receivedMessages?: messageCreateNestedManyWithoutReceiverInput
  }

  export type userUncheckedCreateWithoutPaymentsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketUncheckedCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketUncheckedCreateNestedManyWithoutTransferredFromInput
    participants?: participantUncheckedCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutRrppUserInput
    account?: accountUncheckedCreateNestedManyWithoutUserInput
    session?: sessionUncheckedCreateNestedManyWithoutUserInput
    logs?: logUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: messageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: messageUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type userCreateOrConnectWithoutPaymentsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutPaymentsInput, userUncheckedCreateWithoutPaymentsInput>
  }

  export type eventCreateWithoutPaymentsInput = {
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
    ticketTypes?: ticketTypeCreateNestedManyWithoutEventInput
    eventArtists?: eventArtistCreateNestedManyWithoutEventInput
    tickets?: ticketCreateNestedManyWithoutEventInput
    participants?: participantCreateNestedManyWithoutEventInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutEventInput
  }

  export type eventUncheckedCreateWithoutPaymentsInput = {
    id?: number
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
    ticketTypes?: ticketTypeUncheckedCreateNestedManyWithoutEventInput
    eventArtists?: eventArtistUncheckedCreateNestedManyWithoutEventInput
    tickets?: ticketUncheckedCreateNestedManyWithoutEventInput
    participants?: participantUncheckedCreateNestedManyWithoutEventInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutEventInput
  }

  export type eventCreateOrConnectWithoutPaymentsInput = {
    where: eventWhereUniqueInput
    create: XOR<eventCreateWithoutPaymentsInput, eventUncheckedCreateWithoutPaymentsInput>
  }

  export type ticketCreateWithoutPaymentInput = {
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    createdAt?: Date | string
    event: eventCreateNestedOneWithoutTicketsInput
    owner: userCreateNestedOneWithoutTicketsInput
    type: ticketTypeCreateNestedOneWithoutTicketsInput
    transferredFrom?: userCreateNestedOneWithoutTransferredTicketsInput
  }

  export type ticketUncheckedCreateWithoutPaymentInput = {
    id?: number
    eventId: number
    ownerId: string
    typeId: number
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    transferredFromId?: string | null
    createdAt?: Date | string
  }

  export type ticketCreateOrConnectWithoutPaymentInput = {
    where: ticketWhereUniqueInput
    create: XOR<ticketCreateWithoutPaymentInput, ticketUncheckedCreateWithoutPaymentInput>
  }

  export type ticketCreateManyPaymentInputEnvelope = {
    data: ticketCreateManyPaymentInput | ticketCreateManyPaymentInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutPaymentsInput = {
    update: XOR<userUpdateWithoutPaymentsInput, userUncheckedUpdateWithoutPaymentsInput>
    create: XOR<userCreateWithoutPaymentsInput, userUncheckedCreateWithoutPaymentsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutPaymentsInput, userUncheckedUpdateWithoutPaymentsInput>
  }

  export type userUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutRrppUserNestedInput
    account?: accountUpdateManyWithoutUserNestedInput
    session?: sessionUpdateManyWithoutUserNestedInput
    logs?: logUpdateManyWithoutUserNestedInput
    sentMessages?: messageUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUpdateManyWithoutReceiverNestedInput
  }

  export type userUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUncheckedUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUncheckedUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUncheckedUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutRrppUserNestedInput
    account?: accountUncheckedUpdateManyWithoutUserNestedInput
    session?: sessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: logUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: messageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type eventUpsertWithoutPaymentsInput = {
    update: XOR<eventUpdateWithoutPaymentsInput, eventUncheckedUpdateWithoutPaymentsInput>
    create: XOR<eventCreateWithoutPaymentsInput, eventUncheckedCreateWithoutPaymentsInput>
    where?: eventWhereInput
  }

  export type eventUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: eventWhereInput
    data: XOR<eventUpdateWithoutPaymentsInput, eventUncheckedUpdateWithoutPaymentsInput>
  }

  export type eventUpdateWithoutPaymentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketTypes?: ticketTypeUpdateManyWithoutEventNestedInput
    eventArtists?: eventArtistUpdateManyWithoutEventNestedInput
    tickets?: ticketUpdateManyWithoutEventNestedInput
    participants?: participantUpdateManyWithoutEventNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutEventNestedInput
  }

  export type eventUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketTypes?: ticketTypeUncheckedUpdateManyWithoutEventNestedInput
    eventArtists?: eventArtistUncheckedUpdateManyWithoutEventNestedInput
    tickets?: ticketUncheckedUpdateManyWithoutEventNestedInput
    participants?: participantUncheckedUpdateManyWithoutEventNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutEventNestedInput
  }

  export type ticketUpsertWithWhereUniqueWithoutPaymentInput = {
    where: ticketWhereUniqueInput
    update: XOR<ticketUpdateWithoutPaymentInput, ticketUncheckedUpdateWithoutPaymentInput>
    create: XOR<ticketCreateWithoutPaymentInput, ticketUncheckedCreateWithoutPaymentInput>
  }

  export type ticketUpdateWithWhereUniqueWithoutPaymentInput = {
    where: ticketWhereUniqueInput
    data: XOR<ticketUpdateWithoutPaymentInput, ticketUncheckedUpdateWithoutPaymentInput>
  }

  export type ticketUpdateManyWithWhereWithoutPaymentInput = {
    where: ticketScalarWhereInput
    data: XOR<ticketUpdateManyMutationInput, ticketUncheckedUpdateManyWithoutPaymentInput>
  }

  export type ticketTypeCreateWithoutEventInput = {
    code: string
    label: string
    price: Decimal | DecimalJsLike | number | string
    stockMax: number
    stockCurrent: number
    userMaxPerType?: number
    scanExpiration?: Date | string | null
    isVisible?: boolean
    isDisabled?: boolean
    tickets?: ticketCreateNestedManyWithoutTypeInput
  }

  export type ticketTypeUncheckedCreateWithoutEventInput = {
    id?: number
    code: string
    label: string
    price: Decimal | DecimalJsLike | number | string
    stockMax: number
    stockCurrent: number
    userMaxPerType?: number
    scanExpiration?: Date | string | null
    isVisible?: boolean
    isDisabled?: boolean
    tickets?: ticketUncheckedCreateNestedManyWithoutTypeInput
  }

  export type ticketTypeCreateOrConnectWithoutEventInput = {
    where: ticketTypeWhereUniqueInput
    create: XOR<ticketTypeCreateWithoutEventInput, ticketTypeUncheckedCreateWithoutEventInput>
  }

  export type ticketTypeCreateManyEventInputEnvelope = {
    data: ticketTypeCreateManyEventInput | ticketTypeCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type eventArtistCreateWithoutEventInput = {
    order?: number | null
    slotTime?: string | null
    isHeadliner?: boolean
    artist: artistCreateNestedOneWithoutEventArtistsInput
  }

  export type eventArtistUncheckedCreateWithoutEventInput = {
    artistId: number
    order?: number | null
    slotTime?: string | null
    isHeadliner?: boolean
  }

  export type eventArtistCreateOrConnectWithoutEventInput = {
    where: eventArtistWhereUniqueInput
    create: XOR<eventArtistCreateWithoutEventInput, eventArtistUncheckedCreateWithoutEventInput>
  }

  export type eventArtistCreateManyEventInputEnvelope = {
    data: eventArtistCreateManyEventInput | eventArtistCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type ticketCreateWithoutEventInput = {
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    createdAt?: Date | string
    owner: userCreateNestedOneWithoutTicketsInput
    type: ticketTypeCreateNestedOneWithoutTicketsInput
    transferredFrom?: userCreateNestedOneWithoutTransferredTicketsInput
    payment?: paymentCreateNestedOneWithoutTicketsInput
  }

  export type ticketUncheckedCreateWithoutEventInput = {
    id?: number
    ownerId: string
    typeId: number
    paymentId?: number | null
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    transferredFromId?: string | null
    createdAt?: Date | string
  }

  export type ticketCreateOrConnectWithoutEventInput = {
    where: ticketWhereUniqueInput
    create: XOR<ticketCreateWithoutEventInput, ticketUncheckedCreateWithoutEventInput>
  }

  export type ticketCreateManyEventInputEnvelope = {
    data: ticketCreateManyEventInput | ticketCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type participantCreateWithoutEventInput = {
    viaRsvp?: boolean
    qrCode?: string | null
    user: userCreateNestedOneWithoutParticipantsInput
  }

  export type participantUncheckedCreateWithoutEventInput = {
    userId: string
    viaRsvp?: boolean
    qrCode?: string | null
  }

  export type participantCreateOrConnectWithoutEventInput = {
    where: participantWhereUniqueInput
    create: XOR<participantCreateWithoutEventInput, participantUncheckedCreateWithoutEventInput>
  }

  export type participantCreateManyEventInputEnvelope = {
    data: participantCreateManyEventInput | participantCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type rrppAssignmentCreateWithoutEventInput = {
    commissionRate?: Decimal | DecimalJsLike | number | string
    freesGranted?: number
    rrppUser: userCreateNestedOneWithoutRrppAssignmentsInput
  }

  export type rrppAssignmentUncheckedCreateWithoutEventInput = {
    rrppUserId: string
    commissionRate?: Decimal | DecimalJsLike | number | string
    freesGranted?: number
  }

  export type rrppAssignmentCreateOrConnectWithoutEventInput = {
    where: rrppAssignmentWhereUniqueInput
    create: XOR<rrppAssignmentCreateWithoutEventInput, rrppAssignmentUncheckedCreateWithoutEventInput>
  }

  export type rrppAssignmentCreateManyEventInputEnvelope = {
    data: rrppAssignmentCreateManyEventInput | rrppAssignmentCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type paymentCreateWithoutEventInput = {
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    provider?: string
    externalReference: string
    mpPreferenceId?: string | null
    mpPaymentId?: string | null
    payerEmail?: string | null
    payerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: userCreateNestedOneWithoutPaymentsInput
    tickets?: ticketCreateNestedManyWithoutPaymentInput
  }

  export type paymentUncheckedCreateWithoutEventInput = {
    id?: number
    userId: string
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    provider?: string
    externalReference: string
    mpPreferenceId?: string | null
    mpPaymentId?: string | null
    payerEmail?: string | null
    payerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tickets?: ticketUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type paymentCreateOrConnectWithoutEventInput = {
    where: paymentWhereUniqueInput
    create: XOR<paymentCreateWithoutEventInput, paymentUncheckedCreateWithoutEventInput>
  }

  export type paymentCreateManyEventInputEnvelope = {
    data: paymentCreateManyEventInput | paymentCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type ticketTypeUpsertWithWhereUniqueWithoutEventInput = {
    where: ticketTypeWhereUniqueInput
    update: XOR<ticketTypeUpdateWithoutEventInput, ticketTypeUncheckedUpdateWithoutEventInput>
    create: XOR<ticketTypeCreateWithoutEventInput, ticketTypeUncheckedCreateWithoutEventInput>
  }

  export type ticketTypeUpdateWithWhereUniqueWithoutEventInput = {
    where: ticketTypeWhereUniqueInput
    data: XOR<ticketTypeUpdateWithoutEventInput, ticketTypeUncheckedUpdateWithoutEventInput>
  }

  export type ticketTypeUpdateManyWithWhereWithoutEventInput = {
    where: ticketTypeScalarWhereInput
    data: XOR<ticketTypeUpdateManyMutationInput, ticketTypeUncheckedUpdateManyWithoutEventInput>
  }

  export type ticketTypeScalarWhereInput = {
    AND?: ticketTypeScalarWhereInput | ticketTypeScalarWhereInput[]
    OR?: ticketTypeScalarWhereInput[]
    NOT?: ticketTypeScalarWhereInput | ticketTypeScalarWhereInput[]
    id?: IntFilter<"ticketType"> | number
    eventId?: IntFilter<"ticketType"> | number
    code?: StringFilter<"ticketType"> | string
    label?: StringFilter<"ticketType"> | string
    price?: DecimalFilter<"ticketType"> | Decimal | DecimalJsLike | number | string
    stockMax?: IntFilter<"ticketType"> | number
    stockCurrent?: IntFilter<"ticketType"> | number
    userMaxPerType?: IntFilter<"ticketType"> | number
    scanExpiration?: DateTimeNullableFilter<"ticketType"> | Date | string | null
    isVisible?: BoolFilter<"ticketType"> | boolean
    isDisabled?: BoolFilter<"ticketType"> | boolean
  }

  export type eventArtistUpsertWithWhereUniqueWithoutEventInput = {
    where: eventArtistWhereUniqueInput
    update: XOR<eventArtistUpdateWithoutEventInput, eventArtistUncheckedUpdateWithoutEventInput>
    create: XOR<eventArtistCreateWithoutEventInput, eventArtistUncheckedCreateWithoutEventInput>
  }

  export type eventArtistUpdateWithWhereUniqueWithoutEventInput = {
    where: eventArtistWhereUniqueInput
    data: XOR<eventArtistUpdateWithoutEventInput, eventArtistUncheckedUpdateWithoutEventInput>
  }

  export type eventArtistUpdateManyWithWhereWithoutEventInput = {
    where: eventArtistScalarWhereInput
    data: XOR<eventArtistUpdateManyMutationInput, eventArtistUncheckedUpdateManyWithoutEventInput>
  }

  export type eventArtistScalarWhereInput = {
    AND?: eventArtistScalarWhereInput | eventArtistScalarWhereInput[]
    OR?: eventArtistScalarWhereInput[]
    NOT?: eventArtistScalarWhereInput | eventArtistScalarWhereInput[]
    eventId?: IntFilter<"eventArtist"> | number
    artistId?: IntFilter<"eventArtist"> | number
    order?: IntNullableFilter<"eventArtist"> | number | null
    slotTime?: StringNullableFilter<"eventArtist"> | string | null
    isHeadliner?: BoolFilter<"eventArtist"> | boolean
  }

  export type ticketUpsertWithWhereUniqueWithoutEventInput = {
    where: ticketWhereUniqueInput
    update: XOR<ticketUpdateWithoutEventInput, ticketUncheckedUpdateWithoutEventInput>
    create: XOR<ticketCreateWithoutEventInput, ticketUncheckedCreateWithoutEventInput>
  }

  export type ticketUpdateWithWhereUniqueWithoutEventInput = {
    where: ticketWhereUniqueInput
    data: XOR<ticketUpdateWithoutEventInput, ticketUncheckedUpdateWithoutEventInput>
  }

  export type ticketUpdateManyWithWhereWithoutEventInput = {
    where: ticketScalarWhereInput
    data: XOR<ticketUpdateManyMutationInput, ticketUncheckedUpdateManyWithoutEventInput>
  }

  export type participantUpsertWithWhereUniqueWithoutEventInput = {
    where: participantWhereUniqueInput
    update: XOR<participantUpdateWithoutEventInput, participantUncheckedUpdateWithoutEventInput>
    create: XOR<participantCreateWithoutEventInput, participantUncheckedCreateWithoutEventInput>
  }

  export type participantUpdateWithWhereUniqueWithoutEventInput = {
    where: participantWhereUniqueInput
    data: XOR<participantUpdateWithoutEventInput, participantUncheckedUpdateWithoutEventInput>
  }

  export type participantUpdateManyWithWhereWithoutEventInput = {
    where: participantScalarWhereInput
    data: XOR<participantUpdateManyMutationInput, participantUncheckedUpdateManyWithoutEventInput>
  }

  export type rrppAssignmentUpsertWithWhereUniqueWithoutEventInput = {
    where: rrppAssignmentWhereUniqueInput
    update: XOR<rrppAssignmentUpdateWithoutEventInput, rrppAssignmentUncheckedUpdateWithoutEventInput>
    create: XOR<rrppAssignmentCreateWithoutEventInput, rrppAssignmentUncheckedCreateWithoutEventInput>
  }

  export type rrppAssignmentUpdateWithWhereUniqueWithoutEventInput = {
    where: rrppAssignmentWhereUniqueInput
    data: XOR<rrppAssignmentUpdateWithoutEventInput, rrppAssignmentUncheckedUpdateWithoutEventInput>
  }

  export type rrppAssignmentUpdateManyWithWhereWithoutEventInput = {
    where: rrppAssignmentScalarWhereInput
    data: XOR<rrppAssignmentUpdateManyMutationInput, rrppAssignmentUncheckedUpdateManyWithoutEventInput>
  }

  export type paymentUpsertWithWhereUniqueWithoutEventInput = {
    where: paymentWhereUniqueInput
    update: XOR<paymentUpdateWithoutEventInput, paymentUncheckedUpdateWithoutEventInput>
    create: XOR<paymentCreateWithoutEventInput, paymentUncheckedCreateWithoutEventInput>
  }

  export type paymentUpdateWithWhereUniqueWithoutEventInput = {
    where: paymentWhereUniqueInput
    data: XOR<paymentUpdateWithoutEventInput, paymentUncheckedUpdateWithoutEventInput>
  }

  export type paymentUpdateManyWithWhereWithoutEventInput = {
    where: paymentScalarWhereInput
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyWithoutEventInput>
  }

  export type eventArtistCreateWithoutArtistInput = {
    order?: number | null
    slotTime?: string | null
    isHeadliner?: boolean
    event: eventCreateNestedOneWithoutEventArtistsInput
  }

  export type eventArtistUncheckedCreateWithoutArtistInput = {
    eventId: number
    order?: number | null
    slotTime?: string | null
    isHeadliner?: boolean
  }

  export type eventArtistCreateOrConnectWithoutArtistInput = {
    where: eventArtistWhereUniqueInput
    create: XOR<eventArtistCreateWithoutArtistInput, eventArtistUncheckedCreateWithoutArtistInput>
  }

  export type eventArtistCreateManyArtistInputEnvelope = {
    data: eventArtistCreateManyArtistInput | eventArtistCreateManyArtistInput[]
    skipDuplicates?: boolean
  }

  export type eventArtistUpsertWithWhereUniqueWithoutArtistInput = {
    where: eventArtistWhereUniqueInput
    update: XOR<eventArtistUpdateWithoutArtistInput, eventArtistUncheckedUpdateWithoutArtistInput>
    create: XOR<eventArtistCreateWithoutArtistInput, eventArtistUncheckedCreateWithoutArtistInput>
  }

  export type eventArtistUpdateWithWhereUniqueWithoutArtistInput = {
    where: eventArtistWhereUniqueInput
    data: XOR<eventArtistUpdateWithoutArtistInput, eventArtistUncheckedUpdateWithoutArtistInput>
  }

  export type eventArtistUpdateManyWithWhereWithoutArtistInput = {
    where: eventArtistScalarWhereInput
    data: XOR<eventArtistUpdateManyMutationInput, eventArtistUncheckedUpdateManyWithoutArtistInput>
  }

  export type artistCreateWithoutEventArtistsInput = {
    name: string
    bio?: string | null
    imageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
  }

  export type artistUncheckedCreateWithoutEventArtistsInput = {
    id?: number
    name: string
    bio?: string | null
    imageUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
  }

  export type artistCreateOrConnectWithoutEventArtistsInput = {
    where: artistWhereUniqueInput
    create: XOR<artistCreateWithoutEventArtistsInput, artistUncheckedCreateWithoutEventArtistsInput>
  }

  export type eventCreateWithoutEventArtistsInput = {
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
    ticketTypes?: ticketTypeCreateNestedManyWithoutEventInput
    tickets?: ticketCreateNestedManyWithoutEventInput
    participants?: participantCreateNestedManyWithoutEventInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutEventInput
    payments?: paymentCreateNestedManyWithoutEventInput
  }

  export type eventUncheckedCreateWithoutEventArtistsInput = {
    id?: number
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
    ticketTypes?: ticketTypeUncheckedCreateNestedManyWithoutEventInput
    tickets?: ticketUncheckedCreateNestedManyWithoutEventInput
    participants?: participantUncheckedCreateNestedManyWithoutEventInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutEventInput
    payments?: paymentUncheckedCreateNestedManyWithoutEventInput
  }

  export type eventCreateOrConnectWithoutEventArtistsInput = {
    where: eventWhereUniqueInput
    create: XOR<eventCreateWithoutEventArtistsInput, eventUncheckedCreateWithoutEventArtistsInput>
  }

  export type artistUpsertWithoutEventArtistsInput = {
    update: XOR<artistUpdateWithoutEventArtistsInput, artistUncheckedUpdateWithoutEventArtistsInput>
    create: XOR<artistCreateWithoutEventArtistsInput, artistUncheckedCreateWithoutEventArtistsInput>
    where?: artistWhereInput
  }

  export type artistUpdateToOneWithWhereWithoutEventArtistsInput = {
    where?: artistWhereInput
    data: XOR<artistUpdateWithoutEventArtistsInput, artistUncheckedUpdateWithoutEventArtistsInput>
  }

  export type artistUpdateWithoutEventArtistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
  }

  export type artistUncheckedUpdateWithoutEventArtistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
  }

  export type eventUpsertWithoutEventArtistsInput = {
    update: XOR<eventUpdateWithoutEventArtistsInput, eventUncheckedUpdateWithoutEventArtistsInput>
    create: XOR<eventCreateWithoutEventArtistsInput, eventUncheckedCreateWithoutEventArtistsInput>
    where?: eventWhereInput
  }

  export type eventUpdateToOneWithWhereWithoutEventArtistsInput = {
    where?: eventWhereInput
    data: XOR<eventUpdateWithoutEventArtistsInput, eventUncheckedUpdateWithoutEventArtistsInput>
  }

  export type eventUpdateWithoutEventArtistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketTypes?: ticketTypeUpdateManyWithoutEventNestedInput
    tickets?: ticketUpdateManyWithoutEventNestedInput
    participants?: participantUpdateManyWithoutEventNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutEventNestedInput
    payments?: paymentUpdateManyWithoutEventNestedInput
  }

  export type eventUncheckedUpdateWithoutEventArtistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketTypes?: ticketTypeUncheckedUpdateManyWithoutEventNestedInput
    tickets?: ticketUncheckedUpdateManyWithoutEventNestedInput
    participants?: participantUncheckedUpdateManyWithoutEventNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutEventNestedInput
    payments?: paymentUncheckedUpdateManyWithoutEventNestedInput
  }

  export type eventCreateWithoutTicketTypesInput = {
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
    eventArtists?: eventArtistCreateNestedManyWithoutEventInput
    tickets?: ticketCreateNestedManyWithoutEventInput
    participants?: participantCreateNestedManyWithoutEventInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutEventInput
    payments?: paymentCreateNestedManyWithoutEventInput
  }

  export type eventUncheckedCreateWithoutTicketTypesInput = {
    id?: number
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
    eventArtists?: eventArtistUncheckedCreateNestedManyWithoutEventInput
    tickets?: ticketUncheckedCreateNestedManyWithoutEventInput
    participants?: participantUncheckedCreateNestedManyWithoutEventInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutEventInput
    payments?: paymentUncheckedCreateNestedManyWithoutEventInput
  }

  export type eventCreateOrConnectWithoutTicketTypesInput = {
    where: eventWhereUniqueInput
    create: XOR<eventCreateWithoutTicketTypesInput, eventUncheckedCreateWithoutTicketTypesInput>
  }

  export type ticketCreateWithoutTypeInput = {
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    createdAt?: Date | string
    event: eventCreateNestedOneWithoutTicketsInput
    owner: userCreateNestedOneWithoutTicketsInput
    transferredFrom?: userCreateNestedOneWithoutTransferredTicketsInput
    payment?: paymentCreateNestedOneWithoutTicketsInput
  }

  export type ticketUncheckedCreateWithoutTypeInput = {
    id?: number
    eventId: number
    ownerId: string
    paymentId?: number | null
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    transferredFromId?: string | null
    createdAt?: Date | string
  }

  export type ticketCreateOrConnectWithoutTypeInput = {
    where: ticketWhereUniqueInput
    create: XOR<ticketCreateWithoutTypeInput, ticketUncheckedCreateWithoutTypeInput>
  }

  export type ticketCreateManyTypeInputEnvelope = {
    data: ticketCreateManyTypeInput | ticketCreateManyTypeInput[]
    skipDuplicates?: boolean
  }

  export type eventUpsertWithoutTicketTypesInput = {
    update: XOR<eventUpdateWithoutTicketTypesInput, eventUncheckedUpdateWithoutTicketTypesInput>
    create: XOR<eventCreateWithoutTicketTypesInput, eventUncheckedCreateWithoutTicketTypesInput>
    where?: eventWhereInput
  }

  export type eventUpdateToOneWithWhereWithoutTicketTypesInput = {
    where?: eventWhereInput
    data: XOR<eventUpdateWithoutTicketTypesInput, eventUncheckedUpdateWithoutTicketTypesInput>
  }

  export type eventUpdateWithoutTicketTypesInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventArtists?: eventArtistUpdateManyWithoutEventNestedInput
    tickets?: ticketUpdateManyWithoutEventNestedInput
    participants?: participantUpdateManyWithoutEventNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutEventNestedInput
    payments?: paymentUpdateManyWithoutEventNestedInput
  }

  export type eventUncheckedUpdateWithoutTicketTypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventArtists?: eventArtistUncheckedUpdateManyWithoutEventNestedInput
    tickets?: ticketUncheckedUpdateManyWithoutEventNestedInput
    participants?: participantUncheckedUpdateManyWithoutEventNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutEventNestedInput
    payments?: paymentUncheckedUpdateManyWithoutEventNestedInput
  }

  export type ticketUpsertWithWhereUniqueWithoutTypeInput = {
    where: ticketWhereUniqueInput
    update: XOR<ticketUpdateWithoutTypeInput, ticketUncheckedUpdateWithoutTypeInput>
    create: XOR<ticketCreateWithoutTypeInput, ticketUncheckedCreateWithoutTypeInput>
  }

  export type ticketUpdateWithWhereUniqueWithoutTypeInput = {
    where: ticketWhereUniqueInput
    data: XOR<ticketUpdateWithoutTypeInput, ticketUncheckedUpdateWithoutTypeInput>
  }

  export type ticketUpdateManyWithWhereWithoutTypeInput = {
    where: ticketScalarWhereInput
    data: XOR<ticketUpdateManyMutationInput, ticketUncheckedUpdateManyWithoutTypeInput>
  }

  export type eventCreateWithoutTicketsInput = {
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
    ticketTypes?: ticketTypeCreateNestedManyWithoutEventInput
    eventArtists?: eventArtistCreateNestedManyWithoutEventInput
    participants?: participantCreateNestedManyWithoutEventInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutEventInput
    payments?: paymentCreateNestedManyWithoutEventInput
  }

  export type eventUncheckedCreateWithoutTicketsInput = {
    id?: number
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
    ticketTypes?: ticketTypeUncheckedCreateNestedManyWithoutEventInput
    eventArtists?: eventArtistUncheckedCreateNestedManyWithoutEventInput
    participants?: participantUncheckedCreateNestedManyWithoutEventInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutEventInput
    payments?: paymentUncheckedCreateNestedManyWithoutEventInput
  }

  export type eventCreateOrConnectWithoutTicketsInput = {
    where: eventWhereUniqueInput
    create: XOR<eventCreateWithoutTicketsInput, eventUncheckedCreateWithoutTicketsInput>
  }

  export type userCreateWithoutTicketsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    transferredTickets?: ticketCreateNestedManyWithoutTransferredFromInput
    participants?: participantCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutRrppUserInput
    account?: accountCreateNestedManyWithoutUserInput
    session?: sessionCreateNestedManyWithoutUserInput
    logs?: logCreateNestedManyWithoutUserInput
    sentMessages?: messageCreateNestedManyWithoutSenderInput
    receivedMessages?: messageCreateNestedManyWithoutReceiverInput
    payments?: paymentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutTicketsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    transferredTickets?: ticketUncheckedCreateNestedManyWithoutTransferredFromInput
    participants?: participantUncheckedCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutRrppUserInput
    account?: accountUncheckedCreateNestedManyWithoutUserInput
    session?: sessionUncheckedCreateNestedManyWithoutUserInput
    logs?: logUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: messageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: messageUncheckedCreateNestedManyWithoutReceiverInput
    payments?: paymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutTicketsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutTicketsInput, userUncheckedCreateWithoutTicketsInput>
  }

  export type ticketTypeCreateWithoutTicketsInput = {
    code: string
    label: string
    price: Decimal | DecimalJsLike | number | string
    stockMax: number
    stockCurrent: number
    userMaxPerType?: number
    scanExpiration?: Date | string | null
    isVisible?: boolean
    isDisabled?: boolean
    event: eventCreateNestedOneWithoutTicketTypesInput
  }

  export type ticketTypeUncheckedCreateWithoutTicketsInput = {
    id?: number
    eventId: number
    code: string
    label: string
    price: Decimal | DecimalJsLike | number | string
    stockMax: number
    stockCurrent: number
    userMaxPerType?: number
    scanExpiration?: Date | string | null
    isVisible?: boolean
    isDisabled?: boolean
  }

  export type ticketTypeCreateOrConnectWithoutTicketsInput = {
    where: ticketTypeWhereUniqueInput
    create: XOR<ticketTypeCreateWithoutTicketsInput, ticketTypeUncheckedCreateWithoutTicketsInput>
  }

  export type userCreateWithoutTransferredTicketsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketCreateNestedManyWithoutOwnerInput
    participants?: participantCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutRrppUserInput
    account?: accountCreateNestedManyWithoutUserInput
    session?: sessionCreateNestedManyWithoutUserInput
    logs?: logCreateNestedManyWithoutUserInput
    sentMessages?: messageCreateNestedManyWithoutSenderInput
    receivedMessages?: messageCreateNestedManyWithoutReceiverInput
    payments?: paymentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutTransferredTicketsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketUncheckedCreateNestedManyWithoutOwnerInput
    participants?: participantUncheckedCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutRrppUserInput
    account?: accountUncheckedCreateNestedManyWithoutUserInput
    session?: sessionUncheckedCreateNestedManyWithoutUserInput
    logs?: logUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: messageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: messageUncheckedCreateNestedManyWithoutReceiverInput
    payments?: paymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutTransferredTicketsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutTransferredTicketsInput, userUncheckedCreateWithoutTransferredTicketsInput>
  }

  export type paymentCreateWithoutTicketsInput = {
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    provider?: string
    externalReference: string
    mpPreferenceId?: string | null
    mpPaymentId?: string | null
    payerEmail?: string | null
    payerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: userCreateNestedOneWithoutPaymentsInput
    event: eventCreateNestedOneWithoutPaymentsInput
  }

  export type paymentUncheckedCreateWithoutTicketsInput = {
    id?: number
    userId: string
    eventId: number
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    provider?: string
    externalReference: string
    mpPreferenceId?: string | null
    mpPaymentId?: string | null
    payerEmail?: string | null
    payerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type paymentCreateOrConnectWithoutTicketsInput = {
    where: paymentWhereUniqueInput
    create: XOR<paymentCreateWithoutTicketsInput, paymentUncheckedCreateWithoutTicketsInput>
  }

  export type eventUpsertWithoutTicketsInput = {
    update: XOR<eventUpdateWithoutTicketsInput, eventUncheckedUpdateWithoutTicketsInput>
    create: XOR<eventCreateWithoutTicketsInput, eventUncheckedCreateWithoutTicketsInput>
    where?: eventWhereInput
  }

  export type eventUpdateToOneWithWhereWithoutTicketsInput = {
    where?: eventWhereInput
    data: XOR<eventUpdateWithoutTicketsInput, eventUncheckedUpdateWithoutTicketsInput>
  }

  export type eventUpdateWithoutTicketsInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketTypes?: ticketTypeUpdateManyWithoutEventNestedInput
    eventArtists?: eventArtistUpdateManyWithoutEventNestedInput
    participants?: participantUpdateManyWithoutEventNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutEventNestedInput
    payments?: paymentUpdateManyWithoutEventNestedInput
  }

  export type eventUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketTypes?: ticketTypeUncheckedUpdateManyWithoutEventNestedInput
    eventArtists?: eventArtistUncheckedUpdateManyWithoutEventNestedInput
    participants?: participantUncheckedUpdateManyWithoutEventNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutEventNestedInput
    payments?: paymentUncheckedUpdateManyWithoutEventNestedInput
  }

  export type userUpsertWithoutTicketsInput = {
    update: XOR<userUpdateWithoutTicketsInput, userUncheckedUpdateWithoutTicketsInput>
    create: XOR<userCreateWithoutTicketsInput, userUncheckedCreateWithoutTicketsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutTicketsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutTicketsInput, userUncheckedUpdateWithoutTicketsInput>
  }

  export type userUpdateWithoutTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    transferredTickets?: ticketUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutRrppUserNestedInput
    account?: accountUpdateManyWithoutUserNestedInput
    session?: sessionUpdateManyWithoutUserNestedInput
    logs?: logUpdateManyWithoutUserNestedInput
    sentMessages?: messageUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUpdateManyWithoutReceiverNestedInput
    payments?: paymentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    transferredTickets?: ticketUncheckedUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUncheckedUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutRrppUserNestedInput
    account?: accountUncheckedUpdateManyWithoutUserNestedInput
    session?: sessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: logUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: messageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUncheckedUpdateManyWithoutReceiverNestedInput
    payments?: paymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ticketTypeUpsertWithoutTicketsInput = {
    update: XOR<ticketTypeUpdateWithoutTicketsInput, ticketTypeUncheckedUpdateWithoutTicketsInput>
    create: XOR<ticketTypeCreateWithoutTicketsInput, ticketTypeUncheckedCreateWithoutTicketsInput>
    where?: ticketTypeWhereInput
  }

  export type ticketTypeUpdateToOneWithWhereWithoutTicketsInput = {
    where?: ticketTypeWhereInput
    data: XOR<ticketTypeUpdateWithoutTicketsInput, ticketTypeUncheckedUpdateWithoutTicketsInput>
  }

  export type ticketTypeUpdateWithoutTicketsInput = {
    code?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockMax?: IntFieldUpdateOperationsInput | number
    stockCurrent?: IntFieldUpdateOperationsInput | number
    userMaxPerType?: IntFieldUpdateOperationsInput | number
    scanExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    event?: eventUpdateOneRequiredWithoutTicketTypesNestedInput
  }

  export type ticketTypeUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockMax?: IntFieldUpdateOperationsInput | number
    stockCurrent?: IntFieldUpdateOperationsInput | number
    userMaxPerType?: IntFieldUpdateOperationsInput | number
    scanExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userUpsertWithoutTransferredTicketsInput = {
    update: XOR<userUpdateWithoutTransferredTicketsInput, userUncheckedUpdateWithoutTransferredTicketsInput>
    create: XOR<userCreateWithoutTransferredTicketsInput, userUncheckedCreateWithoutTransferredTicketsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutTransferredTicketsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutTransferredTicketsInput, userUncheckedUpdateWithoutTransferredTicketsInput>
  }

  export type userUpdateWithoutTransferredTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUpdateManyWithoutOwnerNestedInput
    participants?: participantUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutRrppUserNestedInput
    account?: accountUpdateManyWithoutUserNestedInput
    session?: sessionUpdateManyWithoutUserNestedInput
    logs?: logUpdateManyWithoutUserNestedInput
    sentMessages?: messageUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUpdateManyWithoutReceiverNestedInput
    payments?: paymentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutTransferredTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUncheckedUpdateManyWithoutOwnerNestedInput
    participants?: participantUncheckedUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutRrppUserNestedInput
    account?: accountUncheckedUpdateManyWithoutUserNestedInput
    session?: sessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: logUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: messageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUncheckedUpdateManyWithoutReceiverNestedInput
    payments?: paymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type paymentUpsertWithoutTicketsInput = {
    update: XOR<paymentUpdateWithoutTicketsInput, paymentUncheckedUpdateWithoutTicketsInput>
    create: XOR<paymentCreateWithoutTicketsInput, paymentUncheckedCreateWithoutTicketsInput>
    where?: paymentWhereInput
  }

  export type paymentUpdateToOneWithWhereWithoutTicketsInput = {
    where?: paymentWhereInput
    data: XOR<paymentUpdateWithoutTicketsInput, paymentUncheckedUpdateWithoutTicketsInput>
  }

  export type paymentUpdateWithoutTicketsInput = {
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    externalReference?: StringFieldUpdateOperationsInput | string
    mpPreferenceId?: NullableStringFieldUpdateOperationsInput | string | null
    mpPaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    payerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    payerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutPaymentsNestedInput
    event?: eventUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type paymentUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: IntFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    externalReference?: StringFieldUpdateOperationsInput | string
    mpPreferenceId?: NullableStringFieldUpdateOperationsInput | string | null
    mpPaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    payerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    payerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userCreateWithoutRrppAssignmentsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketCreateNestedManyWithoutTransferredFromInput
    participants?: participantCreateNestedManyWithoutUserInput
    account?: accountCreateNestedManyWithoutUserInput
    session?: sessionCreateNestedManyWithoutUserInput
    logs?: logCreateNestedManyWithoutUserInput
    sentMessages?: messageCreateNestedManyWithoutSenderInput
    receivedMessages?: messageCreateNestedManyWithoutReceiverInput
    payments?: paymentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutRrppAssignmentsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketUncheckedCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketUncheckedCreateNestedManyWithoutTransferredFromInput
    participants?: participantUncheckedCreateNestedManyWithoutUserInput
    account?: accountUncheckedCreateNestedManyWithoutUserInput
    session?: sessionUncheckedCreateNestedManyWithoutUserInput
    logs?: logUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: messageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: messageUncheckedCreateNestedManyWithoutReceiverInput
    payments?: paymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutRrppAssignmentsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutRrppAssignmentsInput, userUncheckedCreateWithoutRrppAssignmentsInput>
  }

  export type eventCreateWithoutRrppAssignmentsInput = {
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
    ticketTypes?: ticketTypeCreateNestedManyWithoutEventInput
    eventArtists?: eventArtistCreateNestedManyWithoutEventInput
    tickets?: ticketCreateNestedManyWithoutEventInput
    participants?: participantCreateNestedManyWithoutEventInput
    payments?: paymentCreateNestedManyWithoutEventInput
  }

  export type eventUncheckedCreateWithoutRrppAssignmentsInput = {
    id?: number
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
    ticketTypes?: ticketTypeUncheckedCreateNestedManyWithoutEventInput
    eventArtists?: eventArtistUncheckedCreateNestedManyWithoutEventInput
    tickets?: ticketUncheckedCreateNestedManyWithoutEventInput
    participants?: participantUncheckedCreateNestedManyWithoutEventInput
    payments?: paymentUncheckedCreateNestedManyWithoutEventInput
  }

  export type eventCreateOrConnectWithoutRrppAssignmentsInput = {
    where: eventWhereUniqueInput
    create: XOR<eventCreateWithoutRrppAssignmentsInput, eventUncheckedCreateWithoutRrppAssignmentsInput>
  }

  export type userUpsertWithoutRrppAssignmentsInput = {
    update: XOR<userUpdateWithoutRrppAssignmentsInput, userUncheckedUpdateWithoutRrppAssignmentsInput>
    create: XOR<userCreateWithoutRrppAssignmentsInput, userUncheckedCreateWithoutRrppAssignmentsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutRrppAssignmentsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutRrppAssignmentsInput, userUncheckedUpdateWithoutRrppAssignmentsInput>
  }

  export type userUpdateWithoutRrppAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUpdateManyWithoutUserNestedInput
    account?: accountUpdateManyWithoutUserNestedInput
    session?: sessionUpdateManyWithoutUserNestedInput
    logs?: logUpdateManyWithoutUserNestedInput
    sentMessages?: messageUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUpdateManyWithoutReceiverNestedInput
    payments?: paymentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutRrppAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUncheckedUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUncheckedUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUncheckedUpdateManyWithoutUserNestedInput
    account?: accountUncheckedUpdateManyWithoutUserNestedInput
    session?: sessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: logUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: messageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUncheckedUpdateManyWithoutReceiverNestedInput
    payments?: paymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type eventUpsertWithoutRrppAssignmentsInput = {
    update: XOR<eventUpdateWithoutRrppAssignmentsInput, eventUncheckedUpdateWithoutRrppAssignmentsInput>
    create: XOR<eventCreateWithoutRrppAssignmentsInput, eventUncheckedCreateWithoutRrppAssignmentsInput>
    where?: eventWhereInput
  }

  export type eventUpdateToOneWithWhereWithoutRrppAssignmentsInput = {
    where?: eventWhereInput
    data: XOR<eventUpdateWithoutRrppAssignmentsInput, eventUncheckedUpdateWithoutRrppAssignmentsInput>
  }

  export type eventUpdateWithoutRrppAssignmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketTypes?: ticketTypeUpdateManyWithoutEventNestedInput
    eventArtists?: eventArtistUpdateManyWithoutEventNestedInput
    tickets?: ticketUpdateManyWithoutEventNestedInput
    participants?: participantUpdateManyWithoutEventNestedInput
    payments?: paymentUpdateManyWithoutEventNestedInput
  }

  export type eventUncheckedUpdateWithoutRrppAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketTypes?: ticketTypeUncheckedUpdateManyWithoutEventNestedInput
    eventArtists?: eventArtistUncheckedUpdateManyWithoutEventNestedInput
    tickets?: ticketUncheckedUpdateManyWithoutEventNestedInput
    participants?: participantUncheckedUpdateManyWithoutEventNestedInput
    payments?: paymentUncheckedUpdateManyWithoutEventNestedInput
  }

  export type userCreateWithoutParticipantsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketCreateNestedManyWithoutTransferredFromInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutRrppUserInput
    account?: accountCreateNestedManyWithoutUserInput
    session?: sessionCreateNestedManyWithoutUserInput
    logs?: logCreateNestedManyWithoutUserInput
    sentMessages?: messageCreateNestedManyWithoutSenderInput
    receivedMessages?: messageCreateNestedManyWithoutReceiverInput
    payments?: paymentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutParticipantsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketUncheckedCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketUncheckedCreateNestedManyWithoutTransferredFromInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutRrppUserInput
    account?: accountUncheckedCreateNestedManyWithoutUserInput
    session?: sessionUncheckedCreateNestedManyWithoutUserInput
    logs?: logUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: messageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: messageUncheckedCreateNestedManyWithoutReceiverInput
    payments?: paymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutParticipantsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutParticipantsInput, userUncheckedCreateWithoutParticipantsInput>
  }

  export type eventCreateWithoutParticipantsInput = {
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
    ticketTypes?: ticketTypeCreateNestedManyWithoutEventInput
    eventArtists?: eventArtistCreateNestedManyWithoutEventInput
    tickets?: ticketCreateNestedManyWithoutEventInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutEventInput
    payments?: paymentCreateNestedManyWithoutEventInput
  }

  export type eventUncheckedCreateWithoutParticipantsInput = {
    id?: number
    name: string
    date: Date | string
    location: string
    description?: string | null
    bannerUrl?: string | null
    status?: $Enums.EventStatus
    producerId?: number
    capacityTotal?: number | null
    isRsvpAllowed?: boolean
    eventGenre?: string | null
    showRemainingTickets?: boolean
    createdAt?: Date | string
    ticketTypes?: ticketTypeUncheckedCreateNestedManyWithoutEventInput
    eventArtists?: eventArtistUncheckedCreateNestedManyWithoutEventInput
    tickets?: ticketUncheckedCreateNestedManyWithoutEventInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutEventInput
    payments?: paymentUncheckedCreateNestedManyWithoutEventInput
  }

  export type eventCreateOrConnectWithoutParticipantsInput = {
    where: eventWhereUniqueInput
    create: XOR<eventCreateWithoutParticipantsInput, eventUncheckedCreateWithoutParticipantsInput>
  }

  export type userUpsertWithoutParticipantsInput = {
    update: XOR<userUpdateWithoutParticipantsInput, userUncheckedUpdateWithoutParticipantsInput>
    create: XOR<userCreateWithoutParticipantsInput, userUncheckedCreateWithoutParticipantsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutParticipantsInput, userUncheckedUpdateWithoutParticipantsInput>
  }

  export type userUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUpdateManyWithoutTransferredFromNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutRrppUserNestedInput
    account?: accountUpdateManyWithoutUserNestedInput
    session?: sessionUpdateManyWithoutUserNestedInput
    logs?: logUpdateManyWithoutUserNestedInput
    sentMessages?: messageUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUpdateManyWithoutReceiverNestedInput
    payments?: paymentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUncheckedUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUncheckedUpdateManyWithoutTransferredFromNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutRrppUserNestedInput
    account?: accountUncheckedUpdateManyWithoutUserNestedInput
    session?: sessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: logUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: messageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUncheckedUpdateManyWithoutReceiverNestedInput
    payments?: paymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type eventUpsertWithoutParticipantsInput = {
    update: XOR<eventUpdateWithoutParticipantsInput, eventUncheckedUpdateWithoutParticipantsInput>
    create: XOR<eventCreateWithoutParticipantsInput, eventUncheckedCreateWithoutParticipantsInput>
    where?: eventWhereInput
  }

  export type eventUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: eventWhereInput
    data: XOR<eventUpdateWithoutParticipantsInput, eventUncheckedUpdateWithoutParticipantsInput>
  }

  export type eventUpdateWithoutParticipantsInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketTypes?: ticketTypeUpdateManyWithoutEventNestedInput
    eventArtists?: eventArtistUpdateManyWithoutEventNestedInput
    tickets?: ticketUpdateManyWithoutEventNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutEventNestedInput
    payments?: paymentUpdateManyWithoutEventNestedInput
  }

  export type eventUncheckedUpdateWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    producerId?: IntFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    isRsvpAllowed?: BoolFieldUpdateOperationsInput | boolean
    eventGenre?: NullableStringFieldUpdateOperationsInput | string | null
    showRemainingTickets?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketTypes?: ticketTypeUncheckedUpdateManyWithoutEventNestedInput
    eventArtists?: eventArtistUncheckedUpdateManyWithoutEventNestedInput
    tickets?: ticketUncheckedUpdateManyWithoutEventNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutEventNestedInput
    payments?: paymentUncheckedUpdateManyWithoutEventNestedInput
  }

  export type userCreateWithoutLogsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketCreateNestedManyWithoutTransferredFromInput
    participants?: participantCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutRrppUserInput
    account?: accountCreateNestedManyWithoutUserInput
    session?: sessionCreateNestedManyWithoutUserInput
    sentMessages?: messageCreateNestedManyWithoutSenderInput
    receivedMessages?: messageCreateNestedManyWithoutReceiverInput
    payments?: paymentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutLogsInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketUncheckedCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketUncheckedCreateNestedManyWithoutTransferredFromInput
    participants?: participantUncheckedCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutRrppUserInput
    account?: accountUncheckedCreateNestedManyWithoutUserInput
    session?: sessionUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: messageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: messageUncheckedCreateNestedManyWithoutReceiverInput
    payments?: paymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutLogsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutLogsInput, userUncheckedCreateWithoutLogsInput>
  }

  export type userUpsertWithoutLogsInput = {
    update: XOR<userUpdateWithoutLogsInput, userUncheckedUpdateWithoutLogsInput>
    create: XOR<userCreateWithoutLogsInput, userUncheckedCreateWithoutLogsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutLogsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutLogsInput, userUncheckedUpdateWithoutLogsInput>
  }

  export type userUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutRrppUserNestedInput
    account?: accountUpdateManyWithoutUserNestedInput
    session?: sessionUpdateManyWithoutUserNestedInput
    sentMessages?: messageUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUpdateManyWithoutReceiverNestedInput
    payments?: paymentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUncheckedUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUncheckedUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUncheckedUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutRrppUserNestedInput
    account?: accountUncheckedUpdateManyWithoutUserNestedInput
    session?: sessionUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: messageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: messageUncheckedUpdateManyWithoutReceiverNestedInput
    payments?: paymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateWithoutSentMessagesInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketCreateNestedManyWithoutTransferredFromInput
    participants?: participantCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutRrppUserInput
    account?: accountCreateNestedManyWithoutUserInput
    session?: sessionCreateNestedManyWithoutUserInput
    logs?: logCreateNestedManyWithoutUserInput
    receivedMessages?: messageCreateNestedManyWithoutReceiverInput
    payments?: paymentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutSentMessagesInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketUncheckedCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketUncheckedCreateNestedManyWithoutTransferredFromInput
    participants?: participantUncheckedCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutRrppUserInput
    account?: accountUncheckedCreateNestedManyWithoutUserInput
    session?: sessionUncheckedCreateNestedManyWithoutUserInput
    logs?: logUncheckedCreateNestedManyWithoutUserInput
    receivedMessages?: messageUncheckedCreateNestedManyWithoutReceiverInput
    payments?: paymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutSentMessagesInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutSentMessagesInput, userUncheckedCreateWithoutSentMessagesInput>
  }

  export type userCreateWithoutReceivedMessagesInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketCreateNestedManyWithoutTransferredFromInput
    participants?: participantCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentCreateNestedManyWithoutRrppUserInput
    account?: accountCreateNestedManyWithoutUserInput
    session?: sessionCreateNestedManyWithoutUserInput
    logs?: logCreateNestedManyWithoutUserInput
    sentMessages?: messageCreateNestedManyWithoutSenderInput
    payments?: paymentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutReceivedMessagesInput = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    username?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    role?: $Enums.Role
    tickets?: ticketUncheckedCreateNestedManyWithoutOwnerInput
    transferredTickets?: ticketUncheckedCreateNestedManyWithoutTransferredFromInput
    participants?: participantUncheckedCreateNestedManyWithoutUserInput
    rrppAssignments?: rrppAssignmentUncheckedCreateNestedManyWithoutRrppUserInput
    account?: accountUncheckedCreateNestedManyWithoutUserInput
    session?: sessionUncheckedCreateNestedManyWithoutUserInput
    logs?: logUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: messageUncheckedCreateNestedManyWithoutSenderInput
    payments?: paymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutReceivedMessagesInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutReceivedMessagesInput, userUncheckedCreateWithoutReceivedMessagesInput>
  }

  export type userUpsertWithoutSentMessagesInput = {
    update: XOR<userUpdateWithoutSentMessagesInput, userUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<userCreateWithoutSentMessagesInput, userUncheckedCreateWithoutSentMessagesInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutSentMessagesInput, userUncheckedUpdateWithoutSentMessagesInput>
  }

  export type userUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutRrppUserNestedInput
    account?: accountUpdateManyWithoutUserNestedInput
    session?: sessionUpdateManyWithoutUserNestedInput
    logs?: logUpdateManyWithoutUserNestedInput
    receivedMessages?: messageUpdateManyWithoutReceiverNestedInput
    payments?: paymentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUncheckedUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUncheckedUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUncheckedUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutRrppUserNestedInput
    account?: accountUncheckedUpdateManyWithoutUserNestedInput
    session?: sessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: logUncheckedUpdateManyWithoutUserNestedInput
    receivedMessages?: messageUncheckedUpdateManyWithoutReceiverNestedInput
    payments?: paymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userUpsertWithoutReceivedMessagesInput = {
    update: XOR<userUpdateWithoutReceivedMessagesInput, userUncheckedUpdateWithoutReceivedMessagesInput>
    create: XOR<userCreateWithoutReceivedMessagesInput, userUncheckedCreateWithoutReceivedMessagesInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutReceivedMessagesInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutReceivedMessagesInput, userUncheckedUpdateWithoutReceivedMessagesInput>
  }

  export type userUpdateWithoutReceivedMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUpdateManyWithoutRrppUserNestedInput
    account?: accountUpdateManyWithoutUserNestedInput
    session?: sessionUpdateManyWithoutUserNestedInput
    logs?: logUpdateManyWithoutUserNestedInput
    sentMessages?: messageUpdateManyWithoutSenderNestedInput
    payments?: paymentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutReceivedMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    tickets?: ticketUncheckedUpdateManyWithoutOwnerNestedInput
    transferredTickets?: ticketUncheckedUpdateManyWithoutTransferredFromNestedInput
    participants?: participantUncheckedUpdateManyWithoutUserNestedInput
    rrppAssignments?: rrppAssignmentUncheckedUpdateManyWithoutRrppUserNestedInput
    account?: accountUncheckedUpdateManyWithoutUserNestedInput
    session?: sessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: logUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: messageUncheckedUpdateManyWithoutSenderNestedInput
    payments?: paymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ticketCreateManyOwnerInput = {
    id?: number
    eventId: number
    typeId: number
    paymentId?: number | null
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    transferredFromId?: string | null
    createdAt?: Date | string
  }

  export type ticketCreateManyTransferredFromInput = {
    id?: number
    eventId: number
    ownerId: string
    typeId: number
    paymentId?: number | null
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    createdAt?: Date | string
  }

  export type participantCreateManyUserInput = {
    eventId: number
    viaRsvp?: boolean
    qrCode?: string | null
  }

  export type rrppAssignmentCreateManyRrppUserInput = {
    eventId: number
    commissionRate?: Decimal | DecimalJsLike | number | string
    freesGranted?: number
  }

  export type accountCreateManyUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type sessionCreateManyUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type logCreateManyUserInput = {
    id?: number
    action: string
    timestamp?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type messageCreateManySenderInput = {
    id?: number
    receiverId: string
    message: string
    timestamp?: Date | string
    readStatus?: boolean
  }

  export type messageCreateManyReceiverInput = {
    id?: number
    senderId: string
    message: string
    timestamp?: Date | string
    readStatus?: boolean
  }

  export type paymentCreateManyUserInput = {
    id?: number
    eventId: number
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    provider?: string
    externalReference: string
    mpPreferenceId?: string | null
    mpPaymentId?: string | null
    payerEmail?: string | null
    payerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ticketUpdateWithoutOwnerInput = {
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: eventUpdateOneRequiredWithoutTicketsNestedInput
    type?: ticketTypeUpdateOneRequiredWithoutTicketsNestedInput
    transferredFrom?: userUpdateOneWithoutTransferredTicketsNestedInput
    payment?: paymentUpdateOneWithoutTicketsNestedInput
  }

  export type ticketUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    paymentId?: NullableIntFieldUpdateOperationsInput | number | null
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    transferredFromId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    paymentId?: NullableIntFieldUpdateOperationsInput | number | null
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    transferredFromId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketUpdateWithoutTransferredFromInput = {
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: eventUpdateOneRequiredWithoutTicketsNestedInput
    owner?: userUpdateOneRequiredWithoutTicketsNestedInput
    type?: ticketTypeUpdateOneRequiredWithoutTicketsNestedInput
    payment?: paymentUpdateOneWithoutTicketsNestedInput
  }

  export type ticketUncheckedUpdateWithoutTransferredFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    paymentId?: NullableIntFieldUpdateOperationsInput | number | null
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketUncheckedUpdateManyWithoutTransferredFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    paymentId?: NullableIntFieldUpdateOperationsInput | number | null
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type participantUpdateWithoutUserInput = {
    viaRsvp?: BoolFieldUpdateOperationsInput | boolean
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    event?: eventUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type participantUncheckedUpdateWithoutUserInput = {
    eventId?: IntFieldUpdateOperationsInput | number
    viaRsvp?: BoolFieldUpdateOperationsInput | boolean
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type participantUncheckedUpdateManyWithoutUserInput = {
    eventId?: IntFieldUpdateOperationsInput | number
    viaRsvp?: BoolFieldUpdateOperationsInput | boolean
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type rrppAssignmentUpdateWithoutRrppUserInput = {
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    freesGranted?: IntFieldUpdateOperationsInput | number
    event?: eventUpdateOneRequiredWithoutRrppAssignmentsNestedInput
  }

  export type rrppAssignmentUncheckedUpdateWithoutRrppUserInput = {
    eventId?: IntFieldUpdateOperationsInput | number
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    freesGranted?: IntFieldUpdateOperationsInput | number
  }

  export type rrppAssignmentUncheckedUpdateManyWithoutRrppUserInput = {
    eventId?: IntFieldUpdateOperationsInput | number
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    freesGranted?: IntFieldUpdateOperationsInput | number
  }

  export type accountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type accountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type accountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type logUpdateWithoutUserInput = {
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type logUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type logUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type messageUpdateWithoutSenderInput = {
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: BoolFieldUpdateOperationsInput | boolean
    receiver?: userUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type messageUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    receiverId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: BoolFieldUpdateOperationsInput | boolean
  }

  export type messageUncheckedUpdateManyWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    receiverId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: BoolFieldUpdateOperationsInput | boolean
  }

  export type messageUpdateWithoutReceiverInput = {
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: BoolFieldUpdateOperationsInput | boolean
    sender?: userUpdateOneRequiredWithoutSentMessagesNestedInput
  }

  export type messageUncheckedUpdateWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: BoolFieldUpdateOperationsInput | boolean
  }

  export type messageUncheckedUpdateManyWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: BoolFieldUpdateOperationsInput | boolean
  }

  export type paymentUpdateWithoutUserInput = {
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    externalReference?: StringFieldUpdateOperationsInput | string
    mpPreferenceId?: NullableStringFieldUpdateOperationsInput | string | null
    mpPaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    payerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    payerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: eventUpdateOneRequiredWithoutPaymentsNestedInput
    tickets?: ticketUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    externalReference?: StringFieldUpdateOperationsInput | string
    mpPreferenceId?: NullableStringFieldUpdateOperationsInput | string | null
    mpPaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    payerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    payerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: ticketUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    externalReference?: StringFieldUpdateOperationsInput | string
    mpPreferenceId?: NullableStringFieldUpdateOperationsInput | string | null
    mpPaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    payerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    payerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketCreateManyPaymentInput = {
    id?: number
    eventId: number
    ownerId: string
    typeId: number
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    transferredFromId?: string | null
    createdAt?: Date | string
  }

  export type ticketUpdateWithoutPaymentInput = {
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: eventUpdateOneRequiredWithoutTicketsNestedInput
    owner?: userUpdateOneRequiredWithoutTicketsNestedInput
    type?: ticketTypeUpdateOneRequiredWithoutTicketsNestedInput
    transferredFrom?: userUpdateOneWithoutTransferredTicketsNestedInput
  }

  export type ticketUncheckedUpdateWithoutPaymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    transferredFromId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketUncheckedUpdateManyWithoutPaymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    transferredFromId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketTypeCreateManyEventInput = {
    id?: number
    code: string
    label: string
    price: Decimal | DecimalJsLike | number | string
    stockMax: number
    stockCurrent: number
    userMaxPerType?: number
    scanExpiration?: Date | string | null
    isVisible?: boolean
    isDisabled?: boolean
  }

  export type eventArtistCreateManyEventInput = {
    artistId: number
    order?: number | null
    slotTime?: string | null
    isHeadliner?: boolean
  }

  export type ticketCreateManyEventInput = {
    id?: number
    ownerId: string
    typeId: number
    paymentId?: number | null
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    transferredFromId?: string | null
    createdAt?: Date | string
  }

  export type participantCreateManyEventInput = {
    userId: string
    viaRsvp?: boolean
    qrCode?: string | null
  }

  export type rrppAssignmentCreateManyEventInput = {
    rrppUserId: string
    commissionRate?: Decimal | DecimalJsLike | number | string
    freesGranted?: number
  }

  export type paymentCreateManyEventInput = {
    id?: number
    userId: string
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    provider?: string
    externalReference: string
    mpPreferenceId?: string | null
    mpPaymentId?: string | null
    payerEmail?: string | null
    payerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ticketTypeUpdateWithoutEventInput = {
    code?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockMax?: IntFieldUpdateOperationsInput | number
    stockCurrent?: IntFieldUpdateOperationsInput | number
    userMaxPerType?: IntFieldUpdateOperationsInput | number
    scanExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    tickets?: ticketUpdateManyWithoutTypeNestedInput
  }

  export type ticketTypeUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockMax?: IntFieldUpdateOperationsInput | number
    stockCurrent?: IntFieldUpdateOperationsInput | number
    userMaxPerType?: IntFieldUpdateOperationsInput | number
    scanExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    tickets?: ticketUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type ticketTypeUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockMax?: IntFieldUpdateOperationsInput | number
    stockCurrent?: IntFieldUpdateOperationsInput | number
    userMaxPerType?: IntFieldUpdateOperationsInput | number
    scanExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type eventArtistUpdateWithoutEventInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    slotTime?: NullableStringFieldUpdateOperationsInput | string | null
    isHeadliner?: BoolFieldUpdateOperationsInput | boolean
    artist?: artistUpdateOneRequiredWithoutEventArtistsNestedInput
  }

  export type eventArtistUncheckedUpdateWithoutEventInput = {
    artistId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    slotTime?: NullableStringFieldUpdateOperationsInput | string | null
    isHeadliner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type eventArtistUncheckedUpdateManyWithoutEventInput = {
    artistId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    slotTime?: NullableStringFieldUpdateOperationsInput | string | null
    isHeadliner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ticketUpdateWithoutEventInput = {
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: userUpdateOneRequiredWithoutTicketsNestedInput
    type?: ticketTypeUpdateOneRequiredWithoutTicketsNestedInput
    transferredFrom?: userUpdateOneWithoutTransferredTicketsNestedInput
    payment?: paymentUpdateOneWithoutTicketsNestedInput
  }

  export type ticketUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    paymentId?: NullableIntFieldUpdateOperationsInput | number | null
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    transferredFromId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    paymentId?: NullableIntFieldUpdateOperationsInput | number | null
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    transferredFromId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type participantUpdateWithoutEventInput = {
    viaRsvp?: BoolFieldUpdateOperationsInput | boolean
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type participantUncheckedUpdateWithoutEventInput = {
    userId?: StringFieldUpdateOperationsInput | string
    viaRsvp?: BoolFieldUpdateOperationsInput | boolean
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type participantUncheckedUpdateManyWithoutEventInput = {
    userId?: StringFieldUpdateOperationsInput | string
    viaRsvp?: BoolFieldUpdateOperationsInput | boolean
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type rrppAssignmentUpdateWithoutEventInput = {
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    freesGranted?: IntFieldUpdateOperationsInput | number
    rrppUser?: userUpdateOneRequiredWithoutRrppAssignmentsNestedInput
  }

  export type rrppAssignmentUncheckedUpdateWithoutEventInput = {
    rrppUserId?: StringFieldUpdateOperationsInput | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    freesGranted?: IntFieldUpdateOperationsInput | number
  }

  export type rrppAssignmentUncheckedUpdateManyWithoutEventInput = {
    rrppUserId?: StringFieldUpdateOperationsInput | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    freesGranted?: IntFieldUpdateOperationsInput | number
  }

  export type paymentUpdateWithoutEventInput = {
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    externalReference?: StringFieldUpdateOperationsInput | string
    mpPreferenceId?: NullableStringFieldUpdateOperationsInput | string | null
    mpPaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    payerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    payerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutPaymentsNestedInput
    tickets?: ticketUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    externalReference?: StringFieldUpdateOperationsInput | string
    mpPreferenceId?: NullableStringFieldUpdateOperationsInput | string | null
    mpPaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    payerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    payerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: ticketUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    externalReference?: StringFieldUpdateOperationsInput | string
    mpPreferenceId?: NullableStringFieldUpdateOperationsInput | string | null
    mpPaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    payerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    payerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type eventArtistCreateManyArtistInput = {
    eventId: number
    order?: number | null
    slotTime?: string | null
    isHeadliner?: boolean
  }

  export type eventArtistUpdateWithoutArtistInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    slotTime?: NullableStringFieldUpdateOperationsInput | string | null
    isHeadliner?: BoolFieldUpdateOperationsInput | boolean
    event?: eventUpdateOneRequiredWithoutEventArtistsNestedInput
  }

  export type eventArtistUncheckedUpdateWithoutArtistInput = {
    eventId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    slotTime?: NullableStringFieldUpdateOperationsInput | string | null
    isHeadliner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type eventArtistUncheckedUpdateManyWithoutArtistInput = {
    eventId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    slotTime?: NullableStringFieldUpdateOperationsInput | string | null
    isHeadliner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ticketCreateManyTypeInput = {
    id?: number
    eventId: number
    ownerId: string
    paymentId?: number | null
    qrCode: string
    code?: string | null
    status?: $Enums.TicketStatus
    transferredFromId?: string | null
    createdAt?: Date | string
  }

  export type ticketUpdateWithoutTypeInput = {
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: eventUpdateOneRequiredWithoutTicketsNestedInput
    owner?: userUpdateOneRequiredWithoutTicketsNestedInput
    transferredFrom?: userUpdateOneWithoutTransferredTicketsNestedInput
    payment?: paymentUpdateOneWithoutTicketsNestedInput
  }

  export type ticketUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableIntFieldUpdateOperationsInput | number | null
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    transferredFromId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketUncheckedUpdateManyWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableIntFieldUpdateOperationsInput | number | null
    qrCode?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTicketStatusFieldUpdateOperationsInput | $Enums.TicketStatus
    transferredFromId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}