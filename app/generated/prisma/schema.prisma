// schema.prisma (Extended with App Models)

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth Models (Generated by Better Auth)
model account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id            String   @id
  name          String
  email         String   @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  username           String?          @unique
  dni                String?
  birthDate          DateTime?
  role               Role             @default(user)
  tickets            ticket[]         @relation("ticketsToUser_ownerId")
  transferredTickets ticket[]         @relation("ticketsToUser_transferredFromId")
  participants       participant[]
  rrppAssignments    rrppAssignment[]
  account            account[]
  session            session[]
  logs               log[]
  sentMessages       message[]        @relation("messagesToUser_senderId")
  receivedMessages   message[]        @relation("messagesToUser_receiverId")
  payments           payment[]
}

model verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

// Enums for App
enum Role {
  superadmin
  head_producer
  rrpp
  qr_scanner
  user
}

enum EventStatus {
  draft
  published
  finished
}

enum TicketStatus {
  pending
  paid
  used
  transferred
  refunded
}

enum PaymentStatus {
  pending
  approved
  rejected
  cancelled
  refunded
  in_process
}

model payment {
  id       Int           @id @default(autoincrement())
  userId   String        @map("user_id")
  eventId  Int           @map("event_id")
  status   PaymentStatus @default(pending)
  amount   Decimal       @db.Decimal(12, 2)
  currency String        @default("ARS")
  provider String        @default("mercadopago")

  externalReference String  @unique @map("external_reference")
  mpPreferenceId    String? @map("mp_preference_id")
  mpPaymentId       String? @unique @map("mp_payment_id")

  payerEmail String? @map("payer_email")
  payerName  String? @map("payer_name")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets ticket[]
}

// App Models
model event {
  id                   Int              @id @default(autoincrement())
  name                 String
  date                 DateTime
  location             String
  description          String?
  bannerUrl            String?          @map("banner_url")
  status               EventStatus      @default(draft)
  producerId           Int              @default(1) @map("producer_id")
  capacityTotal        Int?             @map("capacity_total")
  isRsvpAllowed        Boolean          @default(true) @map("is_rsvp_allowed")
  eventGenre           String?          @map("event_genre")
  showRemainingTickets Boolean          @default(true) @map("show_remaining_tickets")
  createdAt            DateTime         @default(now()) @map("created_at")
  ticketTypes          ticketType[]
  eventArtists         eventArtist[]
  tickets              ticket[]
  participants         participant[]
  rrppAssignments      rrppAssignment[]
  payments             payment[]
}

model artist {
  id           Int           @id @default(autoincrement())
  name         String
  bio          String?
  imageUrl     String?       @map("image_url")
  socialLinks  Json?         @map("social_links")
  eventArtists eventArtist[]
}

model eventArtist {
  eventId     Int     @map("event_id")
  artistId    Int     @map("artist_id")
  order       Int?
  slotTime    String? @map("slot_time")
  isHeadliner Boolean @default(false) @map("is_headliner")
  artist      artist  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  event       event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([eventId, artistId])
  @@map("event_artist")
}

model ticketType {
  id             Int       @id @default(autoincrement())
  eventId        Int       @map("event_id")
  code           String
  label          String
  price          Decimal   @db.Decimal(12, 2)
  stockMax       Int       @map("stock_max")
  stockCurrent   Int       @map("stock_current")
  userMaxPerType Int       @default(5) @map("user_max_per_type")
  scanExpiration DateTime? @map("scan_expiration")
  isVisible      Boolean   @default(true) @map("is_visible")
  isDisabled     Boolean   @default(false) @map("is_disabled")
  event          event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets        ticket[]

  @@unique([eventId, code])
  @@map("ticket_type")
}

model ticket {
  id                Int          @id @default(autoincrement())
  eventId           Int          @map("event_id")
  ownerId           String       @map("owner_id")
  typeId            Int          @map("type_id")
  paymentId         Int?         @map("payment_id")
  qrCode            String       @unique @map("qr_code")
  code              String?      @unique
  status            TicketStatus @default(pending)
  transferredFromId String?      @map("transferred_from_id")
  createdAt         DateTime     @default(now()) @map("created_at")
  event             event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  owner             user         @relation("ticketsToUser_ownerId", fields: [ownerId], references: [id], onDelete: Restrict)
  type              ticketType   @relation(fields: [typeId], references: [id], onDelete: Cascade)
  transferredFrom   user?        @relation("ticketsToUser_transferredFromId", fields: [transferredFromId], references: [id])
  payment           payment?     @relation(fields: [paymentId], references: [id], onDelete: SetNull)
}

model rrppAssignment {
  rrppUserId     String  @map("rrpp_user_id")
  eventId        Int     @map("event_id")
  commissionRate Decimal @default(0.10) @map("commission_rate")
  freesGranted   Int     @default(0) @map("frees_granted")
  rrppUser       user    @relation(fields: [rrppUserId], references: [id], onDelete: Cascade)
  event          event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([rrppUserId, eventId])
  @@map("rrpp_assignment")
}

model participant {
  userId  String  @map("user_id")
  eventId Int     @map("event_id")
  viaRsvp Boolean @default(false) @map("via_rsvp")
  qrCode  String? @map("qr_code")
  user    user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
}

model log {
  id        Int      @id @default(autoincrement())
  userId    String?  @map("user_id")
  action    String
  timestamp DateTime @default(now())
  details   Json?
  user      user?    @relation(fields: [userId], references: [id])
}

model message {
  id         Int      @id @default(autoincrement())
  senderId   String   @map("sender_id")
  receiverId String   @map("receiver_id")
  message    String
  timestamp  DateTime @default(now())
  readStatus Boolean  @default(false) @map("read_status")
  sender     user     @relation("messagesToUser_senderId", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   user     @relation("messagesToUser_receiverId", fields: [receiverId], references: [id], onDelete: Cascade)
}
